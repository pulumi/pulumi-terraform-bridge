{
    "name": "redfish",
    "version": "1.5.0",
    "description": "A Pulumi provider dynamically bridged from redfish.",
    "attribution": "This Pulumi package is based on the [`redfish` Terraform Provider](https://github.com/dell/terraform-provider-redfish).",
    "repository": "https://github.com/dell/terraform-provider-redfish",
    "publisher": "dell",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "liftSingleValueMethodReturns": true,
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-terraform-provider/sdks/go/redfish/redfish",
            "rootPackageName": "redfish",
            "liftSingleValueMethodReturns": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "java": {
            "basePackage": "",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageDescription": "A Pulumi provider dynamically bridged from redfish.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dell/terraform-provider-redfish)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e please consult the source [`terraform-provider-redfish` repo](https://github.com/dell/terraform-provider-redfish/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "liftSingleValueMethodReturns": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dell/terraform-provider-redfish)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e please consult the source [`terraform-provider-redfish` repo](https://github.com/dell/terraform-provider-redfish/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "password": {
                "type": "string",
                "description": "This field is the password related to the user given\n",
                "secret": true
            },
            "redfishServers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/types/redfish:config/redfishServers:redfishServers"
                },
                "description": "Map of server BMCs with their alias keys and respective user credentials. This is required when resource/datasource's\n`redfish_alias` is not null\n"
            },
            "user": {
                "type": "string",
                "description": "This field is the user to login against the redfish API\n"
            }
        }
    },
    "types": {
        "redfish:config/redfishServers:redfishServers": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/BiosRedfishServer:BiosRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/BootOrderBootOption:BootOrderBootOption": {
            "properties": {
                "bootOptionEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable the boot device.\n"
                },
                "bootOptionReference": {
                    "type": "string",
                    "description": "FQDD of the boot device.\n"
                }
            },
            "type": "object",
            "required": [
                "bootOptionEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootOptionEnabled",
                        "bootOptionReference"
                    ]
                }
            }
        },
        "redfish:index/BootOrderRedfishServer:BootOrderRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/BootSourceOverrideRedfishServer:BootSourceOverrideRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/CertificateRedfishServer:CertificateRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/DellIdracAttributesRedfishServer:DellIdracAttributesRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/DellLcAttributesRedfishServer:DellLcAttributesRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/DellSystemAttributesRedfishServer:DellSystemAttributesRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/DirectoryServiceAuthProviderActiveDirectory:DirectoryServiceAuthProviderActiveDirectory": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectoryAuthentication:DirectoryServiceAuthProviderActiveDirectoryAuthentication",
                    "description": "Authentication information for the account provider.\n"
                },
                "directory": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectoryDirectory:DirectoryServiceAuthProviderActiveDirectoryDirectory",
                    "description": "Directory for Active Directory .\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authentication",
                        "directory"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderActiveDirectoryAuthentication:DirectoryServiceAuthProviderActiveDirectoryAuthentication": {
            "properties": {
                "kerberosKeyTabFile": {
                    "type": "string",
                    "description": "KerberosKeytab is a Base64-encoded version of the Kerberos keytab for this Service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kerberosKeyTabFile"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderActiveDirectoryDirectory:DirectoryServiceAuthProviderActiveDirectoryDirectory": {
            "properties": {
                "remoteRoleMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping:DirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping"
                    },
                    "description": "Mapping rules that are used to convert the account providers account information to the local Redfish role\n"
                },
                "serviceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ServiceAddresses of the account providers\n"
                },
                "serviceEnabled": {
                    "type": "boolean",
                    "description": "ServiceEnabled indicate whether this service is enabled.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "remoteRoleMappings",
                        "serviceAddresses",
                        "serviceEnabled"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping:DirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping": {
            "properties": {
                "localRole": {
                    "type": "string",
                    "description": "Role Assigned to the Group.\n"
                },
                "remoteGroup": {
                    "type": "string",
                    "description": "Name of the remote group.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "localRole",
                        "remoteGroup"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderLdap:DirectoryServiceAuthProviderLdap": {
            "properties": {
                "directory": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdapDirectory:DirectoryServiceAuthProviderLdapDirectory",
                    "description": "Directory for LDAP.\n"
                },
                "ldapService": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdapLdapService:DirectoryServiceAuthProviderLdapLdapService",
                    "description": "LDAPService is any additional mapping information needed to parse a generic LDAP service.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "directory",
                        "ldapService"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderLdapDirectory:DirectoryServiceAuthProviderLdapDirectory": {
            "properties": {
                "remoteRoleMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping:DirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping"
                    },
                    "description": "Mapping rules that are used to convert the account providers account information to the local Redfish role\n"
                },
                "serviceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ServiceAddresses of the account providers\n"
                },
                "serviceEnabled": {
                    "type": "boolean",
                    "description": "ServiceEnabled indicate whether this service is enabled.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "remoteRoleMappings",
                        "serviceAddresses",
                        "serviceEnabled"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping:DirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping": {
            "properties": {
                "localRole": {
                    "type": "string",
                    "description": "Role Assigned to the Group.\n"
                },
                "remoteGroup": {
                    "type": "string",
                    "description": "Name of the remote group.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "localRole",
                        "remoteGroup"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderLdapLdapService:DirectoryServiceAuthProviderLdapLdapService": {
            "properties": {
                "searchSettings": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdapLdapServiceSearchSettings:DirectoryServiceAuthProviderLdapLdapServiceSearchSettings",
                    "description": "SearchSettings is the required settings to search an external LDAP service.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "searchSettings"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderLdapLdapServiceSearchSettings:DirectoryServiceAuthProviderLdapLdapServiceSearchSettings": {
            "properties": {
                "baseDistinguishedNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "BaseDistinguishedNames is an array of base distinguished names to use to search an external LDAP service.\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "GroupNameAttribute is the attribute name that contains the LDAP group name.\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "UsernameAttribute is the attribute name that contains the LDAP user name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseDistinguishedNames",
                        "groupNameAttribute",
                        "userNameAttribute"
                    ]
                }
            }
        },
        "redfish:index/DirectoryServiceAuthProviderRedfishServer:DirectoryServiceAuthProviderRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/IdracFirmwareUpdateRedfishServer:IdracFirmwareUpdateRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/IdracFirmwareUpdateUpdateList:IdracFirmwareUpdateUpdateList": {
            "properties": {
                "criticality": {
                    "type": "string",
                    "description": "Criticality of the package update.\n"
                },
                "currentPackageVersion": {
                    "type": "string",
                    "description": "Current version of the package.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the package.\n"
                },
                "jobId": {
                    "type": "string",
                    "description": "ID of the job if it's triggered.\n"
                },
                "jobMessage": {
                    "type": "string",
                    "description": "Message from the job if it's triggered.\n"
                },
                "jobStatus": {
                    "type": "string",
                    "description": "Status of the job if it's triggered.\n"
                },
                "packageName": {
                    "type": "string",
                    "description": "Name of the package to be updated.\n"
                },
                "rebootType": {
                    "type": "string",
                    "description": "Reboot type of the package update.\n"
                },
                "targetPackageVersion": {
                    "type": "string",
                    "description": "Target version of the package.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "criticality",
                        "currentPackageVersion",
                        "displayName",
                        "jobId",
                        "jobMessage",
                        "jobStatus",
                        "packageName",
                        "rebootType",
                        "targetPackageVersion"
                    ]
                }
            }
        },
        "redfish:index/IdracServerConfigurationProfileExportRedfishServer:IdracServerConfigurationProfileExportRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/IdracServerConfigurationProfileExportShareParameters:IdracServerConfigurationProfileExportShareParameters": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "File Name - The name of the server configuration profile file to export.\n"
                },
                "ignoreCertificateWarning": {
                    "type": "boolean",
                    "description": "Ignore Certificate Warning\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IPAddress - The IP address of the target export server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password - The password for the share server user account. This password is required if the share type is set to \"CIFS\". It is required only if the share type is set to \"CIFS\". It is not required if the share type is set to \"NFS\".\n",
                    "secret": true
                },
                "portNumber": {
                    "type": "number",
                    "description": "Port Number - The port number used to communicate with the share server. The default value is 80.\n"
                },
                "proxyPassword": {
                    "type": "string",
                    "description": "The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.\n",
                    "secret": true
                },
                "proxyPort": {
                    "type": "number",
                    "description": "The port number used by the proxy server.\n\t\tThis parameter is optional.\n\t\tIf not provided, the default port number (80) is used for the communication with the proxy server.\n"
                },
                "proxyServer": {
                    "type": "string",
                    "description": "The IP address or hostname of the proxy server.\n\t\t This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server.\n\t\t It is used to communicate with the Server Configuration Profile share server\n\t\t in order to export the Server Configuration Profile. If the Server Configuration Profile share server\n\t\t  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection.\n\t\t  This parameter is optional.\n\t\t  If it is not provided, the Server Configuration Profile export operation\n\t\t   will attempt to connect to the Server Configuration Profile share server directly.\n"
                },
                "proxySupport": {
                    "type": "boolean",
                    "description": "Proxy Support - Specifies whether or not to use a proxy server for the export operation. If `true`, export operation will use a proxy server for communication with the export server. If `false`, export operation will not use a proxy server for communication with the export server. Default value is `false`.\n"
                },
                "proxyType": {
                    "type": "string",
                    "description": "The type of proxy server to be used. The default is \"HTTP\". If set to \"SOCKS4\", a SOCKS4 proxy server must be specified. If set to \"HTTP\", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile export operation will attempt to connect to the Server Configuration Profile share server directly.\n"
                },
                "proxyUsername": {
                    "type": "string",
                    "description": "The username to be used when connecting to the proxy server.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name - The name of the directory or share on the server\n\t\tthat contains the Server Configuration Profile file to export.\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "Share Type - The type of share being used to export the Server Configuration Profile file.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter configuration by target\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username - The username to use when authenticating with the server\n\t\t that contains the Server Configuration Profile file being exported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "shareType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "filename",
                        "ignoreCertificateWarning",
                        "portNumber",
                        "proxyPort",
                        "proxySupport",
                        "proxyType",
                        "shareType",
                        "targets"
                    ]
                }
            }
        },
        "redfish:index/IdracServerConfigurationProfileImportRedfishServer:IdracServerConfigurationProfileImportRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/IdracServerConfigurationProfileImportShareParameters:IdracServerConfigurationProfileImportShareParameters": {
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "File Name - The name of the server configuration profile file to import. This is the name of the file that was previously exported using the Server Configuration Profile Export operation. This file is typically in the xml/json format\n"
                },
                "ignoreCertificateWarning": {
                    "type": "boolean",
                    "description": "Ignore Certificate Warning\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IPAddress - The IP address of the target export server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password - The password for the share server user account. This password is required if the share type is set to \"CIFS\". It is required only if the share type is set to \"CIFS\". It is not required if the share type is set to \"NFS\".\n",
                    "secret": true
                },
                "portNumber": {
                    "type": "number",
                    "description": "Port Number - The port number used to communicate with the share server. The default value is 80.\n"
                },
                "proxyPassword": {
                    "type": "string",
                    "description": "The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.\n",
                    "secret": true
                },
                "proxyPort": {
                    "type": "number",
                    "description": "The port number used by the proxy server.\n\t\tThis parameter is optional.\n\t\tIf not provided, the default port number (80) is used for the communication with the proxy server.\n"
                },
                "proxyServer": {
                    "type": "string",
                    "description": "The IP address or hostname of the proxy server.\n\t\t This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server.\n\t\t It is used to communicate with the Server Configuration Profile share server\n\t\t in order to import the Server Configuration Profile. If the Server Configuration Profile share server\n\t\t  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection.\n\t\t  This parameter is optional.\n\t\t  If it is not provided, the Server Configuration Profile import operation\n\t\t   will attempt to connect to the Server Configuration Profile share server directly.\n"
                },
                "proxySupport": {
                    "type": "boolean",
                    "description": "Proxy Support - Specifies whether or not to use a proxy server for the import operation. If `true`, import operation will use a proxy server for communication with the export server. If `false`, import operation will not use a proxy server for communication with the export server. Default value is `false`.\n"
                },
                "proxyType": {
                    "type": "string",
                    "description": "The type of proxy server to be used. The default is \"HTTP\". If set to \"SOCKS4\", a SOCKS4 proxy server must be specified. If set to \"HTTP\", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile import operation will attempt to connect to the Server Configuration Profile share server directly.\n"
                },
                "proxyUsername": {
                    "type": "string",
                    "description": "The username to be used when connecting to the proxy server.\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Share Name - The name of the directory or share on the server\n\t\tthat contains the Server Configuration Profile file to import.\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "Share Type - The type of share being used to import the Server Configuration Profile file.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter configuration by target\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username - The username to use when authenticating with the server\n\t\t that contains the Server Configuration Profile file being imported.\n"
                }
            },
            "type": "object",
            "required": [
                "filename",
                "shareType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "filename",
                        "ignoreCertificateWarning",
                        "portNumber",
                        "proxyPort",
                        "proxySupport",
                        "proxyType",
                        "shareType",
                        "targets"
                    ]
                }
            }
        },
        "redfish:index/ManagerResetRedfishServer:ManagerResetRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/NetworkAdapterMaintenanceWindow:NetworkAdapterMaintenanceWindow": {
            "properties": {
                "duration": {
                    "type": "number",
                    "description": "The duration in seconds for the maintenance window. (Update Supported)\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time for the maintenance window to be scheduled. (Update Supported)The format is YYYY-MM-DDThh:mm:ss\\n\\n. \\n\\n is the time offset from UTC that the current timezone set in iDRAC in the format: +05:30 for IST.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime"
            ]
        },
        "redfish:index/NetworkAdapterNetworkAttributes:NetworkAdapterNetworkAttributes": {
            "properties": {
                "assignablePhysicalNetworkPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A reference to assignable physical network ports to this function\n"
                },
                "assignablePhysicalPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A reference to assignable physical ports to this function\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the network device function\n"
                },
                "ethernet": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesEthernet:NetworkAdapterNetworkAttributesEthernet",
                    "description": "This type describes Ethernet capabilities, status, and configuration for a network device function.  (Update Supported)\n"
                },
                "fibreChannel": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesFibreChannel:NetworkAdapterNetworkAttributesFibreChannel",
                    "description": "This type describes Fibre Channel capabilities, status, and configuration for a network device function. (Update Supported)\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the network device function\n"
                },
                "iscsiBoot": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesIscsiBoot:NetworkAdapterNetworkAttributesIscsiBoot",
                    "description": "The iSCSI boot capabilities, status, and configuration for a network device function. (Update Supported)\n"
                },
                "maxVirtualFunctions": {
                    "type": "number",
                    "description": "The number of virtual functions that are available for this network device function\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the network device function\n"
                },
                "netDevFuncCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of capabilities for this network device function\n"
                },
                "netDevFuncType": {
                    "type": "string",
                    "description": "The configured capability of this network device function. (Update Supported)Accepted values: `Disabled`, `Ethernet`, `FibreChannel`, `iSCSI`, `FibreChannelOverEthernet`, `InfiniBand`.\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the network device function\n"
                },
                "physicalPortAssignment": {
                    "type": "string",
                    "description": "A reference to a physical port assignment to this function\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesStatus:NetworkAdapterNetworkAttributesStatus",
                    "description": "status of the network device function\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignablePhysicalNetworkPorts",
                        "assignablePhysicalPorts",
                        "description",
                        "ethernet",
                        "fibreChannel",
                        "id",
                        "iscsiBoot",
                        "maxVirtualFunctions",
                        "name",
                        "netDevFuncCapabilities",
                        "netDevFuncType",
                        "odataId",
                        "physicalPortAssignment",
                        "status"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesEthernet:NetworkAdapterNetworkAttributesEthernet": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The currently configured MAC address. (Update Supported)\n"
                },
                "mtuSize": {
                    "type": "number",
                    "description": "The maximum transmission unit (MTU) configured for this network device function. (Update Supported)\n"
                },
                "permanentMacAddress": {
                    "type": "string",
                    "description": "The permanent MAC address assigned to this function\n"
                },
                "vlan": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesEthernetVlan:NetworkAdapterNetworkAttributesEthernetVlan",
                    "description": "The attributes of a VLAN. (Update Supported)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "mtuSize",
                        "permanentMacAddress",
                        "vlan"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesEthernetVlan:NetworkAdapterNetworkAttributesEthernetVlan": {
            "properties": {
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether the VLAN is enabled. (Update Supported)\n"
                },
                "vlanId": {
                    "type": "number",
                    "description": "The vlan id of the network device function. (Update Supported)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanEnabled",
                        "vlanId"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesFibreChannel:NetworkAdapterNetworkAttributesFibreChannel": {
            "properties": {
                "allowFipVlanDiscovery": {
                    "type": "boolean",
                    "description": "An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID. (Update Supported)\n"
                },
                "bootTargets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributesFibreChannelBootTarget:NetworkAdapterNetworkAttributesFibreChannelBootTarget"
                    },
                    "description": "A Fibre Channel boot target configured for a network device function. (Update Supported)\n"
                },
                "fcoeActiveVlanId": {
                    "type": "number",
                    "description": "The active FCoE VLAN ID\n"
                },
                "fcoeLocalVlanId": {
                    "type": "number",
                    "description": "The locally configured FCoE VLAN ID. (Update Supported)\n"
                },
                "fibreChannelId": {
                    "type": "string",
                    "description": "The Fibre Channel ID that the switch assigns for this interface\n"
                },
                "permanentWwnn": {
                    "type": "string",
                    "description": "The permanent World Wide Node Name (WWNN) address assigned to this function\n"
                },
                "permanentWwpn": {
                    "type": "string",
                    "description": "The permanent World Wide Port Name (WWPN) address assigned to this function\n"
                },
                "wwnSource": {
                    "type": "string",
                    "description": "The configuration source of the World Wide Names (WWN) for this World Wide Node Name (WWNN) and World Wide Port Name (WWPN) connection. (Update Supported). Accepted values: `ConfiguredLocally`, `ProvidedByFabric`.\n"
                },
                "wwnn": {
                    "type": "string",
                    "description": "The currently configured World Wide Node Name (WWNN) address of this function. (Update Supported)\n"
                },
                "wwpn": {
                    "type": "string",
                    "description": "The currently configured World Wide Port Name (WWPN) address of this function. (Update Supported)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowFipVlanDiscovery",
                        "bootTargets",
                        "fcoeActiveVlanId",
                        "fcoeLocalVlanId",
                        "fibreChannelId",
                        "permanentWwnn",
                        "permanentWwpn",
                        "wwnSource",
                        "wwnn",
                        "wwpn"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesFibreChannelBootTarget:NetworkAdapterNetworkAttributesFibreChannelBootTarget": {
            "properties": {
                "bootPriority": {
                    "type": "number",
                    "description": "The relative priority for this entry in the boot targets array. (Update Supported)\n"
                },
                "lunId": {
                    "type": "string",
                    "description": "The logical unit number (LUN) ID from which to boot on the device to which the corresponding WWPN refers. (Update Supported)\n"
                },
                "wwpn": {
                    "type": "string",
                    "description": "The World Wide Port Name (WWPN) from which to boot. (Update Supported)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootPriority",
                        "lunId",
                        "wwpn"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesIscsiBoot:NetworkAdapterNetworkAttributesIscsiBoot": {
            "properties": {
                "authenticationMethod": {
                    "type": "string",
                    "description": "The iSCSI boot authentication method for this network device function. (Update Supported)Accepted values: `None`, `CHAP`, `MutualCHAP`.\n"
                },
                "chapSecret": {
                    "type": "string",
                    "description": "The shared secret for CHAP authentication. (Update Supported)\n",
                    "secret": true
                },
                "chapUsername": {
                    "type": "string",
                    "description": "The user name for CHAP authentication. (Update Supported)\n"
                },
                "initiatorDefaultGateway": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 iSCSI boot default gateway. (Update Supported)\n"
                },
                "initiatorIpAddress": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the iSCSI initiator. (Update Supported)\n"
                },
                "initiatorName": {
                    "type": "string",
                    "description": "The iSCSI initiator name. (Update Supported)\n"
                },
                "initiatorNetmask": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 netmask of the iSCSI boot initiator. (Update Supported)\n"
                },
                "ipAddressType": {
                    "type": "string",
                    "description": "The type of IP address being populated in the iSCSIBoot IP address fields. (Update Supported) Accepted values: `IPv4`, `IPv6`.\n"
                },
                "ipMaskDnsViaDhcp": {
                    "type": "boolean",
                    "description": "An indication of whether the iSCSI boot initiator uses DHCP to obtain the initiator name, IP address, and netmask. (Update Supported)\n"
                },
                "mutualChapSecret": {
                    "type": "string",
                    "description": "The CHAP secret for two-way CHAP authentication. (Update Supported)\n",
                    "secret": true
                },
                "mutualChapUsername": {
                    "type": "string",
                    "description": "The CHAP user name for two-way CHAP authentication. (Update Supported)\n"
                },
                "primaryDns": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the primary DNS server for the iSCSI boot initiator. (Update Supported)\n"
                },
                "primaryLun": {
                    "type": "number",
                    "description": "The logical unit number (LUN) for the primary iSCSI boot target. (Update Supported)\n"
                },
                "primaryTargetIpAddress": {
                    "type": "string",
                    "description": "The IPv4 or IPv6 address for the primary iSCSI boot target. (Update Supported)\n"
                },
                "primaryTargetName": {
                    "type": "string",
                    "description": "The name of the iSCSI primary boot target. (Update Supported)\n"
                },
                "primaryTargetTcpPort": {
                    "type": "number",
                    "description": "The TCP port for the primary iSCSI boot target. (Update Supported)\n"
                },
                "primaryVlanEnable": {
                    "type": "boolean",
                    "description": "An indication of whether the primary VLAN is enabled. (Update Supported)\n"
                },
                "primaryVlanId": {
                    "type": "number",
                    "description": "The 802.1q VLAN ID to use for iSCSI boot from the primary target. (Update Supported)\n"
                },
                "routerAdvertisementEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether IPv6 router advertisement is enabled for the iSCSI boot target. (Update Supported)\n"
                },
                "secondaryDns": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the secondary DNS server for the iSCSI boot initiator. (Update Supported)\n"
                },
                "secondaryLun": {
                    "type": "number",
                    "description": "The logical unit number (LUN) for the secondary iSCSI boot target. (Update Supported)\n"
                },
                "secondaryTargetIpAddress": {
                    "type": "string",
                    "description": "The IPv4 or IPv6 address for the secondary iSCSI boot target. (Update Supported)\n"
                },
                "secondaryTargetName": {
                    "type": "string",
                    "description": "The name of the iSCSI secondary boot target. (Update Supported)\n"
                },
                "secondaryTargetTcpPort": {
                    "type": "number",
                    "description": "The TCP port for the secondary iSCSI boot target. (Update Supported)\n"
                },
                "secondaryVlanEnable": {
                    "type": "boolean",
                    "description": "An indication of whether the secondary VLAN is enabled. (Update Supported)\n"
                },
                "secondaryVlanId": {
                    "type": "number",
                    "description": "The 802.1q VLAN ID to use for iSCSI boot from the secondary target. (Update Supported)\n"
                },
                "targetInfoViaDhcp": {
                    "type": "boolean",
                    "description": "An indication of whether the iSCSI boot target name, LUN, IP address, and netmask should be obtained from DHCP. (Update Supported)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationMethod",
                        "chapSecret",
                        "chapUsername",
                        "initiatorDefaultGateway",
                        "initiatorIpAddress",
                        "initiatorName",
                        "initiatorNetmask",
                        "ipAddressType",
                        "ipMaskDnsViaDhcp",
                        "mutualChapSecret",
                        "mutualChapUsername",
                        "primaryDns",
                        "primaryLun",
                        "primaryTargetIpAddress",
                        "primaryTargetName",
                        "primaryTargetTcpPort",
                        "primaryVlanEnable",
                        "primaryVlanId",
                        "routerAdvertisementEnabled",
                        "secondaryDns",
                        "secondaryLun",
                        "secondaryTargetIpAddress",
                        "secondaryTargetName",
                        "secondaryTargetTcpPort",
                        "secondaryVlanEnable",
                        "secondaryVlanId",
                        "targetInfoViaDhcp"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterNetworkAttributesStatus:NetworkAdapterNetworkAttributesStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "health",
                        "healthRollup",
                        "state"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterOemNetworkAttributes:NetworkAdapterOemNetworkAttributes": {
            "properties": {
                "attributeRegistry": {
                    "type": "string",
                    "description": "registry of the network_attributes\n"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "dell network attributes. (Update Supported) To check allowed attributes please either use the datasource for dell network attributes: data.redfish*network or query /redfish/v1/Chassis/System.Embedded.1/NetworkAdapters/NIC.Integrated.1/NetworkDeviceFunctions/NIC.Integrated.1-3-1/Oem/Dell/DellNetworkAttributes/NIC.Integrated.1-3-1 to get attributes for NIC. To get allowed values for those attributes, check /redfish/v1/Registries/NetworkAttributesRegistry*{network*device*function*id}/NetworkAttributesRegistry*{network*device*function_id}.json from a Redfish Instance\n"
                },
                "clearPending": {
                    "type": "boolean",
                    "description": "This parameter allows you to clear all the pending OEM network attributes changes. (Update Supported)`false`: does not perform any operation. `true`:  discards any pending changes to network attributes, or if a job is in scheduled state, removes the job. `apply_time` value will be ignored and will not have any impact for `clear_pending` operation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of network_attributes\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the network_attributes\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the network_attributes\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the network_attributes\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attributeRegistry",
                        "attributes",
                        "description",
                        "id",
                        "name",
                        "odataId"
                    ]
                }
            }
        },
        "redfish:index/NetworkAdapterRedfishServer:NetworkAdapterRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/PowerRedfishServer:PowerRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/ProviderRedfishServers:ProviderRedfishServers": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "redfish:index/SimpleUpdateRedfishServer:SimpleUpdateRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/StorageControllerMaintenanceWindow:StorageControllerMaintenanceWindow": {
            "properties": {
                "duration": {
                    "type": "number",
                    "description": "The duration in seconds for the maintenance window. (Update Supported)\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time for the maintenance window to be scheduled. (Update Supported)The format is YYYY-MM-DDThh:mm:ss\\n\\n. \\n\\n is the time offset from UTC that the current timezone set in iDRAC in the format: +05:30 for IST.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime"
            ]
        },
        "redfish:index/StorageControllerRedfishServer:StorageControllerRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/StorageControllerSecurity:StorageControllerSecurity": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to create/change/delete the security key. Accepted values: `SetControllerKey`, `ReKey`, `RemoveControllerKey`. The `SetControllerKey` action is used to set the key on controllers and set the controller in Local key Management (LKM) to encrypt the drives. The `ReKey` action resets the key on the controller that support encryption of the of drives. The `RemoveControllerKey` method erases the encryption key on controller. CAUTION: All encrypted drives shall be erased.\n"
                },
                "key": {
                    "type": "string",
                    "description": "New controller key.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Key Identifier that describes the key. The Key ID shall be maximum of 32 characters in length and should not have any spaces.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode of the controller: Local Key Management(LKM)/Secure Enterprise Key Manager(SEKM). Accepted values: `LKM`, `SEKM`.\n"
                },
                "oldKey": {
                    "type": "string",
                    "description": "Old controller key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "key",
                        "keyId",
                        "mode",
                        "oldKey"
                    ]
                }
            }
        },
        "redfish:index/StorageControllerStorageController:StorageControllerStorageController": {
            "properties": {
                "controllerRates": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageControllerControllerRates:StorageControllerStorageControllerControllerRates",
                    "description": "This type describes the various controller rates used for processes such as volume rebuild or consistency checks.\n"
                },
                "oem": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageControllerOem:StorageControllerStorageControllerOem",
                    "description": "The OEM extension to the StorageController resource.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "controllerRates",
                        "oem"
                    ]
                }
            }
        },
        "redfish:index/StorageControllerStorageControllerControllerRates:StorageControllerStorageControllerControllerRates": {
            "properties": {
                "consistencyCheckRatePercent": {
                    "type": "number",
                    "description": "This property describes the controller rate for consistency check\n"
                },
                "rebuildRatePercent": {
                    "type": "number",
                    "description": "This property describes the controller rate for volume rebuild\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consistencyCheckRatePercent",
                        "rebuildRatePercent"
                    ]
                }
            }
        },
        "redfish:index/StorageControllerStorageControllerOem:StorageControllerStorageControllerOem": {
            "properties": {
                "dell": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageControllerOemDell:StorageControllerStorageControllerOemDell",
                    "description": "Dell\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dell"
                    ]
                }
            }
        },
        "redfish:index/StorageControllerStorageControllerOemDell:StorageControllerStorageControllerOemDell": {
            "properties": {
                "dellStorageController": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageControllerOemDellDellStorageController:StorageControllerStorageControllerOemDellDellStorageController",
                    "description": "Dell Storage Controller\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dellStorageController"
                    ]
                }
            }
        },
        "redfish:index/StorageControllerStorageControllerOemDellDellStorageController:StorageControllerStorageControllerOemDellDellStorageController": {
            "properties": {
                "backgroundInitializationRatePercent": {
                    "type": "number",
                    "description": "Background Initialization Rate Percent\n"
                },
                "checkConsistencyMode": {
                    "type": "string",
                    "description": "Check Consistency Mode. Accepted values: `Normal`, `StopOnError`.\n"
                },
                "controllerMode": {
                    "type": "string",
                    "description": "Controller Mode. Accepted values: `RAID`, `HBA`. When updating `controller_mode`, the `apply_time` should be `OnReset` and no other attributes from `storage_controller` or `security` should be updated. Specifically, when updating `controller_mode` to `HBA`, the `enhanced_auto_import_foreign_configuration_mode` attribute needs to be commented and also ensure that the security key is not present, if present first delete it using `RemoveControllerKey` action.\n"
                },
                "copybackMode": {
                    "type": "string",
                    "description": "Copyback Mode. Accepted values: `On`, `OnWithSMART`, `Off`.\n"
                },
                "enhancedAutoImportForeignConfigurationMode": {
                    "type": "string",
                    "description": "Enhanced Auto Import Foreign Configuration Mode. Accepted values: `Disabled`, `Enabled`. When updating `controller_mode` to `HBA`, this attribute needs to be commented.\n"
                },
                "loadBalanceMode": {
                    "type": "string",
                    "description": "Load Balance Mode. Accepted values: `Automatic`, `Disabled`.\n"
                },
                "patrolReadMode": {
                    "type": "string",
                    "description": "Patrol Read Mode. Accepted values: `Disabled`, `Automatic`, `Manual`.\n"
                },
                "patrolReadUnconfiguredAreaMode": {
                    "type": "string",
                    "description": "Patrol Read Unconfigured Area Mode. Accepted values: `Disabled`, `Enabled`.\n"
                },
                "reconstructRatePercent": {
                    "type": "number",
                    "description": "Reconstruct Rate Percent\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backgroundInitializationRatePercent",
                        "checkConsistencyMode",
                        "controllerMode",
                        "copybackMode",
                        "enhancedAutoImportForeignConfigurationMode",
                        "loadBalanceMode",
                        "patrolReadMode",
                        "patrolReadUnconfiguredAreaMode",
                        "reconstructRatePercent"
                    ]
                }
            }
        },
        "redfish:index/StorageVolumeRedfishServer:StorageVolumeRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/UserAccountRedfishServer:UserAccountRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/VirtualMediaRedfishServer:VirtualMediaRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getBiosBootOption:getBiosBootOption": {
            "properties": {
                "bootOptionEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable the boot device.\n"
                },
                "bootOptionReference": {
                    "type": "string",
                    "description": "FQDD of the boot device.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the boot option\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the boot option\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the boot option\n"
                },
                "uefiDevicePath": {
                    "type": "string",
                    "description": "Device path of the boot option\n"
                }
            },
            "type": "object",
            "required": [
                "bootOptionEnabled",
                "bootOptionReference",
                "displayName",
                "id",
                "name",
                "uefiDevicePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getBiosRedfishServer:getBiosRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getDellIdracAttributesRedfishServer:getDellIdracAttributesRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProvider:getDirectoryServiceAuthProviderDirectoryServiceAuthProvider": {
            "properties": {
                "accountLockoutCounterResetAfter": {
                    "type": "number",
                    "description": "Account Lockout Counter Reset After\n"
                },
                "accountLockoutDuration": {
                    "type": "number",
                    "description": "Account Lockout Duration\n"
                },
                "accountLockoutThreshold": {
                    "type": "number",
                    "description": "Account Lockout Threshold\n"
                },
                "accounts": {
                    "type": "string",
                    "description": "Accounts is a link to a Resource Collection of type ManagerAccountCollection.\n"
                },
                "activeDirectory": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectory",
                    "description": "Active Directory\n"
                },
                "additionalExternalAccountProviders": {
                    "type": "string",
                    "description": "AdditionalExternalAccountProviders is the additional external account providers that this Account Service uses.\n"
                },
                "authFailureLoggingThreshold": {
                    "type": "number",
                    "description": "Auth Failure Logging Threshold\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Account Service\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the Account Service\n"
                },
                "ldap": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdap:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdap",
                    "description": "LDAP\n"
                },
                "localAccountAuth": {
                    "type": "string",
                    "description": "Local Account Auth\n"
                },
                "maxPasswordLength": {
                    "type": "number",
                    "description": "Maximum Length of the Password\n"
                },
                "minPasswordLength": {
                    "type": "number",
                    "description": "Minimum Length of the Password\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Account Service.\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the Account Service instance\n"
                },
                "passwordExpirationDays": {
                    "type": "number",
                    "description": "Password Expiration Days\n"
                },
                "privilegeMap": {
                    "type": "string",
                    "description": "Privilege Map\n"
                },
                "roles": {
                    "type": "string",
                    "description": "roles is a link to a Resource Collection of type RoleCollection.\n"
                },
                "serviceEnabled": {
                    "type": "boolean",
                    "description": "ServiceEnabled indicate whether the Accountr Service is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderStatus:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderStatus",
                    "description": "Status is any status or health properties of the Resource.\n"
                },
                "supportedAccountTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SupportedAccountTypes is an array of the account types supported by the service.\n"
                },
                "supportedOemAccountTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SupportedOEMAccountTypes is an array of the OEM account types supported by the service.\n"
                }
            },
            "type": "object",
            "required": [
                "accountLockoutCounterResetAfter",
                "accountLockoutDuration",
                "accountLockoutThreshold",
                "accounts",
                "activeDirectory",
                "additionalExternalAccountProviders",
                "authFailureLoggingThreshold",
                "description",
                "id",
                "ldap",
                "localAccountAuth",
                "maxPasswordLength",
                "minPasswordLength",
                "name",
                "odataId",
                "passwordExpirationDays",
                "privilegeMap",
                "roles",
                "serviceEnabled",
                "status",
                "supportedAccountTypes",
                "supportedOemAccountTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectory": {
            "properties": {
                "directory": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectory",
                    "description": "Directory for Active Directory .\n"
                }
            },
            "type": "object",
            "required": [
                "directory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectory": {
            "properties": {
                "accountProviderType": {
                    "type": "string",
                    "description": "AccountProviderType is the type of external account provider to which this service connects.\n"
                },
                "authentication": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryAuthentication:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryAuthentication",
                    "description": "Authentication information for the account provider.\n"
                },
                "certificates": {
                    "type": "string",
                    "description": "Certificates is a link to a resource collection of type CertificateCollection that contains certificates the external account provider uses.\n"
                },
                "remoteRoleMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping"
                    },
                    "description": "Mapping rules that are used to convert the account providers account information to the local Redfish role\n"
                },
                "serviceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ServiceAddresses of the account providers\n"
                },
                "serviceEnabled": {
                    "type": "boolean",
                    "description": "ServiceEnabled indicate whether this service is enabled.\n"
                }
            },
            "type": "object",
            "required": [
                "accountProviderType",
                "authentication",
                "certificates",
                "remoteRoleMappings",
                "serviceAddresses",
                "serviceEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryAuthentication:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryAuthentication": {
            "properties": {
                "authenticationType": {
                    "type": "string",
                    "description": "AuthenticationType is used to connect to the account provider\n"
                }
            },
            "type": "object",
            "required": [
                "authenticationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderActiveDirectoryDirectoryRemoteRoleMapping": {
            "properties": {
                "localRole": {
                    "type": "string",
                    "description": "Role Assigned to the Group.\n"
                },
                "remoteGroup": {
                    "type": "string",
                    "description": "Name of the remote group.\n"
                }
            },
            "type": "object",
            "required": [
                "localRole",
                "remoteGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdap:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdap": {
            "properties": {
                "directory": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectory",
                    "description": "Directory for LDAP.\n"
                },
                "ldapService": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapService:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapService",
                    "description": "LDAPService is any additional mapping information needed to parse a generic LDAP service.\n"
                }
            },
            "type": "object",
            "required": [
                "directory",
                "ldapService"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectory:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectory": {
            "properties": {
                "accountProviderType": {
                    "type": "string",
                    "description": "AccountProviderType is the type of external account provider to which this service connects.\n"
                },
                "authentication": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryAuthentication:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryAuthentication",
                    "description": "Authentication information for the account provider.\n"
                },
                "certificates": {
                    "type": "string",
                    "description": "Certificates is a link to a resource collection of type CertificateCollection that contains certificates the external account provider uses.\n"
                },
                "remoteRoleMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping"
                    },
                    "description": "Mapping rules that are used to convert the account providers account information to the local Redfish role\n"
                },
                "serviceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ServiceAddresses of the account providers\n"
                },
                "serviceEnabled": {
                    "type": "boolean",
                    "description": "ServiceEnabled indicate whether this service is enabled.\n"
                }
            },
            "type": "object",
            "required": [
                "accountProviderType",
                "authentication",
                "certificates",
                "remoteRoleMappings",
                "serviceAddresses",
                "serviceEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryAuthentication:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryAuthentication": {
            "properties": {
                "authenticationType": {
                    "type": "string",
                    "description": "AuthenticationType is used to connect to the account provider\n"
                }
            },
            "type": "object",
            "required": [
                "authenticationType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapDirectoryRemoteRoleMapping": {
            "properties": {
                "localRole": {
                    "type": "string",
                    "description": "Role Assigned to the Group.\n"
                },
                "remoteGroup": {
                    "type": "string",
                    "description": "Name of the remote group.\n"
                }
            },
            "type": "object",
            "required": [
                "localRole",
                "remoteGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapService:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapService": {
            "properties": {
                "searchSettings": {
                    "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapServiceSearchSettings:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapServiceSearchSettings",
                    "description": "SearchSettings is the required settings to search an external LDAP service.\n"
                }
            },
            "type": "object",
            "required": [
                "searchSettings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapServiceSearchSettings:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderLdapLdapServiceSearchSettings": {
            "properties": {
                "baseDistinguishedNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "BaseDistinguishedNames is an array of base distinguished names to use to search an external LDAP service.\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "GroupNameAttribute is the attribute name that contains the LDAP group name.\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "UsernameAttribute is the attribute name that contains the LDAP user name.\n"
                }
            },
            "type": "object",
            "required": [
                "baseDistinguishedNames",
                "groupNameAttribute",
                "userNameAttribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProviderStatus:getDirectoryServiceAuthProviderDirectoryServiceAuthProviderStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getDirectoryServiceAuthProviderRedfishServer:getDirectoryServiceAuthProviderRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getFirmwareInventoryInventory:getFirmwareInventoryInventory": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "entity id of the firmware inventory\n"
                },
                "entityName": {
                    "type": "string",
                    "description": "entity name of the firmware inventory\n"
                },
                "version": {
                    "type": "string",
                    "description": "firmware inventory version\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "entityName",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getFirmwareInventoryRedfishServer:getFirmwareInventoryRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getNetworkNetworkInterface:getNetworkNetworkInterface": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the NIC data-source\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the NIC data-source\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the NIC data-source\n"
                },
                "networkAdapter": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapter:getNetworkNetworkInterfaceNetworkAdapter",
                    "description": "Network adapter fetched\n"
                },
                "networkDeviceFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunction:getNetworkNetworkInterfaceNetworkDeviceFunction"
                    },
                    "description": "List of network device functions fetched\n"
                },
                "networkPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPort:getNetworkNetworkInterfaceNetworkPort"
                    },
                    "description": "List of network ports fetched\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the NIC instance\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceStatus:getNetworkNetworkInterfaceStatus",
                    "description": "The status and health of a resource and its children\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "networkAdapter",
                "networkDeviceFunctions",
                "networkPorts",
                "odataId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapter:getNetworkNetworkInterfaceNetworkAdapter": {
            "properties": {
                "controllers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterController:getNetworkNetworkInterfaceNetworkAdapterController"
                    },
                    "description": "A network controller ASIC that makes up part of a network adapter\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the network adapter\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the network adapter\n"
                },
                "manufacturer": {
                    "type": "string",
                    "description": "The manufacturer or OEM of this network adapter\n"
                },
                "model": {
                    "type": "string",
                    "description": "The model string for this network adapter\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network adapter\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the network adapter\n"
                },
                "partNumber": {
                    "type": "string",
                    "description": "Part number for this network adapter\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The serial number for this network adapter\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterStatus:getNetworkNetworkInterfaceNetworkAdapterStatus",
                    "description": "The status and health of a resource and its children\n"
                }
            },
            "type": "object",
            "required": [
                "controllers",
                "description",
                "id",
                "manufacturer",
                "model",
                "name",
                "odataId",
                "partNumber",
                "serialNumber",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterController:getNetworkNetworkInterfaceNetworkAdapterController": {
            "properties": {
                "controllerCapabilities": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities",
                    "description": "The capabilities of this controller\n"
                },
                "firmwarePackageVersion": {
                    "type": "string",
                    "description": "The version of the user-facing firmware package\n"
                }
            },
            "type": "object",
            "required": [
                "controllerCapabilities",
                "firmwarePackageVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities": {
            "properties": {
                "dataCenterBridging": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging",
                    "description": "Data center bridging (DCB) for capabilities of a controller\n"
                },
                "npar": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar",
                    "description": "NIC Partitioning capability, status, and configuration for a controller\n"
                },
                "npiv": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv",
                    "description": "N*Port ID Virtualization (NPIV) capabilities for a controller\n"
                },
                "virtualizationOffload": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload",
                    "description": "A Virtualization offload capability of a controller\n"
                }
            },
            "type": "object",
            "required": [
                "dataCenterBridging",
                "npar",
                "npiv",
                "virtualizationOffload"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging": {
            "properties": {
                "capable": {
                    "type": "boolean",
                    "description": "An indication of whether this controller is capable of data center bridging (DCB)\n"
                }
            },
            "type": "object",
            "required": [
                "capable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar": {
            "properties": {
                "nparCapable": {
                    "type": "boolean",
                    "description": "An indication of whether the controller supports NIC function partitioning\n"
                },
                "nparEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether NIC function partitioning is active on this controller.\n"
                }
            },
            "type": "object",
            "required": [
                "nparCapable",
                "nparEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv": {
            "properties": {
                "maxDeviceLogins": {
                    "type": "number",
                    "description": "The maximum number of N_Port ID Virtualization (NPIV) logins allowed simultaneously from all ports on this controller\n"
                },
                "maxPortLogins": {
                    "type": "number",
                    "description": "The maximum number of N_Port ID Virtualization (NPIV) logins allowed per physical port on this controller\n"
                }
            },
            "type": "object",
            "required": [
                "maxDeviceLogins",
                "maxPortLogins"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload": {
            "properties": {
                "sriov": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov",
                    "description": "Single-root input/output virtualization (SR-IOV) capabilities\n"
                },
                "virtualFunction": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction",
                    "description": "A virtual function of a controller\n"
                }
            },
            "type": "object",
            "required": [
                "sriov",
                "virtualFunction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov": {
            "properties": {
                "sriovVepaCapable": {
                    "type": "boolean",
                    "description": "An indication of whether this controller supports single root input/output virtualization (SR-IOV)in Virtual Ethernet Port Aggregator (VEPA) mode\n"
                }
            },
            "type": "object",
            "required": [
                "sriovVepaCapable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction:getNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction": {
            "properties": {
                "deviceMaxCount": {
                    "type": "number",
                    "description": "The maximum number of virtual functions supported by this controller\n"
                },
                "minAssignmentGroupSize": {
                    "type": "number",
                    "description": "The minimum number of virtual functions that can be allocated or moved between physical functions for this controller\n"
                },
                "networkPortMaxCount": {
                    "type": "number",
                    "description": "The maximum number of virtual functions supported per network port for this controller\n"
                }
            },
            "type": "object",
            "required": [
                "deviceMaxCount",
                "minAssignmentGroupSize",
                "networkPortMaxCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkAdapterStatus:getNetworkNetworkInterfaceNetworkAdapterStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunction:getNetworkNetworkInterfaceNetworkDeviceFunction": {
            "properties": {
                "assignablePhysicalNetworkPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A reference to assignable physical network ports to this function\n"
                },
                "assignablePhysicalPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A reference to assignable physical ports to this function\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the network device function\n"
                },
                "ethernet": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionEthernet:getNetworkNetworkInterfaceNetworkDeviceFunctionEthernet",
                    "description": "This type describes Ethernet capabilities, status, and configuration for a network device function\n"
                },
                "fibreChannel": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel:getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel",
                    "description": "This type describes Fibre Channel capabilities, status, and configuration for a network device function\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the network device function\n"
                },
                "iscsiBoot": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot:getNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot",
                    "description": "The iSCSI boot capabilities, status, and configuration for a network device function\n"
                },
                "maxVirtualFunctions": {
                    "type": "number",
                    "description": "The number of virtual functions that are available for this network device function\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the network device function\n"
                },
                "netDevFuncCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of capabilities for this network device function\n"
                },
                "netDevFuncType": {
                    "type": "string",
                    "description": "The configured capability of this network device function\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the network device function\n"
                },
                "oem": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOem:getNetworkNetworkInterfaceNetworkDeviceFunctionOem",
                    "description": "The OEM extension for this network network function\n"
                },
                "physicalPortAssignment": {
                    "type": "string",
                    "description": "A reference to a physical port assignment to this function\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionStatus:getNetworkNetworkInterfaceNetworkDeviceFunctionStatus",
                    "description": "status of the network device function\n"
                }
            },
            "type": "object",
            "required": [
                "assignablePhysicalNetworkPorts",
                "assignablePhysicalPorts",
                "description",
                "ethernet",
                "fibreChannel",
                "id",
                "iscsiBoot",
                "maxVirtualFunctions",
                "name",
                "netDevFuncCapabilities",
                "netDevFuncType",
                "odataId",
                "oem",
                "physicalPortAssignment",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionEthernet:getNetworkNetworkInterfaceNetworkDeviceFunctionEthernet": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The currently configured MAC address\n"
                },
                "mtuSize": {
                    "type": "number",
                    "description": "The maximum transmission unit (MTU) configured for this network device function\n"
                },
                "permanentMacAddress": {
                    "type": "string",
                    "description": "The permanent MAC address assigned to this function\n"
                },
                "vlan": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan:getNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan",
                    "description": "The attributes of a VLAN\n"
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "mtuSize",
                "permanentMacAddress",
                "vlan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan:getNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan": {
            "properties": {
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether the VLAN is enabled\n"
                },
                "vlanId": {
                    "type": "number",
                    "description": "The vlan id of the network device function\n"
                }
            },
            "type": "object",
            "required": [
                "vlanEnabled",
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel:getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel": {
            "properties": {
                "allowFipVlanDiscovery": {
                    "type": "boolean",
                    "description": "An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID\n"
                },
                "bootTargets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget:getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget"
                    },
                    "description": "A Fibre Channel boot target configured for a network device function\n"
                },
                "fcoeActiveVlanId": {
                    "type": "number",
                    "description": "The active FCoE VLAN ID\n"
                },
                "fcoeLocalVlanId": {
                    "type": "number",
                    "description": "The locally configured FCoE VLAN ID\n"
                },
                "fibreChannelId": {
                    "type": "string",
                    "description": "The Fibre Channel ID that the switch assigns for this interface\n"
                },
                "permanentWwnn": {
                    "type": "string",
                    "description": "The permanent World Wide Node Name (WWNN) address assigned to this function\n"
                },
                "permanentWwpn": {
                    "type": "string",
                    "description": "The permanent World Wide Port Name (WWPN) address assigned to this function\n"
                },
                "wwnSource": {
                    "type": "string",
                    "description": "The configuration source of the World Wide Names (WWN) for this World Wide Node Name (WWNN) and World Wide Port Name (WWPN) connection\n"
                },
                "wwnn": {
                    "type": "string",
                    "description": "The currently configured World Wide Node Name (WWNN) address of this function\n"
                },
                "wwpn": {
                    "type": "string",
                    "description": "The currently configured World Wide Port Name (WWPN) address of this function\n"
                }
            },
            "type": "object",
            "required": [
                "allowFipVlanDiscovery",
                "bootTargets",
                "fcoeActiveVlanId",
                "fcoeLocalVlanId",
                "fibreChannelId",
                "permanentWwnn",
                "permanentWwpn",
                "wwnSource",
                "wwnn",
                "wwpn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget:getNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget": {
            "properties": {
                "bootPriority": {
                    "type": "number",
                    "description": "The relative priority for this entry in the boot targets array\n"
                },
                "lunId": {
                    "type": "string",
                    "description": "The logical unit number (LUN) ID from which to boot on the device to which the corresponding WWPN refers\n"
                },
                "wwpn": {
                    "type": "string",
                    "description": "The World Wide Port Name (WWPN) from which to boot\n"
                }
            },
            "type": "object",
            "required": [
                "bootPriority",
                "lunId",
                "wwpn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot:getNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot": {
            "properties": {
                "authenticationMethod": {
                    "type": "string",
                    "description": "The iSCSI boot authentication method for this network device function\n"
                },
                "chapSecret": {
                    "type": "string",
                    "description": "The shared secret for CHAP authentication\n",
                    "secret": true
                },
                "chapUsername": {
                    "type": "string",
                    "description": "The user name for CHAP authentication\n"
                },
                "initiatorDefaultGateway": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 iSCSI boot default gateway\n"
                },
                "initiatorIpAddress": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the iSCSI initiator\n"
                },
                "initiatorName": {
                    "type": "string",
                    "description": "The iSCSI initiator name\n"
                },
                "initiatorNetmask": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 netmask of the iSCSI boot initiator\n"
                },
                "ipAddressType": {
                    "type": "string",
                    "description": "The type of IP address being populated in the iSCSIBoot IP address fields\n"
                },
                "ipMaskDnsViaDhcp": {
                    "type": "boolean",
                    "description": "An indication of whether the iSCSI boot initiator uses DHCP to obtain the initiator name, IP address, and netmask\n"
                },
                "mutualChapSecret": {
                    "type": "string",
                    "description": "The CHAP secret for two-way CHAP authentication\n",
                    "secret": true
                },
                "mutualChapUsername": {
                    "type": "string",
                    "description": "The CHAP user name for two-way CHAP authentication\n"
                },
                "primaryDns": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the primary DNS server for the iSCSI boot initiator\n"
                },
                "primaryLun": {
                    "type": "number",
                    "description": "The logical unit number (LUN) for the primary iSCSI boot target\n"
                },
                "primaryTargetIpAddress": {
                    "type": "string",
                    "description": "The IPv4 or IPv6 address for the primary iSCSI boot target\n"
                },
                "primaryTargetName": {
                    "type": "string",
                    "description": "The name of the iSCSI primary boot target\n"
                },
                "primaryTargetTcpPort": {
                    "type": "number",
                    "description": "The TCP port for the primary iSCSI boot target\n"
                },
                "primaryVlanEnable": {
                    "type": "boolean",
                    "description": "An indication of whether the primary VLAN is enabled\n"
                },
                "primaryVlanId": {
                    "type": "number",
                    "description": "The 802.1q VLAN ID to use for iSCSI boot from the primary target\n"
                },
                "routerAdvertisementEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether IPv6 router advertisement is enabled for the iSCSI boot target\n"
                },
                "secondaryDns": {
                    "type": "string",
                    "description": "The IPv6 or IPv4 address of the secondary DNS server for the iSCSI boot initiator\n"
                },
                "secondaryLun": {
                    "type": "number",
                    "description": "The logical unit number (LUN) for the secondary iSCSI boot target\n"
                },
                "secondaryTargetIpAddress": {
                    "type": "string",
                    "description": "The IPv4 or IPv6 address for the secondary iSCSI boot target\n"
                },
                "secondaryTargetName": {
                    "type": "string",
                    "description": "The name of the iSCSI secondary boot target\n"
                },
                "secondaryTargetTcpPort": {
                    "type": "number",
                    "description": "The TCP port for the secondary iSCSI boot target\n"
                },
                "secondaryVlanEnable": {
                    "type": "boolean",
                    "description": "An indication of whether the secondary VLAN is enabled\n"
                },
                "secondaryVlanId": {
                    "type": "number",
                    "description": "The 802.1q VLAN ID to use for iSCSI boot from the secondary target\n"
                },
                "targetInfoViaDhcp": {
                    "type": "boolean",
                    "description": "An indication of whether the iSCSI boot target name, LUN, IP address, and netmask should be obtained from DHCP\n"
                }
            },
            "type": "object",
            "required": [
                "authenticationMethod",
                "chapSecret",
                "chapUsername",
                "initiatorDefaultGateway",
                "initiatorIpAddress",
                "initiatorName",
                "initiatorNetmask",
                "ipAddressType",
                "ipMaskDnsViaDhcp",
                "mutualChapSecret",
                "mutualChapUsername",
                "primaryDns",
                "primaryLun",
                "primaryTargetIpAddress",
                "primaryTargetName",
                "primaryTargetTcpPort",
                "primaryVlanEnable",
                "primaryVlanId",
                "routerAdvertisementEnabled",
                "secondaryDns",
                "secondaryLun",
                "secondaryTargetIpAddress",
                "secondaryTargetName",
                "secondaryTargetTcpPort",
                "secondaryVlanEnable",
                "secondaryVlanId",
                "targetInfoViaDhcp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOem:getNetworkNetworkInterfaceNetworkDeviceFunctionOem": {
            "properties": {
                "dellFc": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc",
                    "description": "The OEM extension of Dell FC for this network device function\n"
                },
                "dellFcPortCapabilities": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities",
                    "description": "The OEM extension of Dell FC capabilities for this network device function\n"
                },
                "dellFcPortMetrics": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics",
                    "description": "The OEM extension of Dell FC port metrics for this network device function\n"
                },
                "dellNic": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic",
                    "description": "The OEM extension of Dell NIC for this network device function\n"
                },
                "dellNicCapabilities": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities",
                    "description": "The OEM extension of Dell NIC capabilities for this network device function\n"
                },
                "dellNicPortMetrics": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics",
                    "description": "The OEM extension of Dell NIC port metrics for this network device function\n"
                }
            },
            "type": "object",
            "required": [
                "dellFc",
                "dellFcPortCapabilities",
                "dellFcPortMetrics",
                "dellNic",
                "dellNicCapabilities",
                "dellNicPortMetrics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc": {
            "properties": {
                "bus": {
                    "type": "number",
                    "description": "This property represents the bus number of the PCI device\n"
                },
                "cableLengthMetres": {
                    "type": "number",
                    "description": "This property represents the cable length of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property will be deprecated in Poweredge systems with model YX5X and iDRAC firmware version 4.20.20.20 or later\n"
                },
                "chipType": {
                    "type": "string",
                    "description": "This property represents the chip type\n"
                },
                "device": {
                    "type": "number",
                    "description": "This property represents the device number of the PCI device\n"
                },
                "deviceDescription": {
                    "type": "string",
                    "description": "A string that contains the friendly Fully Qualified Device Description - a property that describes the device and its location\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "This property represents FC HBA device name\n"
                },
                "efiVersion": {
                    "type": "string",
                    "description": "This property represents the EFI version on the device\n"
                },
                "fabricLoginRetryCount": {
                    "type": "number",
                    "description": "This property represents the Fabric Login Retry Count\n"
                },
                "fabricLoginTimeout": {
                    "type": "number",
                    "description": "This property represents the Fabric Login Timeout in milliseconds\n"
                },
                "familyVersion": {
                    "type": "string",
                    "description": "This property represents the firmware version\n"
                },
                "fcOsDriverVersion": {
                    "type": "string",
                    "description": "This property represents the FCOS OS Driver version for the DellFC\n"
                },
                "fcTapeEnable": {
                    "type": "string",
                    "description": "This property represents the FC Tape state\n"
                },
                "fcoeOsDriverVersion": {
                    "type": "string",
                    "description": "This property represents the FCOE OS Driver version\n"
                },
                "framePayloadSize": {
                    "type": "string",
                    "description": "This property represents the frame payload size\n"
                },
                "function": {
                    "type": "number",
                    "description": "This property represents the function number of the PCI device\n"
                },
                "hardZoneAddress": {
                    "type": "number",
                    "description": "This property represents the Hard Zone Address\n"
                },
                "hardZoneEnable": {
                    "type": "string",
                    "description": "This property represents the Hard Zone state\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of DellFC\n"
                },
                "identifierType": {
                    "type": "string",
                    "description": "This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "iscsiOsDriverVersion": {
                    "type": "string",
                    "description": "This property represents the ISCSI OS Driver version\n"
                },
                "lanDriverVersion": {
                    "type": "string",
                    "description": "This property represents the LAN Driver version\n"
                },
                "linkDownTimeout": {
                    "type": "number",
                    "description": "This property represents the Link Down Timeout in milliseconds\n"
                },
                "loopResetDelay": {
                    "type": "number",
                    "description": "This property represents the Loop Reset Delay in seconds\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of DellFC\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellFC for the network device function\n"
                },
                "partNumber": {
                    "type": "string",
                    "description": "The part number assigned by the organization that is responsible for producing or manufacturing the FC device\n"
                },
                "portDownRetryCount": {
                    "type": "number",
                    "description": "This property represents the Port Down Retry Count\n"
                },
                "portDownTimeout": {
                    "type": "number",
                    "description": "This property represents the Port Down Timeout in milliseconds\n"
                },
                "portLoginRetryCount": {
                    "type": "number",
                    "description": "This property represents the Port Login Retry Count\n"
                },
                "portLoginTimeout": {
                    "type": "number",
                    "description": "This property represents the Port Login Timeout in milliseconds\n"
                },
                "productName": {
                    "type": "string",
                    "description": "This property represents the Product Name\n"
                },
                "rdmaOsDriverVersion": {
                    "type": "string",
                    "description": "This property represents the RDMA OS Driver version\n"
                },
                "revision": {
                    "type": "string",
                    "description": "This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver.Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "secondFcTargetLun": {
                    "type": "number",
                    "description": "This property represents the Second FC Target LUN\n"
                },
                "secondFcTargetWwpn": {
                    "type": "string",
                    "description": "This property represents the Second FC Target World-Wide Port Name\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "A manufacturer-allocated number used to identify the FC device\n"
                },
                "transceiverPartNumber": {
                    "type": "string",
                    "description": "The part number assigned by the organization that is responsible for producing or manufacturing the Small Form Factor pluggable(SFP) Transceivers. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "transceiverSerialNumber": {
                    "type": "string",
                    "description": "A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) TransceiverNote: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "transceiverVendorName": {
                    "type": "string",
                    "description": "This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "vendorName": {
                    "type": "string",
                    "description": "This property represents the Vendor Name\n"
                }
            },
            "type": "object",
            "required": [
                "bus",
                "cableLengthMetres",
                "chipType",
                "device",
                "deviceDescription",
                "deviceName",
                "efiVersion",
                "fabricLoginRetryCount",
                "fabricLoginTimeout",
                "familyVersion",
                "fcOsDriverVersion",
                "fcTapeEnable",
                "fcoeOsDriverVersion",
                "framePayloadSize",
                "function",
                "hardZoneAddress",
                "hardZoneEnable",
                "id",
                "identifierType",
                "iscsiOsDriverVersion",
                "lanDriverVersion",
                "linkDownTimeout",
                "loopResetDelay",
                "name",
                "odataId",
                "partNumber",
                "portDownRetryCount",
                "portDownTimeout",
                "portLoginRetryCount",
                "portLoginTimeout",
                "productName",
                "rdmaOsDriverVersion",
                "revision",
                "secondFcTargetLun",
                "secondFcTargetWwpn",
                "serialNumber",
                "transceiverPartNumber",
                "transceiverSerialNumber",
                "transceiverVendorName",
                "vendorName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities": {
            "properties": {
                "fcMaxNumberExchanges": {
                    "type": "number",
                    "description": "This property represents the maximum number of exchanges\n"
                },
                "fcMaxNumberOutStandingCommands": {
                    "type": "number",
                    "description": "This property represents the maximum number of outstanding commands across all connections\n"
                },
                "featureLicensingSupport": {
                    "type": "string",
                    "description": "The property provides details of the FC's feature licensing support\n"
                },
                "flexAddressingSupport": {
                    "type": "string",
                    "description": "The property provides detail of the FC's port's flex addressing support\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the DellFCCapabilities\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the DellFCCapabilities\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellFCCapabilities for the network device function\n"
                },
                "onChipThermalSensor": {
                    "type": "string",
                    "description": "The property provides details of the FC's on-chip thermal sensor support\n"
                },
                "persistencePolicySupport": {
                    "type": "string",
                    "description": "This property specifies if the card supports persistence policy\n"
                },
                "uefiSupport": {
                    "type": "string",
                    "description": "The property provides details of the FC's port's UEFI support\n"
                }
            },
            "type": "object",
            "required": [
                "fcMaxNumberExchanges",
                "fcMaxNumberOutStandingCommands",
                "featureLicensingSupport",
                "flexAddressingSupport",
                "id",
                "name",
                "odataId",
                "onChipThermalSensor",
                "persistencePolicySupport",
                "uefiSupport"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics": {
            "properties": {
                "fcInvalidCrcs": {
                    "type": "number",
                    "description": "This property represents invalid CRCs\n"
                },
                "fcLinkFailures": {
                    "type": "number",
                    "description": "This property represents link failures\n"
                },
                "fcLossOfSignals": {
                    "type": "number",
                    "description": "This property represents loss of signals\n"
                },
                "fcRxKbCount": {
                    "type": "number",
                    "description": "This property represents the KB count received\n"
                },
                "fcRxSequences": {
                    "type": "number",
                    "description": "This property represents the FC sequences received\n"
                },
                "fcRxTotalFrames": {
                    "type": "number",
                    "description": "This property represents the total FC frames received\n"
                },
                "fcTxKbCount": {
                    "type": "number",
                    "description": "This property represents the KB count transmitted\n"
                },
                "fcTxSequences": {
                    "type": "number",
                    "description": "This property represents the FC sequences transmitted\n"
                },
                "fcTxTotalFrames": {
                    "type": "number",
                    "description": "This property represents the total FC frames transmitted\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the DellFCPortMetrics\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the DellFCPortMetrics\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellFCPortMetrics for the network device function\n"
                },
                "osDriverState": {
                    "type": "string",
                    "description": "This property indicates the OS driver states for the DellFCPortMetrics\n"
                },
                "portStatus": {
                    "type": "string",
                    "description": "This property represents port status for the DellFCPortMetrics\n"
                },
                "rxInputPowerMw": {
                    "type": "number",
                    "description": "Indicates the RX input power value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "rxInputPowerStatus": {
                    "type": "string",
                    "description": "Indicates the status of Rx Input Power value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "temperatureCelsius": {
                    "type": "number",
                    "description": "Indicates the temperature value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "temperatureStatus": {
                    "type": "string",
                    "description": "Indicates the status of Temperature value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txBiasCurrentMw": {
                    "type": "number",
                    "description": "Indicates the TX Bias current value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txBiasCurrentStatus": {
                    "type": "string",
                    "description": "Indicates the status of Tx Bias Current value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txOutputPowerMw": {
                    "type": "number",
                    "description": "Indicates the TX output power value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txOutputPowerStatus": {
                    "type": "string",
                    "description": "Indicates the status of Tx Output Power value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "voltageStatus": {
                    "type": "string",
                    "description": "Indicates the status of voltage value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "voltageValueVolts": {
                    "type": "number",
                    "description": "Indicates the voltage value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                }
            },
            "type": "object",
            "required": [
                "fcInvalidCrcs",
                "fcLinkFailures",
                "fcLossOfSignals",
                "fcRxKbCount",
                "fcRxSequences",
                "fcRxTotalFrames",
                "fcTxKbCount",
                "fcTxSequences",
                "fcTxTotalFrames",
                "id",
                "name",
                "odataId",
                "osDriverState",
                "portStatus",
                "rxInputPowerMw",
                "rxInputPowerStatus",
                "temperatureCelsius",
                "temperatureStatus",
                "txBiasCurrentMw",
                "txBiasCurrentStatus",
                "txOutputPowerMw",
                "txOutputPowerStatus",
                "voltageStatus",
                "voltageValueVolts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic": {
            "properties": {
                "busNumber": {
                    "type": "number",
                    "description": "The bus number where this PCI device resides\n"
                },
                "cableLengthMetres": {
                    "type": "number",
                    "description": "This property represents the cable length of Small Form Factor pluggable(SFP) Transceiver for the DellNIC. Note: This property will be deprecated in Poweredge systems with model YX5X and iDRAC firmware version 4.20.20.20 or later\n"
                },
                "controllerBiosVersion": {
                    "type": "string",
                    "description": "This property represents the firmware version of Controller BIOS\n"
                },
                "dataBusWidth": {
                    "type": "string",
                    "description": "This property represents the data-bus width of the NIC PCI device\n"
                },
                "deviceDescription": {
                    "type": "string",
                    "description": "A string that contains the friendly Fully Qualified Device Description (FQDD), which is a property that describes the device and its location\n"
                },
                "efiVersion": {
                    "type": "string",
                    "description": "This property represents the firmware version of EFI\n"
                },
                "familyVersion": {
                    "type": "string",
                    "description": "Represents family version of firmware\n"
                },
                "fcOsDriverVersion": {
                    "type": "string",
                    "description": "This property represents the FCOS OS Driver version for the DellNIC\n"
                },
                "fcoeOffloadMode": {
                    "type": "string",
                    "description": "This property indicates if Fibre Channel over Ethernet (FCoE) personality is enabled or disabled on current partition in a Converged Network Adaptor device\n"
                },
                "fqdd": {
                    "type": "string",
                    "description": "A string that contains the Fully Qualified Device Description (FQDD) for the DellNIC\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of DellNIC\n"
                },
                "identifierType": {
                    "type": "string",
                    "description": "This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellNIC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "A unique identifier for the instance\n"
                },
                "iscsiOffloadMode": {
                    "type": "string",
                    "description": "This property indicates if Internet Small Computer System Interface (iSCSI) personality is enabled or disabled on current partition in a Converged Network Adaptor device\n"
                },
                "lastSystemInventoryTime": {
                    "type": "string",
                    "description": "This property represents the time when System Inventory Collection On Reboot (CSIOR) was last performed or the object was last updated on iDRAC. The value is represented in the format yyyymmddHHMMSS\n"
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "This property represents the time when the data was last updated. The value is represented in the format yyyymmddHHMMSS\n"
                },
                "linkDuplex": {
                    "type": "string",
                    "description": "This property indicates whether the Link is full-duplex or half-duplex\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The property shall represent the drive media type\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of DellNIC\n"
                },
                "nicMode": {
                    "type": "string",
                    "description": "Represents if network interface card personality is enabled or disabled on current partition in a Converged Network Adaptor device\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellNIC for the network device function\n"
                },
                "partNumber": {
                    "type": "string",
                    "description": "The part number assigned by the organization that is responsible for producing or manufacturing the NIC device\n"
                },
                "pciDeviceId": {
                    "type": "string",
                    "description": "This property contains a value assigned by the device manufacturer used to identify the type of device\n"
                },
                "pciSubDeviceId": {
                    "type": "string",
                    "description": "Represents PCI sub device ID\n"
                },
                "pciSubVendorId": {
                    "type": "string",
                    "description": "This property represents the subsystem vendor ID. ID information is reported from a PCIDevice through protocol-specific requests\n"
                },
                "pciVendorId": {
                    "type": "string",
                    "description": "This property represents the register that contains a value assigned by the PCI SIG used to identify the manufacturer of the device\n"
                },
                "permanentFcoeEmacAddress": {
                    "type": "string",
                    "description": "PermanentFCOEMACAddress defines the network address that is hardcoded into a port for FCoE\n"
                },
                "permanentIscsiEmacAddress": {
                    "type": "string",
                    "description": "PermanentAddress defines the network address that is hardcoded into a port for iSCSI. This 'hardcoded' address can be changed using a firmware upgrade or a software configuration. When this change is made, the field should be updated at the same time. PermanentAddress should be left blank if no 'hardcoded' address exists for the NetworkAdapter.\n"
                },
                "productName": {
                    "type": "string",
                    "description": "A string containing the product name\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Supported Protocol Types\n"
                },
                "revision": {
                    "type": "string",
                    "description": "This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "A manufacturer-allocated number used to identify the NIC device\n"
                },
                "slotLength": {
                    "type": "string",
                    "description": "This property represents the represents the slot length of the NIC PCI device\n"
                },
                "slotType": {
                    "type": "string",
                    "description": "This property indicates the slot type of the NIC PCI device\n"
                },
                "snapiState": {
                    "type": "string",
                    "description": "This property represents the SNAPI state\n"
                },
                "snapiSupport": {
                    "type": "string",
                    "description": "This property represents the SNAPI support\n"
                },
                "transceiverPartNumber": {
                    "type": "string",
                    "description": "The part number assigned by the organization that is responsible for producing or SFP Transceivers(manufacturing the Small Form Factor pluggable). Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "transceiverSerialNumber": {
                    "type": "string",
                    "description": "A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) TransceiverNote: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "transceiverVendorName": {
                    "type": "string",
                    "description": "This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the DellNIC.Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "vendorName": {
                    "type": "string",
                    "description": "This property represents the vendor name\n"
                },
                "vpiSupport": {
                    "type": "string",
                    "description": "This property represents the VPI support\n"
                }
            },
            "type": "object",
            "required": [
                "busNumber",
                "cableLengthMetres",
                "controllerBiosVersion",
                "dataBusWidth",
                "deviceDescription",
                "efiVersion",
                "familyVersion",
                "fcOsDriverVersion",
                "fcoeOffloadMode",
                "fqdd",
                "id",
                "identifierType",
                "instanceId",
                "iscsiOffloadMode",
                "lastSystemInventoryTime",
                "lastUpdateTime",
                "linkDuplex",
                "mediaType",
                "name",
                "nicMode",
                "odataId",
                "partNumber",
                "pciDeviceId",
                "pciSubDeviceId",
                "pciSubVendorId",
                "pciVendorId",
                "permanentFcoeEmacAddress",
                "permanentIscsiEmacAddress",
                "productName",
                "protocol",
                "revision",
                "serialNumber",
                "slotLength",
                "slotType",
                "snapiState",
                "snapiSupport",
                "transceiverPartNumber",
                "transceiverSerialNumber",
                "transceiverVendorName",
                "vendorName",
                "vpiSupport"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities": {
            "properties": {
                "bpeSupport": {
                    "type": "string",
                    "description": "This property represents Bridge Port Extension (BPE) for the ports of the NIC\n"
                },
                "congestionNotification": {
                    "type": "string",
                    "description": "This property represents congestion notification support for a NIC port\n"
                },
                "dcbExchangeProtocol": {
                    "type": "string",
                    "description": "This property represents DCB Exchange protocol support for a NIC port\n"
                },
                "ets": {
                    "type": "string",
                    "description": "This property represents Enhanced Transmission Selection support for a NIC port\n"
                },
                "evbModesSupport": {
                    "type": "string",
                    "description": "This property represents EVB Edge Virtual Bridging) mode support for the ports of the NIC. Possible values are 0 Unknown, 2 Supported, 3 Not Supported\n"
                },
                "fcoeBootSupport": {
                    "type": "string",
                    "description": "The property shall represent FCoE boot support for a NIC port\n"
                },
                "fcoeMaxIosPerSession": {
                    "type": "number",
                    "description": "This property represents the maximum number of I/Os per connection supported by the NIC\n"
                },
                "fcoeMaxNpivPerPort": {
                    "type": "number",
                    "description": "This property represents the maximum number of NPIV per port supported by the DellNICCapabilities\n"
                },
                "fcoeMaxNumberExchanges": {
                    "type": "number",
                    "description": "This property represents the maximum number of exchanges for the NIC\n"
                },
                "fcoeMaxNumberLogins": {
                    "type": "number",
                    "description": "This property represents the maximum logins per port for the NIC\n"
                },
                "fcoeMaxNumberOfFcTargets": {
                    "type": "number",
                    "description": "This property represents the maximum number of FCoE targets supported by the NIC\n"
                },
                "fcoeMaxNumberOutstandingCommands": {
                    "type": "number",
                    "description": "This property represents the maximum number of outstanding commands supported across all connections for the NIC\n"
                },
                "fcoeOffloadSupport": {
                    "type": "string",
                    "description": "The property shall represent FCoE offload support for the NIC\n"
                },
                "featureLicensingSupport": {
                    "type": "string",
                    "description": "This property represents feature licensing support for the NIC\n"
                },
                "flexAddressingSupport": {
                    "type": "string",
                    "description": "The property shall represent flex adddressing support for a NIC port\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of DellNICCapabilities\n"
                },
                "ipsecOffloadSupport": {
                    "type": "string",
                    "description": "This property represents IPSec offload support for a NIC port\n"
                },
                "iscsiBootSupport": {
                    "type": "string",
                    "description": "The property shall represent iSCSI boot support for a NIC port\n"
                },
                "iscsiOffloadSupport": {
                    "type": "string",
                    "description": "The property shall represent iSCSI offload support for a NIC port\n"
                },
                "macSecSupport": {
                    "type": "string",
                    "description": "This property represents secure MAC support for a NIC port\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of DellNICCapabilities\n"
                },
                "nicPartitioningSupport": {
                    "type": "string",
                    "description": "This property represents partitioning support for the NIC\n"
                },
                "nwManagementPassThrough": {
                    "type": "string",
                    "description": "This property represents network management passthrough support for a NIC port\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellNICCapabilities for the network device function\n"
                },
                "onChipThermalSensor": {
                    "type": "string",
                    "description": "This property represents on-chip thermal sensor support for the NIC\n"
                },
                "openFlowSupport": {
                    "type": "string",
                    "description": "This property represents open-flow support for a NIC port\n"
                },
                "osBmcManagementPassThrough": {
                    "type": "string",
                    "description": "This property represents OS-inband to BMC-out-of-band management passthrough support for a NIC port\n"
                },
                "partitionWolSupport": {
                    "type": "string",
                    "description": "This property represents Wake-On-LAN support for a NIC partition\n"
                },
                "persistencePolicySupport": {
                    "type": "string",
                    "description": "This property specifies whether the card supports persistence policy\n"
                },
                "priorityFlowControl": {
                    "type": "string",
                    "description": "This property represents priority flow-control support for a NIC port\n"
                },
                "pxeBootSupport": {
                    "type": "string",
                    "description": "The property shall represent PXE boot support for a NIC port\n"
                },
                "rdmaSupport": {
                    "type": "string",
                    "description": "This property represents RDMA support for a NIC port\n"
                },
                "remotePhy": {
                    "type": "string",
                    "description": "This property represents remote PHY support for a NIC port\n"
                },
                "tcpChimneySupport": {
                    "type": "string",
                    "description": "This property represents TCP Chimney support for a NIC port\n"
                },
                "tcpOffloadEngineSupport": {
                    "type": "string",
                    "description": "This property represents the support of TCP Offload Engine for a NIC port\n"
                },
                "uefiSupport": {
                    "type": "string",
                    "description": "This property represents UEFI support for a NIC port\n"
                },
                "veb": {
                    "type": "string",
                    "description": "This property provides details about the VEB (Virtual Ethernet Bridging) - single channel support for the ports of the NIC\n"
                },
                "vebVepaMultiChannel": {
                    "type": "string",
                    "description": "This property provides details about the Virtual Ethernet Bridging and Virtual Ethernet Port Aggregator (VEB-VEPA) multichannel support for the ports of the NIC\n"
                },
                "vebVepaSingleChannel": {
                    "type": "string",
                    "description": "This property provides details about the VEB-VEPA (Virtual Ethernet Bridging and Virtual Ethernet Port Aggregator) - single channel support for the ports of the NIC\n"
                },
                "virtualLinkControl": {
                    "type": "string",
                    "description": "This property represents virtual link-control support for a NIC partition\n"
                }
            },
            "type": "object",
            "required": [
                "bpeSupport",
                "congestionNotification",
                "dcbExchangeProtocol",
                "ets",
                "evbModesSupport",
                "fcoeBootSupport",
                "fcoeMaxIosPerSession",
                "fcoeMaxNpivPerPort",
                "fcoeMaxNumberExchanges",
                "fcoeMaxNumberLogins",
                "fcoeMaxNumberOfFcTargets",
                "fcoeMaxNumberOutstandingCommands",
                "fcoeOffloadSupport",
                "featureLicensingSupport",
                "flexAddressingSupport",
                "id",
                "ipsecOffloadSupport",
                "iscsiBootSupport",
                "iscsiOffloadSupport",
                "macSecSupport",
                "name",
                "nicPartitioningSupport",
                "nwManagementPassThrough",
                "odataId",
                "onChipThermalSensor",
                "openFlowSupport",
                "osBmcManagementPassThrough",
                "partitionWolSupport",
                "persistencePolicySupport",
                "priorityFlowControl",
                "pxeBootSupport",
                "rdmaSupport",
                "remotePhy",
                "tcpChimneySupport",
                "tcpOffloadEngineSupport",
                "uefiSupport",
                "veb",
                "vebVepaMultiChannel",
                "vebVepaSingleChannel",
                "virtualLinkControl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics:getNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics": {
            "properties": {
                "discardedPkts": {
                    "type": "number",
                    "description": "Indicates the total number of discarded packets\n"
                },
                "fcCrcErrorCount": {
                    "type": "number",
                    "description": "Indicates the number of FC frames with CRC errors\n"
                },
                "fcoeLinkFailures": {
                    "type": "number",
                    "description": "Indicates the number of FCoE/FIP login failures\n"
                },
                "fcoePktRxCount": {
                    "type": "number",
                    "description": "Indicates the number of good (FCS valid) packets received with the active FCoE MAC address of the partition\n"
                },
                "fcoePktTxCount": {
                    "type": "number",
                    "description": "Indicates the number of good (FCS valid) packets transmitted that passed L2 filtering by a specific MAC address\n"
                },
                "fcoeRxPktDroppedCount": {
                    "type": "number",
                    "description": "Indicates the number of receive packets with FCS errors\n"
                },
                "fqdd": {
                    "type": "string",
                    "description": "A string that contains the Fully Qualified Device Description (FQDD) for the DellNICPortMetrics\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of DellNICPortMetrics\n"
                },
                "lanFcsRxErrors": {
                    "type": "number",
                    "description": "Indicates the Lan FCS receive Errors\n"
                },
                "lanUnicastPktRxCount": {
                    "type": "number",
                    "description": "Indicates the total number of Lan Unicast Packets Received\n"
                },
                "lanUnicastPktTxCount": {
                    "type": "number",
                    "description": "Indicates the total number of Lan Unicast Packets Transmitted\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of DellNICPortMetrics\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID of DellNICPortMetrics for the network device function\n"
                },
                "osDriverState": {
                    "type": "string",
                    "description": "Indicates operating system driver states\n"
                },
                "partitionLinkStatus": {
                    "type": "string",
                    "description": "Indicates whether the partition link is up or down for the DellFCPortMetrics\n"
                },
                "partitionOsDriverState": {
                    "type": "string",
                    "description": "Indicates operating system driver states of the partitions for the DellFCPortMetrics\n"
                },
                "rdmaRxTotalBytes": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA bytes received\n"
                },
                "rdmaRxTotalPackets": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA packets received\n"
                },
                "rdmaTotalProtectionErrors": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA Protection errors\n"
                },
                "rdmaTotalProtocolErrors": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA Protocol errors\n"
                },
                "rdmaTxTotalBytes": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA bytes transmitted\n"
                },
                "rdmaTxTotalPackets": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA packets transmitted\n"
                },
                "rdmaTxTotalReadReqPkts": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA ReadRequest packets transmitted\n"
                },
                "rdmaTxTotalSendPkts": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA Send packets transmitted\n"
                },
                "rdmaTxTotalWritePkts": {
                    "type": "number",
                    "description": "Indicates the total number of RDMA Write packets transmitted\n"
                },
                "rxBroadcast": {
                    "type": "number",
                    "description": "Indicates the total number of good broadcast packets received\n"
                },
                "rxBytes": {
                    "type": "number",
                    "description": "Indicates the total number of bytes received, including host and remote management pass through traffic. Remote management passthrough received traffic is applicable to LOMs only\n"
                },
                "rxErrorPktAlignmentErrors": {
                    "type": "number",
                    "description": "Indicates the total number of packets received with alignment errors\n"
                },
                "rxErrorPktFcsErrors": {
                    "type": "number",
                    "description": "Indicates the total number of packets received with FCS errors\n"
                },
                "rxFalseCarrierDetection": {
                    "type": "number",
                    "description": "Indicates the total number of false carrier errors received from PHY\n"
                },
                "rxInputPowerMw": {
                    "type": "number",
                    "description": "Indicates the RX input power value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "rxInputPowerStatus": {
                    "type": "string",
                    "description": "Indicates the status of Rx Input Power value limits for the DellFCPortMetrics\n"
                },
                "rxJabberPkt": {
                    "type": "number",
                    "description": "Indicates the total number of frames that are too long\n"
                },
                "rxMutlicastPackets": {
                    "type": "number",
                    "description": "Indicates the total number of good multicast packets received\n"
                },
                "rxPauseXoffFrames": {
                    "type": "number",
                    "description": "Indicates the flow control frames from the network to pause transmission\n"
                },
                "rxPauseXonFrames": {
                    "type": "number",
                    "description": "Indicates the flow control frames from the network to resume transmission\n"
                },
                "rxRuntPkt": {
                    "type": "number",
                    "description": "Indicates the total number of frames that are too short (\u003c 64 bytes)\n"
                },
                "rxUnicastPackets": {
                    "type": "number",
                    "description": "Indicates the total number of good unicast packets received\n"
                },
                "startStatisticTime": {
                    "type": "string",
                    "description": "Indicates the measurement time for the first NIC statistics. The property is used with the StatisticTime property to calculate the duration over which the NIC statistics are gathered\n"
                },
                "statisticTime": {
                    "type": "string",
                    "description": "Indicates the most recent measurement time for NIC statistics. The property is used with the StatisticStartTime property to calculate the duration over which the NIC statistics are gathered\n"
                },
                "temperatureCelsius": {
                    "type": "number",
                    "description": "Indicates the temperature value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "temperatureStatus": {
                    "type": "string",
                    "description": "Indicates the status of Temperature value limits for the DellNICPortMetrics.\n"
                },
                "txBiasCurrentMa": {
                    "type": "number",
                    "description": "Indicates the TX Bias current value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txBiasCurrentStatus": {
                    "type": "string",
                    "description": "Indicates the status of Tx Bias Current value limits for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txBroadcast": {
                    "type": "number",
                    "description": "Indicates the total number of good broadcast packets transmitted\n"
                },
                "txBytes": {
                    "type": "number",
                    "description": "Indicates the total number of bytes transmitted, including host and remote management passthrough traffic. Remote management passthrough transmitted traffic is applicable to LOMs only\n"
                },
                "txErrorPktExcessiveCollision": {
                    "type": "number",
                    "description": "Indicates the number of times a single transmitted packet encountered more than 15 collisions\n"
                },
                "txErrorPktLateCollision": {
                    "type": "number",
                    "description": "Indicates the number of collisions that occurred after one slot time (defined by IEEE 802.3)\n"
                },
                "txErrorPktMultipleCollision": {
                    "type": "number",
                    "description": "Indicates the number of times that a transmitted packet encountered 2-15 collisions\n"
                },
                "txErrorPktSingleCollision": {
                    "type": "number",
                    "description": "Indicates the number of times that a successfully transmitted packet encountered a single collision\n"
                },
                "txMutlicastPackets": {
                    "type": "number",
                    "description": "Indicates the total number of good multicast packets transmitted\n"
                },
                "txOutputPowerMw": {
                    "type": "number",
                    "description": "Indicates the TX output power value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txOutputPowerStatus": {
                    "type": "string",
                    "description": "Indicates the status of Tx Output Power value limits for the DellNICPortMetrics.. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "txPauseXoffFrames": {
                    "type": "number",
                    "description": "Indicates the number of XOFF packets transmitted to the network\n"
                },
                "txPauseXonFrames": {
                    "type": "number",
                    "description": "Indicates the number of XON packets transmitted to the network\n"
                },
                "txUnicastPackets": {
                    "type": "number",
                    "description": "Indicates the total number of good unicast packets transmitted for the DellFCPortMetrics\n"
                },
                "voltageStatus": {
                    "type": "string",
                    "description": "Indicates the status of voltage value limits for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                },
                "voltageValueVolts": {
                    "type": "number",
                    "description": "Indicates the voltage value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions\n"
                }
            },
            "type": "object",
            "required": [
                "discardedPkts",
                "fcCrcErrorCount",
                "fcoeLinkFailures",
                "fcoePktRxCount",
                "fcoePktTxCount",
                "fcoeRxPktDroppedCount",
                "fqdd",
                "id",
                "lanFcsRxErrors",
                "lanUnicastPktRxCount",
                "lanUnicastPktTxCount",
                "name",
                "odataId",
                "osDriverState",
                "partitionLinkStatus",
                "partitionOsDriverState",
                "rdmaRxTotalBytes",
                "rdmaRxTotalPackets",
                "rdmaTotalProtectionErrors",
                "rdmaTotalProtocolErrors",
                "rdmaTxTotalBytes",
                "rdmaTxTotalPackets",
                "rdmaTxTotalReadReqPkts",
                "rdmaTxTotalSendPkts",
                "rdmaTxTotalWritePkts",
                "rxBroadcast",
                "rxBytes",
                "rxErrorPktAlignmentErrors",
                "rxErrorPktFcsErrors",
                "rxFalseCarrierDetection",
                "rxInputPowerMw",
                "rxInputPowerStatus",
                "rxJabberPkt",
                "rxMutlicastPackets",
                "rxPauseXoffFrames",
                "rxPauseXonFrames",
                "rxRuntPkt",
                "rxUnicastPackets",
                "startStatisticTime",
                "statisticTime",
                "temperatureCelsius",
                "temperatureStatus",
                "txBiasCurrentMa",
                "txBiasCurrentStatus",
                "txBroadcast",
                "txBytes",
                "txErrorPktExcessiveCollision",
                "txErrorPktLateCollision",
                "txErrorPktMultipleCollision",
                "txErrorPktSingleCollision",
                "txMutlicastPackets",
                "txOutputPowerMw",
                "txOutputPowerStatus",
                "txPauseXoffFrames",
                "txPauseXonFrames",
                "txUnicastPackets",
                "voltageStatus",
                "voltageValueVolts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkDeviceFunctionStatus:getNetworkNetworkInterfaceNetworkDeviceFunctionStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPort:getNetworkNetworkInterfaceNetworkPort": {
            "properties": {
                "activeLinkTechnology": {
                    "type": "string",
                    "description": "Network port active link technology\n"
                },
                "associatedNetworkAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of configured MAC or WWN network addresses that are associated with this network port, including the programmed address of the lowest numbered network device function, the configured but not active address, if applicable, the address for hardware port teaming, or other network addresses\n"
                },
                "currentLinkSpeedMbps": {
                    "type": "number",
                    "description": "Network port current link speed\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the network port\n"
                },
                "eeeEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether IEEE 802.3az Energy-Efficient Ethernet (EEE) is enabled for this network port\n"
                },
                "flowControlConfiguration": {
                    "type": "string",
                    "description": "The locally configured 802.3x flow control setting for this network port\n"
                },
                "flowControlStatus": {
                    "type": "string",
                    "description": "The 802.3x flow control behavior negotiated with the link partner for this network port (Ethernet-only)\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the network port\n"
                },
                "linkStatus": {
                    "type": "string",
                    "description": "The status of the link between this port and its link partner\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the network port\n"
                },
                "netDevFuncMaxBwAllocs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc:getNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc"
                    },
                    "description": "A maximum bandwidth allocation percentage for a network device functions associated a port\n"
                },
                "netDevFuncMinBwAllocs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc:getNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc"
                    },
                    "description": "A minimum bandwidth allocation percentage for a network device functions associated a port\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the network port\n"
                },
                "oem": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortOem:getNetworkNetworkInterfaceNetworkPortOem",
                    "description": "The OEM extension for this network port\n"
                },
                "physicalPortNumber": {
                    "type": "string",
                    "description": "The physical port number label for this port\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortStatus:getNetworkNetworkInterfaceNetworkPortStatus",
                    "description": "status of the network port\n"
                },
                "supportedEthernetCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of Ethernet capabilities that this port supports.\n"
                },
                "supportedLinkCapabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortSupportedLinkCapability:getNetworkNetworkInterfaceNetworkPortSupportedLinkCapability"
                    },
                    "description": "The link capabilities of an associated port\n"
                },
                "vendorId": {
                    "type": "string",
                    "description": "The vendor Identification for this port\n"
                },
                "wakeOnLanEnabled": {
                    "type": "boolean",
                    "description": "An indication of whether Wake on LAN (WoL) is enabled for this network port\n"
                }
            },
            "type": "object",
            "required": [
                "activeLinkTechnology",
                "associatedNetworkAddresses",
                "currentLinkSpeedMbps",
                "description",
                "eeeEnabled",
                "flowControlConfiguration",
                "flowControlStatus",
                "id",
                "linkStatus",
                "name",
                "netDevFuncMaxBwAllocs",
                "netDevFuncMinBwAllocs",
                "odataId",
                "oem",
                "physicalPortNumber",
                "status",
                "supportedEthernetCapabilities",
                "supportedLinkCapabilities",
                "vendorId",
                "wakeOnLanEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc:getNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc": {
            "properties": {
                "maxBwAllocPercent": {
                    "type": "number",
                    "description": "The maximum bandwidth allocation percentage allocated to the corresponding network device function instance\n"
                },
                "networkDeviceFunction": {
                    "type": "string",
                    "description": "List of network device functions for NetDevFuncMaxBWAlloc associated with this port\n"
                }
            },
            "type": "object",
            "required": [
                "maxBwAllocPercent",
                "networkDeviceFunction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc:getNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc": {
            "properties": {
                "minBwAllocPercent": {
                    "type": "number",
                    "description": "The minimum bandwidth allocation percentage allocated to the corresponding network device function instance\n"
                },
                "networkDeviceFunction": {
                    "type": "string",
                    "description": "List of network device functions for NetDevFuncMinBWAlloc associated with this port\n"
                }
            },
            "type": "object",
            "required": [
                "minBwAllocPercent",
                "networkDeviceFunction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortOem:getNetworkNetworkInterfaceNetworkPortOem": {
            "properties": {
                "dellNetworkTransceiver": {
                    "$ref": "#/types/redfish:index/getNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver:getNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver",
                    "description": "Dell Network Transceiver\n"
                }
            },
            "type": "object",
            "required": [
                "dellNetworkTransceiver"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver:getNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver": {
            "properties": {
                "deviceDescription": {
                    "type": "string",
                    "description": "A string that contains the friendly Fully Qualified Device Description (FQDD), which is a property that describes the device and its location\n"
                },
                "fqdd": {
                    "type": "string",
                    "description": "A string that contains the Fully Qualified Device Description (FQDD) for the DellNetworkTransceiver\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this resource within the collection of similar resources\n"
                },
                "identifierType": {
                    "type": "string",
                    "description": "This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellNetworkTransceiver\n"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "This property represents the interface type of Small Form Factor pluggable(SFP) Transceiver\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource or array member\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "The unique identifier for a resource\n"
                },
                "partNumber": {
                    "type": "string",
                    "description": "The part number assigned by the organization that is responsible for producing or SFP(manufacturing the Small Form Factor pluggable) Transceivers\n"
                },
                "revision": {
                    "type": "string",
                    "description": "This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) Transceiver\n"
                },
                "vendorName": {
                    "type": "string",
                    "description": "This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the object.\n"
                }
            },
            "type": "object",
            "required": [
                "deviceDescription",
                "fqdd",
                "id",
                "identifierType",
                "interfaceType",
                "name",
                "odataId",
                "partNumber",
                "revision",
                "serialNumber",
                "vendorName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortStatus:getNetworkNetworkInterfaceNetworkPortStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceNetworkPortSupportedLinkCapability:getNetworkNetworkInterfaceNetworkPortSupportedLinkCapability": {
            "properties": {
                "autoSpeedNegotiation": {
                    "type": "boolean",
                    "description": "An indication of whether the port is capable of autonegotiating speed\n"
                },
                "linkNetworkTechnology": {
                    "type": "string",
                    "description": "The link network technology capabilities of this port\n"
                },
                "linkSpeedMbps": {
                    "type": "number",
                    "description": "The speed of the link in Mbit/s when this link network technology is active\n"
                }
            },
            "type": "object",
            "required": [
                "autoSpeedNegotiation",
                "linkNetworkTechnology",
                "linkSpeedMbps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNetworkInterfaceStatus:getNetworkNetworkInterfaceStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getNetworkNicFilter:getNetworkNicFilter": {
            "properties": {
                "systems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNicFilterSystem:getNetworkNicFilterSystem"
                    },
                    "description": "Filter for systems, nework adapters, network ports and network device functions\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getNetworkNicFilterSystem:getNetworkNicFilterSystem": {
            "properties": {
                "networkAdapters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getNetworkNicFilterSystemNetworkAdapter:getNetworkNicFilterSystemNetworkAdapter"
                    },
                    "description": "Filter for nework adapters, network ports and network device functions\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "Filter for systems\n"
                }
            },
            "type": "object",
            "required": [
                "systemId"
            ]
        },
        "redfish:index/getNetworkNicFilterSystemNetworkAdapter:getNetworkNicFilterSystemNetworkAdapter": {
            "properties": {
                "networkAdapterId": {
                    "type": "string",
                    "description": "Filter for network adapters\n"
                },
                "networkDeviceFunctionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter for network device functions\n"
                },
                "networkPortIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter for network ports\n"
                }
            },
            "type": "object",
            "required": [
                "networkAdapterId"
            ]
        },
        "redfish:index/getNetworkRedfishServer:getNetworkRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getStorageControllerRedfishServer:getStorageControllerRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getStorageControllerStorageController:getStorageControllerStorageController": {
            "properties": {
                "assembly": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerAssembly:getStorageControllerStorageControllerAssembly",
                    "description": "A reference to a resource.\n"
                },
                "cacheSummary": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerCacheSummary:getStorageControllerStorageControllerCacheSummary",
                    "description": "This type describes the cache memory of the storage controller in general detail.\n"
                },
                "controllerRates": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerControllerRates:getStorageControllerStorageControllerControllerRates",
                    "description": "This type describes the various controller rates used for processes such as volume rebuild or consistency checks.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this resource. Used for commonality in the schema definitions.\n"
                },
                "firmwareVersion": {
                    "type": "string",
                    "description": "The firmware version of this storage controller.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for this resource within the collection of similar resources.\n"
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerIdentifier:getStorageControllerStorageControllerIdentifier"
                    },
                    "description": "Any additional identifiers for a resource.\n"
                },
                "links": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerLinks:getStorageControllerStorageControllerLinks",
                    "description": "The links to other resources that are related to this resource.\n"
                },
                "manufacturer": {
                    "type": "string",
                    "description": "The manufacturer of this storage controller.\n"
                },
                "model": {
                    "type": "string",
                    "description": "The model number for the storage controller.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource or array member.\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "The unique identifier for a resource.\n"
                },
                "oem": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerOem:getStorageControllerStorageControllerOem",
                    "description": "The OEM extension to the StorageController resource.\n"
                },
                "speedGbps": {
                    "type": "number",
                    "description": "The maximum speed of the storage controller's device interface.\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerStatus:getStorageControllerStorageControllerStatus",
                    "description": "The status and health of a resource and its children.\n"
                },
                "supportedControllerProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The supported set of protocols for communicating to this storage controller.\n"
                },
                "supportedDeviceProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The protocols that the storage controller can use to communicate with attached devices.\n"
                },
                "supportedRaidTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of RAID types supported by the storage controller.\n"
                }
            },
            "type": "object",
            "required": [
                "assembly",
                "cacheSummary",
                "controllerRates",
                "description",
                "firmwareVersion",
                "id",
                "identifiers",
                "links",
                "manufacturer",
                "model",
                "name",
                "odataId",
                "oem",
                "speedGbps",
                "status",
                "supportedControllerProtocols",
                "supportedDeviceProtocols",
                "supportedRaidTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerAssembly:getStorageControllerStorageControllerAssembly": {
            "properties": {
                "odataId": {
                    "type": "string",
                    "description": "The link to the assembly associated with this storage controller.\n"
                }
            },
            "type": "object",
            "required": [
                "odataId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerCacheSummary:getStorageControllerStorageControllerCacheSummary": {
            "properties": {
                "totalCacheSizeMiB": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "totalCacheSizeMiB"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerControllerRates:getStorageControllerStorageControllerControllerRates": {
            "properties": {
                "consistencyCheckRatePercent": {
                    "type": "number",
                    "description": "This property describes the controller rate for consistency check\n"
                },
                "rebuildRatePercent": {
                    "type": "number",
                    "description": "This property describes the controller rate for volume rebuild\n"
                }
            },
            "type": "object",
            "required": [
                "consistencyCheckRatePercent",
                "rebuildRatePercent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerFilter:getStorageControllerStorageControllerFilter": {
            "properties": {
                "systems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerFilterSystem:getStorageControllerStorageControllerFilterSystem"
                    },
                    "description": "Filter for systems, storages and storage controllers\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getStorageControllerStorageControllerFilterSystem:getStorageControllerStorageControllerFilterSystem": {
            "properties": {
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerFilterSystemStorage:getStorageControllerStorageControllerFilterSystemStorage"
                    },
                    "description": "Filter for storages and storage controllers\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "Filter for systems\n"
                }
            },
            "type": "object",
            "required": [
                "systemId"
            ]
        },
        "redfish:index/getStorageControllerStorageControllerFilterSystemStorage:getStorageControllerStorageControllerFilterSystemStorage": {
            "properties": {
                "controllerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter for storage controllers\n"
                },
                "storageId": {
                    "type": "string",
                    "description": "Filter for storages\n"
                }
            },
            "type": "object",
            "required": [
                "storageId"
            ]
        },
        "redfish:index/getStorageControllerStorageControllerIdentifier:getStorageControllerStorageControllerIdentifier": {
            "properties": {
                "durableName": {
                    "type": "string",
                    "description": "This property describes the durable name for the storage controller.\n"
                },
                "durableNameFormat": {
                    "type": "string",
                    "description": "This property describes the durable name format for the storage controller.\n"
                }
            },
            "type": "object",
            "required": [
                "durableName",
                "durableNameFormat"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerLinks:getStorageControllerStorageControllerLinks": {
            "properties": {
                "pcieFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerLinksPcieFunction:getStorageControllerStorageControllerLinksPcieFunction"
                    },
                    "description": "PCIeFunctions\n"
                }
            },
            "type": "object",
            "required": [
                "pcieFunctions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerLinksPcieFunction:getStorageControllerStorageControllerLinksPcieFunction": {
            "properties": {
                "odataId": {
                    "type": "string",
                    "description": "The link to the PCIeFunctions\n"
                }
            },
            "type": "object",
            "required": [
                "odataId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerOem:getStorageControllerStorageControllerOem": {
            "properties": {
                "dell": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerOemDell:getStorageControllerStorageControllerOemDell",
                    "description": "Dell\n"
                }
            },
            "type": "object",
            "required": [
                "dell"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerOemDell:getStorageControllerStorageControllerOemDell": {
            "properties": {
                "dellStorageController": {
                    "$ref": "#/types/redfish:index/getStorageControllerStorageControllerOemDellDellStorageController:getStorageControllerStorageControllerOemDellDellStorageController",
                    "description": "Dell Storage Controller\n"
                }
            },
            "type": "object",
            "required": [
                "dellStorageController"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerOemDellDellStorageController:getStorageControllerStorageControllerOemDellDellStorageController": {
            "properties": {
                "alarmState": {
                    "type": "string",
                    "description": "Alarm State\n"
                },
                "autoConfigBehavior": {
                    "type": "string",
                    "description": "Auto Config Behavior\n"
                },
                "backgroundInitializationRatePercent": {
                    "type": "number",
                    "description": "Background Initialization Rate Percent\n"
                },
                "batteryLearnMode": {
                    "type": "string",
                    "description": "Battery Learn Mode\n"
                },
                "bootVirtualDiskFqdd": {
                    "type": "string",
                    "description": "Boot Virtual Disk FQDD\n"
                },
                "cacheSizeInMb": {
                    "type": "number",
                    "description": "Cache Size In MB\n"
                },
                "cachecadeCapability": {
                    "type": "string",
                    "description": "Cachecade Capability\n"
                },
                "checkConsistencyMode": {
                    "type": "string",
                    "description": "Check Consistency Mode\n"
                },
                "connectorCount": {
                    "type": "number",
                    "description": "Connector Count\n"
                },
                "controllerBootMode": {
                    "type": "string",
                    "description": "Controller Boot Mode\n"
                },
                "controllerFirmwareVersion": {
                    "type": "string",
                    "description": "Controller Firmware Version\n"
                },
                "controllerMode": {
                    "type": "string",
                    "description": "Controller Mode\n"
                },
                "copybackMode": {
                    "type": "string",
                    "description": "Copyback Mode\n"
                },
                "currentControllerMode": {
                    "type": "string",
                    "description": "Current Controller Mode\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device\n"
                },
                "deviceCardDataBusWidth": {
                    "type": "string",
                    "description": "Device Card Data Bus Width\n"
                },
                "deviceCardSlotLength": {
                    "type": "string",
                    "description": "Device Card Slot Length\n"
                },
                "deviceCardSlotType": {
                    "type": "string",
                    "description": "Device Card Slot Type\n"
                },
                "driverVersion": {
                    "type": "string",
                    "description": "Driver Version\n"
                },
                "encryptionCapability": {
                    "type": "string",
                    "description": "Encryption Capability\n"
                },
                "encryptionMode": {
                    "type": "string",
                    "description": "Encryption Mode\n"
                },
                "enhancedAutoImportForeignConfigurationMode": {
                    "type": "string",
                    "description": "Enhanced Auto Import Foreign Configuration Mode\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Key ID\n"
                },
                "lastSystemInventoryTime": {
                    "type": "string",
                    "description": "Last System Inventory Time\n"
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "Last Update Time\n"
                },
                "loadBalanceMode": {
                    "type": "string",
                    "description": "Load Balance Mode\n"
                },
                "maxAvailablePciLinkSpeed": {
                    "type": "string",
                    "description": "Max Available PCI Link Speed\n"
                },
                "maxDrivesInSpanCount": {
                    "type": "number",
                    "description": "Max Drives In Span Count\n"
                },
                "maxPossiblePciLinkSpeed": {
                    "type": "string",
                    "description": "Max Possible PCI Link Speed\n"
                },
                "maxSpansInVolumeCount": {
                    "type": "number",
                    "description": "Max Spans In Volume Count\n"
                },
                "maxSupportedVolumesCount": {
                    "type": "number",
                    "description": "Max Supported Volumes Count\n"
                },
                "patrolReadIterationsCount": {
                    "type": "number",
                    "description": "Patrol Read Iterations Count\n"
                },
                "patrolReadMode": {
                    "type": "string",
                    "description": "Patrol Read Mode\n"
                },
                "patrolReadRatePercent": {
                    "type": "number",
                    "description": "Patrol Read Rate Percent\n"
                },
                "patrolReadState": {
                    "type": "string",
                    "description": "Patrol Read State\n"
                },
                "patrolReadUnconfiguredAreaMode": {
                    "type": "string",
                    "description": "Patrol Read Unconfigured Area Mode\n"
                },
                "pciSlot": {
                    "type": "string",
                    "description": "PCI Slot\n"
                },
                "persistentHotspare": {
                    "type": "string",
                    "description": "Persistent Hotspare\n"
                },
                "persistentHotspareMode": {
                    "type": "string",
                    "description": "Persistent Hotspare Mode\n"
                },
                "raidMode": {
                    "type": "string",
                    "description": "RAID Mode\n"
                },
                "realTimeCapability": {
                    "type": "string",
                    "description": "Realtime Capability\n"
                },
                "reconstructRatePercent": {
                    "type": "number",
                    "description": "Reconstruct Rate Percent\n"
                },
                "rollupStatus": {
                    "type": "string",
                    "description": "Rollup Status\n"
                },
                "sasAddress": {
                    "type": "string",
                    "description": "SAS Address\n"
                },
                "securityStatus": {
                    "type": "string",
                    "description": "Security Status\n"
                },
                "sharedSlotAssignmentAllowed": {
                    "type": "string",
                    "description": "Shared Slot Assignment Allowed\n"
                },
                "slicedVdCapability": {
                    "type": "string",
                    "description": "Sliced VD Capability\n"
                },
                "spindownIdleTimeSeconds": {
                    "type": "number",
                    "description": "Spindown Idle Time Seconds\n"
                },
                "supportControllerBootMode": {
                    "type": "string",
                    "description": "Support Controller Boot Mode\n"
                },
                "supportEnhancedAutoForeignImport": {
                    "type": "string",
                    "description": "Support Enhanced Auto Foreign Import\n"
                },
                "supportRaid10UnevenSpans": {
                    "type": "string",
                    "description": "Support RAID10 Uneven Spans\n"
                },
                "supportedInitializationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported Initialization Types\n"
                },
                "supportsLkmToSekmTransition": {
                    "type": "string",
                    "description": "Supports LKM to SEKM Transition\n"
                },
                "t10PiCapability": {
                    "type": "string",
                    "description": "T10 PI Capability\n"
                }
            },
            "type": "object",
            "required": [
                "alarmState",
                "autoConfigBehavior",
                "backgroundInitializationRatePercent",
                "batteryLearnMode",
                "bootVirtualDiskFqdd",
                "cacheSizeInMb",
                "cachecadeCapability",
                "checkConsistencyMode",
                "connectorCount",
                "controllerBootMode",
                "controllerFirmwareVersion",
                "controllerMode",
                "copybackMode",
                "currentControllerMode",
                "device",
                "deviceCardDataBusWidth",
                "deviceCardSlotLength",
                "deviceCardSlotType",
                "driverVersion",
                "encryptionCapability",
                "encryptionMode",
                "enhancedAutoImportForeignConfigurationMode",
                "keyId",
                "lastSystemInventoryTime",
                "lastUpdateTime",
                "loadBalanceMode",
                "maxAvailablePciLinkSpeed",
                "maxDrivesInSpanCount",
                "maxPossiblePciLinkSpeed",
                "maxSpansInVolumeCount",
                "maxSupportedVolumesCount",
                "patrolReadIterationsCount",
                "patrolReadMode",
                "patrolReadRatePercent",
                "patrolReadState",
                "patrolReadUnconfiguredAreaMode",
                "pciSlot",
                "persistentHotspare",
                "persistentHotspareMode",
                "raidMode",
                "realTimeCapability",
                "reconstructRatePercent",
                "rollupStatus",
                "sasAddress",
                "securityStatus",
                "sharedSlotAssignmentAllowed",
                "slicedVdCapability",
                "spindownIdleTimeSeconds",
                "supportControllerBootMode",
                "supportEnhancedAutoForeignImport",
                "supportRaid10UnevenSpans",
                "supportedInitializationTypes",
                "supportsLkmToSekmTransition",
                "t10PiCapability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageControllerStorageControllerStatus:getStorageControllerStorageControllerStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageRedfishServer:getStorageRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getStorageStorage:getStorageStorage": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the storage\n"
                },
                "driveIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of drives on the storage\n"
                },
                "drives": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of drives on the storage. They are in same order as in `drive_ids`, ie. `drives[i]` will be the name of the drive whose ID is given by `drive_ids[i].`\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the storage\n"
                },
                "oem": {
                    "$ref": "#/types/redfish:index/getStorageStorageOem:getStorageStorageOem",
                    "description": "oem attributes of storage controller\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getStorageStorageStatus:getStorageStorageStatus",
                    "description": "status of the storage\n"
                },
                "storageControllerId": {
                    "type": "string",
                    "description": "storage controller id\n"
                },
                "storageControllers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/getStorageStorageStorageController:getStorageStorageStorageController"
                    },
                    "description": "storage controllers list\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "driveIds",
                "drives",
                "name",
                "oem",
                "status",
                "storageControllerId",
                "storageControllers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageOem:getStorageStorageOem": {
            "properties": {
                "dell": {
                    "$ref": "#/types/redfish:index/getStorageStorageOemDell:getStorageStorageOemDell",
                    "description": "dell attributes\n"
                }
            },
            "type": "object",
            "required": [
                "dell"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageOemDell:getStorageStorageOemDell": {
            "properties": {
                "dellController": {
                    "$ref": "#/types/redfish:index/getStorageStorageOemDellDellController:getStorageStorageOemDellDellController",
                    "description": "dell controller\n"
                },
                "dellControllerBattery": {
                    "$ref": "#/types/redfish:index/getStorageStorageOemDellDellControllerBattery:getStorageStorageOemDellDellControllerBattery",
                    "description": "dell controller battery\n"
                }
            },
            "type": "object",
            "required": [
                "dellController",
                "dellControllerBattery"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageOemDellDellController:getStorageStorageOemDellDellController": {
            "properties": {
                "alarmState": {
                    "type": "string",
                    "description": "alarm state\n"
                },
                "autoConfigBehavior": {
                    "type": "string",
                    "description": "auto config behavior\n"
                },
                "bootVirtualDiskFqdd": {
                    "type": "string",
                    "description": "boot virtual disk fqdd\n"
                },
                "cacheSizeInMb": {
                    "type": "number",
                    "description": "cache size in mb\n"
                },
                "cachecadeCapability": {
                    "type": "string",
                    "description": "cachecade capability\n"
                },
                "connectorCount": {
                    "type": "number",
                    "description": "connector count\n"
                },
                "controllerDescription": {
                    "type": "string",
                    "description": "description of the controller\n"
                },
                "controllerFirmwareVersion": {
                    "type": "string",
                    "description": "controller firmware version\n"
                },
                "controllerId": {
                    "type": "string",
                    "description": "id of controller\n"
                },
                "controllerName": {
                    "type": "string",
                    "description": "controller name\n"
                },
                "currentControllerMode": {
                    "type": "string",
                    "description": "current controller mode\n"
                },
                "device": {
                    "type": "string",
                    "description": "device\n"
                },
                "deviceCardDataBusWidth": {
                    "type": "string",
                    "description": "device card data bus width\n"
                },
                "deviceCardSlotLength": {
                    "type": "string",
                    "description": "device card slot length\n"
                },
                "deviceCardSlotType": {
                    "type": "string",
                    "description": "device card slot type\n"
                },
                "driverVersion": {
                    "type": "string",
                    "description": "driver version\n"
                },
                "encryptionCapability": {
                    "type": "string",
                    "description": "encryption capability\n"
                },
                "encryptionMode": {
                    "type": "string",
                    "description": "encryption mode\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "key id\n"
                },
                "lastSystemInventoryTime": {
                    "type": "string",
                    "description": "last system inventory time\n"
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "last update time\n"
                },
                "maxAvailablePciLinkSpeed": {
                    "type": "string",
                    "description": "max available pci link speed\n"
                },
                "maxPossiblePciLinkSpeed": {
                    "type": "string",
                    "description": "max possible pci link speed\n"
                },
                "patrolReadState": {
                    "type": "string",
                    "description": "patrol read state\n"
                },
                "pciSlot": {
                    "type": "string",
                    "description": "pci slot\n"
                },
                "persistentHotspare": {
                    "type": "string",
                    "description": "persistent hotspare\n"
                },
                "realtimeCapability": {
                    "type": "string",
                    "description": "realtime capability\n"
                },
                "rollupStatus": {
                    "type": "string",
                    "description": "rollup status\n"
                },
                "sasAddress": {
                    "type": "string",
                    "description": "sas address\n"
                },
                "securityStatus": {
                    "type": "string",
                    "description": "security status\n"
                },
                "sharedSlotAssignmentAllowed": {
                    "type": "string",
                    "description": "shared slot assignment allowed\n"
                },
                "slicedVdCapability": {
                    "type": "string",
                    "description": "sliced vd capability\n"
                },
                "supportControllerBootMode": {
                    "type": "string",
                    "description": "support controller boot mode\n"
                },
                "supportEnhancedAutoForeignImport": {
                    "type": "string",
                    "description": "support enhanced auto foreign import\n"
                },
                "supportRaid10UnevenSpans": {
                    "type": "string",
                    "description": "support raid 10 uneven spans\n"
                },
                "supportsLkMtoSekmTransition": {
                    "type": "string",
                    "description": "supports lk mto sekm transition\n"
                },
                "t10PiCapability": {
                    "type": "string",
                    "description": "t 10 pi capability\n"
                }
            },
            "type": "object",
            "required": [
                "alarmState",
                "autoConfigBehavior",
                "bootVirtualDiskFqdd",
                "cacheSizeInMb",
                "cachecadeCapability",
                "connectorCount",
                "controllerDescription",
                "controllerFirmwareVersion",
                "controllerId",
                "controllerName",
                "currentControllerMode",
                "device",
                "deviceCardDataBusWidth",
                "deviceCardSlotLength",
                "deviceCardSlotType",
                "driverVersion",
                "encryptionCapability",
                "encryptionMode",
                "keyId",
                "lastSystemInventoryTime",
                "lastUpdateTime",
                "maxAvailablePciLinkSpeed",
                "maxPossiblePciLinkSpeed",
                "patrolReadState",
                "pciSlot",
                "persistentHotspare",
                "realtimeCapability",
                "rollupStatus",
                "sasAddress",
                "securityStatus",
                "sharedSlotAssignmentAllowed",
                "slicedVdCapability",
                "supportControllerBootMode",
                "supportEnhancedAutoForeignImport",
                "supportRaid10UnevenSpans",
                "supportsLkMtoSekmTransition",
                "t10PiCapability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageOemDellDellControllerBattery:getStorageStorageOemDellDellControllerBattery": {
            "properties": {
                "controllerBatteryDescription": {
                    "type": "string",
                    "description": "description of the controller battery\n"
                },
                "controllerBatteryId": {
                    "type": "string",
                    "description": "id of controller battery\n"
                },
                "controllerBatteryName": {
                    "type": "string",
                    "description": "controller battery name\n"
                },
                "fqdd": {
                    "type": "string",
                    "description": "fqdd\n"
                },
                "primaryStatus": {
                    "type": "string",
                    "description": "primary_status\n"
                },
                "raidState": {
                    "type": "string",
                    "description": "raid state\n"
                }
            },
            "type": "object",
            "required": [
                "controllerBatteryDescription",
                "controllerBatteryId",
                "controllerBatteryName",
                "fqdd",
                "primaryStatus",
                "raidState"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageStatus:getStorageStorageStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageStorageController:getStorageStorageStorageController": {
            "properties": {
                "cacheSummary": {
                    "$ref": "#/types/redfish:index/getStorageStorageStorageControllerCacheSummary:getStorageStorageStorageControllerCacheSummary",
                    "description": "cache summary\n"
                },
                "firmwareVersion": {
                    "type": "string",
                    "description": "firmware version\n"
                },
                "manufacturer": {
                    "type": "string",
                    "description": "manufacturer\n"
                },
                "model": {
                    "type": "string",
                    "description": "model\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the storage controller\n"
                },
                "speedGbps": {
                    "type": "number",
                    "description": "speed gbps\n"
                },
                "status": {
                    "$ref": "#/types/redfish:index/getStorageStorageStorageControllerStatus:getStorageStorageStorageControllerStatus",
                    "description": "status of the storage controller\n"
                },
                "supportedControllerProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported controller protocols\n"
                },
                "supportedDeviceProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported device protocols\n"
                },
                "supportedRaidTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported raid types\n"
                }
            },
            "type": "object",
            "required": [
                "cacheSummary",
                "firmwareVersion",
                "manufacturer",
                "model",
                "name",
                "speedGbps",
                "status",
                "supportedControllerProtocols",
                "supportedDeviceProtocols",
                "supportedRaidTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageStorageControllerCacheSummary:getStorageStorageStorageControllerCacheSummary": {
            "properties": {
                "totalCacheSizeMiB": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "totalCacheSizeMiB"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getStorageStorageStorageControllerStatus:getStorageStorageStorageControllerStatus": {
            "properties": {
                "health": {
                    "type": "string",
                    "description": "health\n"
                },
                "healthRollup": {
                    "type": "string",
                    "description": "health rollup\n"
                },
                "state": {
                    "type": "string",
                    "description": "state of the storage controller\n"
                }
            },
            "type": "object",
            "required": [
                "health",
                "healthRollup",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redfish:index/getSystemBootRedfishServer:getSystemBootRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getVirtualMediaRedfishServer:getVirtualMediaRedfishServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Server BMC IP address or hostname\n"
                },
                "password": {
                    "type": "string",
                    "description": "User password for login\n",
                    "secret": true
                },
                "redfishAlias": {
                    "type": "string",
                    "description": "Alias name for server BMCs. The key in provider's `redfish_servers` map\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "user": {
                    "type": "string",
                    "description": "User name for login\n"
                }
            },
            "type": "object"
        },
        "redfish:index/getVirtualMediaVirtualMedia:getVirtualMediaVirtualMedia": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the virtual media resource\n"
                },
                "odataId": {
                    "type": "string",
                    "description": "OData ID for the Virtual Media resource\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "odataId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the redfish package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "password": {
                "type": "string",
                "description": "This field is the password related to the user given\n",
                "secret": true
            },
            "redfishServers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/types/redfish:index/ProviderRedfishServers:ProviderRedfishServers"
                },
                "description": "Map of server BMCs with their alias keys and respective user credentials. This is required when resource/datasource's\n`redfish_alias` is not null\n"
            },
            "user": {
                "type": "string",
                "description": "This field is the user to login against the redfish API\n"
            }
        },
        "inputProperties": {
            "password": {
                "type": "string",
                "description": "This field is the password related to the user given\n",
                "secret": true
            },
            "redfishServers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/types/redfish:index/ProviderRedfishServers:ProviderRedfishServers"
                },
                "description": "Map of server BMCs with their alias keys and respective user credentials. This is required when resource/datasource's\n`redfish_alias` is not null\n"
            },
            "user": {
                "type": "string",
                "description": "This field is the user to login against the redfish API\n"
            }
        }
    },
    "resources": {
        "redfish:index/bios:Bios": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2022-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\n```sh\n$ pulumi import redfish:index/bios:Bios bios \"{\\\"username\\\":\\\"\u003cusername\u003e\\\",\\\"password\\\":\\\"\u003cpassword\u003e\\\",\\\"endpoint\\\":\\\"\u003cendpoint\u003e\\\",\\\"ssl_insecure\\\":\u003ctrue/false\u003e}\"\n```\n\n```sh\n$ pulumi import redfish:index/bios:Bios with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/bios:Bios bios \"{\\\"redfish_alias\\\":\\\"\u003credfish_alias\u003e\\\"}\"\n```\n\n1. This will import the storage volume instance with specified ID into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Bios attribute map.\n"
                },
                "biosJobTimeout": {
                    "type": "number",
                    "description": "bios*job*timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing out.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BiosRedfishServer:BiosRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart', 'GracefulRestart', and 'PowerCycle'.Default = \"GracefulRestart\".\n"
                },
                "settingsApplyTime": {
                    "type": "string",
                    "description": "The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply time values will be supported. Default is \"OnReset\".\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "required": [
                "attributes",
                "biosJobTimeout",
                "resetTimeout",
                "resetType",
                "settingsApplyTime",
                "systemId"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Bios attribute map.\n"
                },
                "biosJobTimeout": {
                    "type": "number",
                    "description": "bios*job*timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing out.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BiosRedfishServer:BiosRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart', 'GracefulRestart', and 'PowerCycle'.Default = \"GracefulRestart\".\n"
                },
                "settingsApplyTime": {
                    "type": "string",
                    "description": "The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply time values will be supported. Default is \"OnReset\".\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bios resources.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The Bios attribute map.\n"
                    },
                    "biosJobTimeout": {
                        "type": "number",
                        "description": "bios*job*timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing out.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/BiosRedfishServer:BiosRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart', 'GracefulRestart', and 'PowerCycle'.Default = \"GracefulRestart\".\n"
                    },
                    "settingsApplyTime": {
                        "type": "string",
                        "description": "The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply time values will be supported. Default is \"OnReset\".\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/bootOrder:BootOrder": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nThe synatx is:\n\n```sh\n$ pulumi import redfish:index/bootOrder:BootOrder boot \"{\\\"username\\\":\\\"\u003cusername\u003e\\\",\\\"password\\\":\\\"\u003cpassword\u003e\\\",\\\"endpoint\\\":\\\"\u003cendpoint\u003e\\\",\\\"ssl_insecure\\\":\u003ctrue/false\u003e}\"\n```\n\n```sh\n$ pulumi import redfish:index/bootOrder:BootOrder boot '{\"username\":\"admin\",\"password\":\"passw0rd\",\"endpoint\":\"https://my-server-1.myawesomecompany.org\",\"ssl_insecure\":true}'\n```\n\n```sh\n$ pulumi import redfish:index/bootOrder:BootOrder with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/bootOrder:BootOrder boot '{\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n1. This will import the boot order instance into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "bootOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootOrderBootOption:BootOrderBootOption"
                    },
                    "description": "Options to enable or disable the boot device.\n"
                },
                "bootOrderJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                },
                "bootOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sets the boot devices in the required boot order sequences.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootOrderRedfishServer:BootOrderRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "required": [
                "bootOptions",
                "bootOrders",
                "bootOrderJobTimeout",
                "resetTimeout",
                "resetType",
                "systemId"
            ],
            "inputProperties": {
                "bootOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootOrderBootOption:BootOrderBootOption"
                    },
                    "description": "Options to enable or disable the boot device.\n"
                },
                "bootOrderJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                },
                "bootOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sets the boot devices in the required boot order sequences.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootOrderRedfishServer:BootOrderRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "requiredInputs": [
                "resetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BootOrder resources.\n",
                "properties": {
                    "bootOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/BootOrderBootOption:BootOrderBootOption"
                        },
                        "description": "Options to enable or disable the boot device.\n"
                    },
                    "bootOrderJobTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                    },
                    "bootOrders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "sets the boot devices in the required boot order sequences.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/BootOrderRedfishServer:BootOrderRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/bootSourceOverride:BootSourceOverride": {
            "properties": {
                "bootSourceJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                },
                "bootSourceOverrideEnabled": {
                    "type": "string",
                    "description": "The state of the Boot Source Override feature.\n"
                },
                "bootSourceOverrideMode": {
                    "type": "string",
                    "description": "The BIOS boot mode to be used when boot source is booted from.\n"
                },
                "bootSourceOverrideTarget": {
                    "type": "string",
                    "description": "The boot source override target device to use during the next boot instead of the normal boot device.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootSourceOverrideRedfishServer:BootSourceOverrideRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "uefiTargetBootSourceOverride": {
                    "type": "string",
                    "description": "The UEFI device path of the device from which to boot when boot*source*override_target is UefiTarget\n"
                }
            },
            "required": [
                "bootSourceJobTimeout",
                "resetTimeout",
                "resetType",
                "systemId"
            ],
            "inputProperties": {
                "bootSourceJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                },
                "bootSourceOverrideEnabled": {
                    "type": "string",
                    "description": "The state of the Boot Source Override feature.\n"
                },
                "bootSourceOverrideMode": {
                    "type": "string",
                    "description": "The BIOS boot mode to be used when boot source is booted from.\n"
                },
                "bootSourceOverrideTarget": {
                    "type": "string",
                    "description": "The boot source override target device to use during the next boot instead of the normal boot device.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/BootSourceOverrideRedfishServer:BootSourceOverrideRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "uefiTargetBootSourceOverride": {
                    "type": "string",
                    "description": "The UEFI device path of the device from which to boot when boot*source*override_target is UefiTarget\n"
                }
            },
            "requiredInputs": [
                "resetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BootSourceOverride resources.\n",
                "properties": {
                    "bootSourceJobTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the BootSource override job to be completed before timing out.\n"
                    },
                    "bootSourceOverrideEnabled": {
                        "type": "string",
                        "description": "The state of the Boot Source Override feature.\n"
                    },
                    "bootSourceOverrideMode": {
                        "type": "string",
                        "description": "The BIOS boot mode to be used when boot source is booted from.\n"
                    },
                    "bootSourceOverrideTarget": {
                        "type": "string",
                        "description": "The boot source override target device to use during the next boot instead of the normal boot device.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/BootSourceOverrideRedfishServer:BootSourceOverrideRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    },
                    "uefiTargetBootSourceOverride": {
                        "type": "string",
                        "description": "The UEFI device path of the device from which to boot when boot*source*override_target is UefiTarget\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/certificate:Certificate": {
            "properties": {
                "certificateType": {
                    "type": "string",
                    "description": "Type of the certificate to be imported.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and CA certificates.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/CertificateRedfishServer:CertificateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "sslCertificateContent": {
                    "type": "string",
                    "description": "SSLCertificate File require content of certificate\n\t\t\tsupported certificate type:\n\t\t\t\"CustomCertificate\" - The certificate must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was used to convert the certificate to pkcs#12 format must also be provided in \"passphrase\" attribute. \"Server\" - Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.\n"
                }
            },
            "required": [
                "certificateType",
                "sslCertificateContent"
            ],
            "inputProperties": {
                "certificateType": {
                    "type": "string",
                    "description": "Type of the certificate to be imported.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and CA certificates.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/CertificateRedfishServer:CertificateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "sslCertificateContent": {
                    "type": "string",
                    "description": "SSLCertificate File require content of certificate\n\t\t\tsupported certificate type:\n\t\t\t\"CustomCertificate\" - The certificate must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was used to convert the certificate to pkcs#12 format must also be provided in \"passphrase\" attribute. \"Server\" - Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.\n"
                }
            },
            "requiredInputs": [
                "certificateType",
                "sslCertificateContent"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificateType": {
                        "type": "string",
                        "description": "Type of the certificate to be imported.\n"
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and CA certificates.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/CertificateRedfishServer:CertificateRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "sslCertificateContent": {
                        "type": "string",
                        "description": "SSLCertificate File require content of certificate\n\t\t\tsupported certificate type:\n\t\t\t\"CustomCertificate\" - The certificate must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was used to convert the certificate to pkcs#12 format must also be provided in \"passphrase\" attribute. \"Server\" - Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/dellIdracAttributes:DellIdracAttributes": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nimport all idrac attributes\n\n```sh\n$ pulumi import redfish:index/dellIdracAttributes:DellIdracAttributes idrac '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\nimport list of idrac attributes\n\n```sh\n$ pulumi import redfish:index/dellIdracAttributes:DellIdracAttributes idrac '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e, \"attributes\":[\"Users.2.UserName\"]}'\n```\n\n```sh\n$ pulumi import redfish:index/dellIdracAttributes:DellIdracAttributes with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/dellIdracAttributes:DellIdracAttributes idrac '{\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "iDRAC attributes. To check allowed attributes please either use the datasource for dell idrac attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/iDRAC.Embedded.1. To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellIdracAttributesRedfishServer:DellIdracAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "required": [
                "attributes"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "iDRAC attributes. To check allowed attributes please either use the datasource for dell idrac attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/iDRAC.Embedded.1. To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellIdracAttributesRedfishServer:DellIdracAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "requiredInputs": [
                "attributes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DellIdracAttributes resources.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "iDRAC attributes. To check allowed attributes please either use the datasource for dell idrac attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/iDRAC.Embedded.1. To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/DellIdracAttributesRedfishServer:DellIdracAttributesRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/dellLcAttributes:DellLcAttributes": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nimport all LC attributes\n\n```sh\n$ pulumi import redfish:index/dellLcAttributes:DellLcAttributes lc '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\nimport list of LC attributes\n\n```sh\n$ pulumi import redfish:index/dellLcAttributes:DellLcAttributes lc '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e, \"attributes\":[\"LCAttributes.1.IgnoreCertWarning\"]}'\n```\n\n```sh\n$ pulumi import redfish:index/dellLcAttributes:DellLcAttributes with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/dellLcAttributes:DellLcAttributes lc '{\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Lifecycle Controller attributes. To check allowed attributes please either use the datasource for dell LC attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/LifecycleController.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellLcAttributesRedfishServer:DellLcAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "required": [
                "attributes"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Lifecycle Controller attributes. To check allowed attributes please either use the datasource for dell LC attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/LifecycleController.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellLcAttributesRedfishServer:DellLcAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "requiredInputs": [
                "attributes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DellLcAttributes resources.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Lifecycle Controller attributes. To check allowed attributes please either use the datasource for dell LC attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/LifecycleController.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/DellLcAttributesRedfishServer:DellLcAttributesRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/dellSystemAttributes:DellSystemAttributes": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nimport all System attributes\n\n```sh\n$ pulumi import redfish:index/dellSystemAttributes:DellSystemAttributes system '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\nimport list of System attributes\n\n```sh\n$ pulumi import redfish:index/dellSystemAttributes:DellSystemAttributes system '{\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e, \"attributes\":[\"ServerPwr.1.PSPFCEnabled\"]}'\n```\n\n```sh\n$ pulumi import redfish:index/dellSystemAttributes:DellSystemAttributes with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/dellSystemAttributes:DellSystemAttributes system '{\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "System attributes. To check allowed attributes please either use the datasource for dell System attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/System.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellSystemAttributesRedfishServer:DellSystemAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "required": [
                "attributes"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "System attributes. To check allowed attributes please either use the datasource for dell System attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/System.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DellSystemAttributesRedfishServer:DellSystemAttributesRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "requiredInputs": [
                "attributes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DellSystemAttributes resources.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "System attributes. To check allowed attributes please either use the datasource for dell System attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/System.Embedded.1 To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/DellSystemAttributesRedfishServer:DellSystemAttributesRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/directoryServiceAuthProvider:DirectoryServiceAuthProvider": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\n```sh\n$ pulumi import redfish:index/directoryServiceAuthProvider:DirectoryServiceAuthProvider ds_auth '{\"username\":\"\u003cusername\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\n```sh\n$ pulumi import redfish:index/directoryServiceAuthProvider:DirectoryServiceAuthProvider with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/directoryServiceAuthProvider:DirectoryServiceAuthProvider ds_auth '{\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n1. This will import the Directory Service Auth Provider configuration into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "activeDirectory": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectory:DirectoryServiceAuthProviderActiveDirectory",
                    "description": "Active DirectoryNote: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                },
                "activeDirectoryAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory.* attributes in Dell iDRAC attributes.Note: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                },
                "ldap": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdap:DirectoryServiceAuthProviderLdap",
                    "description": "LDAPNote: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                },
                "ldapAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "LDAP.* attributes in Dell iDRAC attributes.Note: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderRedfishServer:DirectoryServiceAuthProviderRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "required": [
                "activeDirectory",
                "activeDirectoryAttributes",
                "ldap",
                "ldapAttributes"
            ],
            "inputProperties": {
                "activeDirectory": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectory:DirectoryServiceAuthProviderActiveDirectory",
                    "description": "Active DirectoryNote: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                },
                "activeDirectoryAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory.* attributes in Dell iDRAC attributes.Note: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                },
                "ldap": {
                    "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdap:DirectoryServiceAuthProviderLdap",
                    "description": "LDAPNote: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                },
                "ldapAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "LDAP.* attributes in Dell iDRAC attributes.Note: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderRedfishServer:DirectoryServiceAuthProviderRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryServiceAuthProvider resources.\n",
                "properties": {
                    "activeDirectory": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderActiveDirectory:DirectoryServiceAuthProviderActiveDirectory",
                        "description": "Active DirectoryNote: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                    },
                    "activeDirectoryAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "ActiveDirectory.* attributes in Dell iDRAC attributes.Note: `active_directory` is mutually inclusive with `active_directory_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                    },
                    "ldap": {
                        "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderLdap:DirectoryServiceAuthProviderLdap",
                        "description": "LDAPNote: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory` is mutually exclusive with `ldap`.\n"
                    },
                    "ldapAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "LDAP.* attributes in Dell iDRAC attributes.Note: `ldap` is mutually inclusive with `ldap_attributes`. , Note: `active_directory_attributes` is mutually exclusive with `ldap_attributes`.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/DirectoryServiceAuthProviderRedfishServer:DirectoryServiceAuthProviderRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/idracFirmwareUpdate:IdracFirmwareUpdate": {
            "properties": {
                "applyUpdate": {
                    "type": "boolean",
                    "description": "If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are applied but the list of updatable packages can be seen in the UpdateList.Default is true.\n"
                },
                "catalogFileName": {
                    "type": "string",
                    "description": "Name of the catalog file on the repository. Default is Catalog.xml.\n"
                },
                "ignoreCertWarning": {
                    "type": "string",
                    "description": "Specifies if certificate warning should be ignored when HTTPS is used. If ignore*cert*warning is On,warnings are ignored. Default is On.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address for the remote share.\n"
                },
                "mountPoint": {
                    "type": "string",
                    "description": "The local directory where the share should be mounted.\n"
                },
                "proxyPassword": {
                    "type": "string",
                    "description": "The password for the proxy server.\n"
                },
                "proxyPort": {
                    "type": "number",
                    "description": "The Port for the proxy server.Default is set to 80.\n"
                },
                "proxyServer": {
                    "type": "string",
                    "description": "The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid proxy*server.Please check the results of the job for error details.This is required when proxy*support is ParametersProxy.\n"
                },
                "proxySupport": {
                    "type": "string",
                    "description": "Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.\n"
                },
                "proxyType": {
                    "type": "string",
                    "description": "The proxy type of the proxy server. Default is (HTTP).\n"
                },
                "proxyUsername": {
                    "type": "string",
                    "description": "The user name for the proxy server.\n"
                },
                "rebootNeeded": {
                    "type": "boolean",
                    "description": "This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracFirmwareUpdateRedfishServer:IdracFirmwareUpdateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as the path of the directory containing the file.\n"
                },
                "sharePassword": {
                    "type": "string",
                    "description": "Network share user password. This option is mandatory for CIFS Network Share.\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "Type of the Network Share.\n"
                },
                "shareUser": {
                    "type": "string",
                    "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'.This option is mandatory for CIFS Network Share.\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "updateLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracFirmwareUpdateUpdateList:IdracFirmwareUpdateUpdateList"
                    },
                    "description": "List of properties of the update list.\n"
                }
            },
            "required": [
                "applyUpdate",
                "catalogFileName",
                "ignoreCertWarning",
                "ipAddress",
                "proxyPort",
                "proxySupport",
                "proxyType",
                "rebootNeeded",
                "shareType",
                "systemId",
                "updateLists"
            ],
            "inputProperties": {
                "applyUpdate": {
                    "type": "boolean",
                    "description": "If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are applied but the list of updatable packages can be seen in the UpdateList.Default is true.\n"
                },
                "catalogFileName": {
                    "type": "string",
                    "description": "Name of the catalog file on the repository. Default is Catalog.xml.\n"
                },
                "ignoreCertWarning": {
                    "type": "string",
                    "description": "Specifies if certificate warning should be ignored when HTTPS is used. If ignore*cert*warning is On,warnings are ignored. Default is On.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address for the remote share.\n"
                },
                "mountPoint": {
                    "type": "string",
                    "description": "The local directory where the share should be mounted.\n"
                },
                "proxyPassword": {
                    "type": "string",
                    "description": "The password for the proxy server.\n"
                },
                "proxyPort": {
                    "type": "number",
                    "description": "The Port for the proxy server.Default is set to 80.\n"
                },
                "proxyServer": {
                    "type": "string",
                    "description": "The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid proxy*server.Please check the results of the job for error details.This is required when proxy*support is ParametersProxy.\n"
                },
                "proxySupport": {
                    "type": "string",
                    "description": "Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.\n"
                },
                "proxyType": {
                    "type": "string",
                    "description": "The proxy type of the proxy server. Default is (HTTP).\n"
                },
                "proxyUsername": {
                    "type": "string",
                    "description": "The user name for the proxy server.\n"
                },
                "rebootNeeded": {
                    "type": "boolean",
                    "description": "This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracFirmwareUpdateRedfishServer:IdracFirmwareUpdateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareName": {
                    "type": "string",
                    "description": "Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as the path of the directory containing the file.\n"
                },
                "sharePassword": {
                    "type": "string",
                    "description": "Network share user password. This option is mandatory for CIFS Network Share.\n"
                },
                "shareType": {
                    "type": "string",
                    "description": "Type of the Network Share.\n"
                },
                "shareUser": {
                    "type": "string",
                    "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'.This option is mandatory for CIFS Network Share.\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "requiredInputs": [
                "ipAddress",
                "shareType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdracFirmwareUpdate resources.\n",
                "properties": {
                    "applyUpdate": {
                        "type": "boolean",
                        "description": "If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are applied but the list of updatable packages can be seen in the UpdateList.Default is true.\n"
                    },
                    "catalogFileName": {
                        "type": "string",
                        "description": "Name of the catalog file on the repository. Default is Catalog.xml.\n"
                    },
                    "ignoreCertWarning": {
                        "type": "string",
                        "description": "Specifies if certificate warning should be ignored when HTTPS is used. If ignore*cert*warning is On,warnings are ignored. Default is On.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address for the remote share.\n"
                    },
                    "mountPoint": {
                        "type": "string",
                        "description": "The local directory where the share should be mounted.\n"
                    },
                    "proxyPassword": {
                        "type": "string",
                        "description": "The password for the proxy server.\n"
                    },
                    "proxyPort": {
                        "type": "number",
                        "description": "The Port for the proxy server.Default is set to 80.\n"
                    },
                    "proxyServer": {
                        "type": "string",
                        "description": "The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid proxy*server.Please check the results of the job for error details.This is required when proxy*support is ParametersProxy.\n"
                    },
                    "proxySupport": {
                        "type": "string",
                        "description": "Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.\n"
                    },
                    "proxyType": {
                        "type": "string",
                        "description": "The proxy type of the proxy server. Default is (HTTP).\n"
                    },
                    "proxyUsername": {
                        "type": "string",
                        "description": "The user name for the proxy server.\n"
                    },
                    "rebootNeeded": {
                        "type": "boolean",
                        "description": "This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/IdracFirmwareUpdateRedfishServer:IdracFirmwareUpdateRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "shareName": {
                        "type": "string",
                        "description": "Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as the path of the directory containing the file.\n"
                    },
                    "sharePassword": {
                        "type": "string",
                        "description": "Network share user password. This option is mandatory for CIFS Network Share.\n"
                    },
                    "shareType": {
                        "type": "string",
                        "description": "Type of the Network Share.\n"
                    },
                    "shareUser": {
                        "type": "string",
                        "description": "Network share user in the format 'user@domain' or 'domain\\user' if user is part of a domain else 'user'.This option is mandatory for CIFS Network Share.\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    },
                    "updateLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/IdracFirmwareUpdateUpdateList:IdracFirmwareUpdateUpdateList"
                        },
                        "description": "List of properties of the update list.\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/idracServerConfigurationProfileExport:IdracServerConfigurationProfileExport": {
            "properties": {
                "exportFormat": {
                    "type": "string",
                    "description": "Specify the output file format.\n"
                },
                "exportUse": {
                    "type": "string",
                    "description": "Specify the type of Server Configuration Profile (SCP) to be exported.\n"
                },
                "fileContent": {
                    "type": "string",
                    "description": "File Content\n"
                },
                "includeInExports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Include In Export\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportRedfishServer:IdracServerConfigurationProfileExportRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareParameters": {
                    "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportShareParameters:IdracServerConfigurationProfileExportShareParameters",
                    "description": "Share Parameters\n"
                }
            },
            "required": [
                "exportFormat",
                "exportUse",
                "fileContent",
                "includeInExports",
                "shareParameters"
            ],
            "inputProperties": {
                "exportFormat": {
                    "type": "string",
                    "description": "Specify the output file format.\n"
                },
                "exportUse": {
                    "type": "string",
                    "description": "Specify the type of Server Configuration Profile (SCP) to be exported.\n"
                },
                "includeInExports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Include In Export\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportRedfishServer:IdracServerConfigurationProfileExportRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareParameters": {
                    "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportShareParameters:IdracServerConfigurationProfileExportShareParameters",
                    "description": "Share Parameters\n"
                }
            },
            "requiredInputs": [
                "shareParameters"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdracServerConfigurationProfileExport resources.\n",
                "properties": {
                    "exportFormat": {
                        "type": "string",
                        "description": "Specify the output file format.\n"
                    },
                    "exportUse": {
                        "type": "string",
                        "description": "Specify the type of Server Configuration Profile (SCP) to be exported.\n"
                    },
                    "fileContent": {
                        "type": "string",
                        "description": "File Content\n"
                    },
                    "includeInExports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Include In Export\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportRedfishServer:IdracServerConfigurationProfileExportRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "shareParameters": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileExportShareParameters:IdracServerConfigurationProfileExportShareParameters",
                        "description": "Share Parameters\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/idracServerConfigurationProfileImport:IdracServerConfigurationProfileImport": {
            "properties": {
                "hostPowerState": {
                    "type": "string",
                    "description": "Host Power State. This attribute allows you to specify the power state of the host when the\n\t\t\tiDRAC is performing the import operation. Accepted values are: \"On\" or \"Off\". If this attribute is not specified\n\t\t\tor is set to \"On\", the host is powered on before the import operation. If it is set to \"Off\", the host is powered\n\t\t\toff before the import operation. Note that the host will be powered back on after the import is completed.\n"
                },
                "importBuffer": {
                    "type": "string",
                    "description": "Buffer content to perform Import.This is only required for localstore and is not applicable for CIFS/NFS style Import. If the import buffer is empty, then it will perform the import from the source path specified in share parameters.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportRedfishServer:IdracServerConfigurationProfileImportRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareParameters": {
                    "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportShareParameters:IdracServerConfigurationProfileImportShareParameters",
                    "description": "Share Parameters\n"
                },
                "shutdownType": {
                    "type": "string",
                    "description": "Shutdown Type. This attribute specifies the type of shutdown that should be performed before importing the server configuration profile. Accepted values are: \"Graceful\" (default), \"Forced\", or \"NoReboot\". If set to \"Graceful\", the server will be gracefully shut down before the import. If set to \"Forced\", the server will be forcefully shut down before the import. If set to \"NoReboot\", the server will not be restarted after the import. Note that if the server is powered off before the import operation, it will not be powered back on after the import is completed. If the server is powered on before the import operation, it will be powered off during the import process if this attribute is set to \"Forced\" or \"NoReboot\", and will be powered back on after the import is completed if this attribute is set to \"Graceful\" or \"NoReboot\".\n"
                },
                "timeToWait": {
                    "type": "number",
                    "description": "Time To Wait (in seconds) - specifies the time to wait for the server configuration profile\n\t\t\tto be imported. This is useful for ensuring that the server is powered off before the import operation, and for waiting\n\t\t\tfor the import to complete before powering the server back on. The default value is 1200 seconds (or 20 minutes), but can\n\t\t\tbe set to a lower value of 300 seconds (or 5 minutes) upto a max value of 3600 seconds (or 60 minutes) if desired. Note\n\t\t\tthat this attribute only applies if the server is powered on before the import operation, or if the server is powered off\n\t\t\tbefore the import operation and the shutdown type is set to \"Graceful\" or \"NoReboot\". The minimum value is 300 seconds, and\n\t\t\tthe maximum value is 3600 seconds (or 1 hour). If the server is powered off before the import operation and the shutdown\n\t\t\ttype is set to \"Forced\" or \"NoReboot\", the import operation will occur immediately and the server will not be powered\n\t\t\tback on after the import is completed.\n"
                }
            },
            "required": [
                "hostPowerState",
                "shareParameters",
                "shutdownType",
                "timeToWait"
            ],
            "inputProperties": {
                "hostPowerState": {
                    "type": "string",
                    "description": "Host Power State. This attribute allows you to specify the power state of the host when the\n\t\t\tiDRAC is performing the import operation. Accepted values are: \"On\" or \"Off\". If this attribute is not specified\n\t\t\tor is set to \"On\", the host is powered on before the import operation. If it is set to \"Off\", the host is powered\n\t\t\toff before the import operation. Note that the host will be powered back on after the import is completed.\n"
                },
                "importBuffer": {
                    "type": "string",
                    "description": "Buffer content to perform Import.This is only required for localstore and is not applicable for CIFS/NFS style Import. If the import buffer is empty, then it will perform the import from the source path specified in share parameters.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportRedfishServer:IdracServerConfigurationProfileImportRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "shareParameters": {
                    "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportShareParameters:IdracServerConfigurationProfileImportShareParameters",
                    "description": "Share Parameters\n"
                },
                "shutdownType": {
                    "type": "string",
                    "description": "Shutdown Type. This attribute specifies the type of shutdown that should be performed before importing the server configuration profile. Accepted values are: \"Graceful\" (default), \"Forced\", or \"NoReboot\". If set to \"Graceful\", the server will be gracefully shut down before the import. If set to \"Forced\", the server will be forcefully shut down before the import. If set to \"NoReboot\", the server will not be restarted after the import. Note that if the server is powered off before the import operation, it will not be powered back on after the import is completed. If the server is powered on before the import operation, it will be powered off during the import process if this attribute is set to \"Forced\" or \"NoReboot\", and will be powered back on after the import is completed if this attribute is set to \"Graceful\" or \"NoReboot\".\n"
                },
                "timeToWait": {
                    "type": "number",
                    "description": "Time To Wait (in seconds) - specifies the time to wait for the server configuration profile\n\t\t\tto be imported. This is useful for ensuring that the server is powered off before the import operation, and for waiting\n\t\t\tfor the import to complete before powering the server back on. The default value is 1200 seconds (or 20 minutes), but can\n\t\t\tbe set to a lower value of 300 seconds (or 5 minutes) upto a max value of 3600 seconds (or 60 minutes) if desired. Note\n\t\t\tthat this attribute only applies if the server is powered on before the import operation, or if the server is powered off\n\t\t\tbefore the import operation and the shutdown type is set to \"Graceful\" or \"NoReboot\". The minimum value is 300 seconds, and\n\t\t\tthe maximum value is 3600 seconds (or 1 hour). If the server is powered off before the import operation and the shutdown\n\t\t\ttype is set to \"Forced\" or \"NoReboot\", the import operation will occur immediately and the server will not be powered\n\t\t\tback on after the import is completed.\n"
                }
            },
            "requiredInputs": [
                "shareParameters"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdracServerConfigurationProfileImport resources.\n",
                "properties": {
                    "hostPowerState": {
                        "type": "string",
                        "description": "Host Power State. This attribute allows you to specify the power state of the host when the\n\t\t\tiDRAC is performing the import operation. Accepted values are: \"On\" or \"Off\". If this attribute is not specified\n\t\t\tor is set to \"On\", the host is powered on before the import operation. If it is set to \"Off\", the host is powered\n\t\t\toff before the import operation. Note that the host will be powered back on after the import is completed.\n"
                    },
                    "importBuffer": {
                        "type": "string",
                        "description": "Buffer content to perform Import.This is only required for localstore and is not applicable for CIFS/NFS style Import. If the import buffer is empty, then it will perform the import from the source path specified in share parameters.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportRedfishServer:IdracServerConfigurationProfileImportRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "shareParameters": {
                        "$ref": "#/types/redfish:index/IdracServerConfigurationProfileImportShareParameters:IdracServerConfigurationProfileImportShareParameters",
                        "description": "Share Parameters\n"
                    },
                    "shutdownType": {
                        "type": "string",
                        "description": "Shutdown Type. This attribute specifies the type of shutdown that should be performed before importing the server configuration profile. Accepted values are: \"Graceful\" (default), \"Forced\", or \"NoReboot\". If set to \"Graceful\", the server will be gracefully shut down before the import. If set to \"Forced\", the server will be forcefully shut down before the import. If set to \"NoReboot\", the server will not be restarted after the import. Note that if the server is powered off before the import operation, it will not be powered back on after the import is completed. If the server is powered on before the import operation, it will be powered off during the import process if this attribute is set to \"Forced\" or \"NoReboot\", and will be powered back on after the import is completed if this attribute is set to \"Graceful\" or \"NoReboot\".\n"
                    },
                    "timeToWait": {
                        "type": "number",
                        "description": "Time To Wait (in seconds) - specifies the time to wait for the server configuration profile\n\t\t\tto be imported. This is useful for ensuring that the server is powered off before the import operation, and for waiting\n\t\t\tfor the import to complete before powering the server back on. The default value is 1200 seconds (or 20 minutes), but can\n\t\t\tbe set to a lower value of 300 seconds (or 5 minutes) upto a max value of 3600 seconds (or 60 minutes) if desired. Note\n\t\t\tthat this attribute only applies if the server is powered on before the import operation, or if the server is powered off\n\t\t\tbefore the import operation and the shutdown type is set to \"Graceful\" or \"NoReboot\". The minimum value is 300 seconds, and\n\t\t\tthe maximum value is 3600 seconds (or 1 hour). If the server is powered off before the import operation and the shutdown\n\t\t\ttype is set to \"Forced\" or \"NoReboot\", the import operation will occur immediately and the server will not be powered\n\t\t\tback on after the import is completed.\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/managerReset:ManagerReset": {
            "properties": {
                "managerResetId": {
                    "type": "string",
                    "description": "The value of the Id property of the Manager resource\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/ManagerResetRedfishServer:ManagerResetRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "The type of the reset operation to be performed. Accepted value: GracefulRestart\n"
                }
            },
            "required": [
                "managerResetId",
                "resetType"
            ],
            "inputProperties": {
                "managerResetId": {
                    "type": "string",
                    "description": "The value of the Id property of the Manager resource\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/ManagerResetRedfishServer:ManagerResetRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "The type of the reset operation to be performed. Accepted value: GracefulRestart\n"
                }
            },
            "requiredInputs": [
                "managerResetId",
                "resetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagerReset resources.\n",
                "properties": {
                    "managerResetId": {
                        "type": "string",
                        "description": "The value of the Id property of the Manager resource\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/ManagerResetRedfishServer:ManagerResetRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "The type of the reset operation to be performed. Accepted value: GracefulRestart\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/networkAdapter:NetworkAdapter": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nsystem_id is optional. If system_id is not provided, the resource picks the first one from system resources returned by the iDRAC.\n\n```sh\n$ pulumi import redfish:index/networkAdapter:NetworkAdapter nic '{\"network_adapter_id\":\"\u003cnetwork_adapter_id\u003e\",\"network_device_function_id\":\"\u003cnetwork_device_function_id\u003e\",\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\n```sh\n$ pulumi import redfish:index/networkAdapter:NetworkAdapter with system_id.\n```\n\n```sh\n$ pulumi import redfish:index/networkAdapter:NetworkAdapter nic '{\"system_id\":\"\u003csystem_id\u003e\",\"network_adapter_id\":\"\u003cnetwork_adapter_id\u003e\",\"network_device_function_id\":\"\u003cnetwork_device_function_id\u003e\",\"username\":\"\u003cuser\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\n```sh\n$ pulumi import redfish:index/networkAdapter:NetworkAdapter with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/networkAdapter:NetworkAdapter nic '{\"network_adapter_id\":\"\u003cnetwork_adapter_id\u003e\",\"network_device_function_id\":\"\u003cnetwork_device_function_id\u003e\",\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n1. This will import the Sever NIC configuration into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "applyTime": {
                    "type": "string",
                    "description": "Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`.\n"
                },
                "jobTimeout": {
                    "type": "number",
                    "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/redfish:index/NetworkAdapterMaintenanceWindow:NetworkAdapterMaintenanceWindow",
                    "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                },
                "networkAdapterId": {
                    "type": "string",
                    "description": "ID of the network adapter\n"
                },
                "networkAttributes": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributes:NetworkAdapterNetworkAttributes",
                    "description": "Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes please either use the datasource for dell nic attributes: data.redfish*network or query /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings. Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.NOTE: Updating network*attributes property may result with an error stating the property is Read-only. This may occur if Patch method is performed to change the property to the state that the property is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a Read-only attribute.\n"
                },
                "networkDeviceFunctionId": {
                    "type": "string",
                    "description": "ID of the network device function\n"
                },
                "oemNetworkAttributes": {
                    "$ref": "#/types/redfish:index/NetworkAdapterOemNetworkAttributes:NetworkAdapterOemNetworkAttributes",
                    "description": "oem*network*attributes to configure dell network attributes and clear pending action. (Update Supported) Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/NetworkAdapterRedfishServer:NetworkAdapterRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                }
            },
            "required": [
                "applyTime",
                "jobTimeout",
                "networkAdapterId",
                "networkAttributes",
                "networkDeviceFunctionId",
                "oemNetworkAttributes",
                "resetTimeout",
                "resetType",
                "systemId"
            ],
            "inputProperties": {
                "applyTime": {
                    "type": "string",
                    "description": "Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`.\n"
                },
                "jobTimeout": {
                    "type": "number",
                    "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/redfish:index/NetworkAdapterMaintenanceWindow:NetworkAdapterMaintenanceWindow",
                    "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                },
                "networkAdapterId": {
                    "type": "string",
                    "description": "ID of the network adapter\n"
                },
                "networkAttributes": {
                    "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributes:NetworkAdapterNetworkAttributes",
                    "description": "Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes please either use the datasource for dell nic attributes: data.redfish*network or query /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings. Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.NOTE: Updating network*attributes property may result with an error stating the property is Read-only. This may occur if Patch method is performed to change the property to the state that the property is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a Read-only attribute.\n"
                },
                "networkDeviceFunctionId": {
                    "type": "string",
                    "description": "ID of the network device function\n"
                },
                "oemNetworkAttributes": {
                    "$ref": "#/types/redfish:index/NetworkAdapterOemNetworkAttributes:NetworkAdapterOemNetworkAttributes",
                    "description": "oem*network*attributes to configure dell network attributes and clear pending action. (Update Supported) Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/NetworkAdapterRedfishServer:NetworkAdapterRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                }
            },
            "requiredInputs": [
                "applyTime",
                "networkAdapterId",
                "networkDeviceFunctionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkAdapter resources.\n",
                "properties": {
                    "applyTime": {
                        "type": "string",
                        "description": "Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`.\n"
                    },
                    "jobTimeout": {
                        "type": "number",
                        "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/redfish:index/NetworkAdapterMaintenanceWindow:NetworkAdapterMaintenanceWindow",
                        "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                    },
                    "networkAdapterId": {
                        "type": "string",
                        "description": "ID of the network adapter\n"
                    },
                    "networkAttributes": {
                        "$ref": "#/types/redfish:index/NetworkAdapterNetworkAttributes:NetworkAdapterNetworkAttributes",
                        "description": "Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes please either use the datasource for dell nic attributes: data.redfish*network or query /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings. Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.NOTE: Updating network*attributes property may result with an error stating the property is Read-only. This may occur if Patch method is performed to change the property to the state that the property is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a Read-only attribute.\n"
                    },
                    "networkDeviceFunctionId": {
                        "type": "string",
                        "description": "ID of the network device function\n"
                    },
                    "oemNetworkAttributes": {
                        "$ref": "#/types/redfish:index/NetworkAdapterOemNetworkAttributes:NetworkAdapterOemNetworkAttributes",
                        "description": "oem*network*attributes to configure dell network attributes and clear pending action. (Update Supported) Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network*attributes or oem*network*attributes at a time.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/NetworkAdapterRedfishServer:NetworkAdapterRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/power:Power": {
            "properties": {
                "checkInterval": {
                    "type": "number",
                    "description": "The frequency with which to check the server's power state in seconds\n"
                },
                "desiredPowerAction": {
                    "type": "string",
                    "description": "Desired power setting. Applicable values are 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'\n"
                },
                "maximumWaitTime": {
                    "type": "number",
                    "description": "The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds\n"
                },
                "powerState": {
                    "type": "string",
                    "description": "Desired power setting. Applicable values 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'.\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/PowerRedfishServer:PowerRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "required": [
                "checkInterval",
                "desiredPowerAction",
                "maximumWaitTime",
                "powerState",
                "systemId"
            ],
            "inputProperties": {
                "checkInterval": {
                    "type": "number",
                    "description": "The frequency with which to check the server's power state in seconds\n"
                },
                "desiredPowerAction": {
                    "type": "string",
                    "description": "Desired power setting. Applicable values are 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'\n"
                },
                "maximumWaitTime": {
                    "type": "number",
                    "description": "The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/PowerRedfishServer:PowerRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                }
            },
            "requiredInputs": [
                "desiredPowerAction"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Power resources.\n",
                "properties": {
                    "checkInterval": {
                        "type": "number",
                        "description": "The frequency with which to check the server's power state in seconds\n"
                    },
                    "desiredPowerAction": {
                        "type": "string",
                        "description": "Desired power setting. Applicable values are 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'\n"
                    },
                    "maximumWaitTime": {
                        "type": "number",
                        "description": "The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "Desired power setting. Applicable values 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/PowerRedfishServer:PowerRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/simpleUpdate:SimpleUpdate": {
            "properties": {
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/SimpleUpdateRedfishServer:SimpleUpdateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "simpleUpdateJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the simple update job to be completed before timing out.\n"
                },
                "softwareId": {
                    "type": "string",
                    "description": "Software ID from the firmware package uploaded\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "targetFirmwareImage": {
                    "type": "string",
                    "description": "Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in the same folder as the module and set it as follows: \"${path.module}/BIOS*FXC54*WN64_1.15.0.EXE\"\n"
                },
                "transferProtocol": {
                    "type": "string",
                    "description": "The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS. Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Software version from the firmware package uploaded\n"
                }
            },
            "required": [
                "resetTimeout",
                "resetType",
                "simpleUpdateJobTimeout",
                "softwareId",
                "systemId",
                "targetFirmwareImage",
                "transferProtocol",
                "version"
            ],
            "inputProperties": {
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/SimpleUpdateRedfishServer:SimpleUpdateRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                },
                "simpleUpdateJobTimeout": {
                    "type": "number",
                    "description": "Time in seconds that the provider waits for the simple update job to be completed before timing out.\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "targetFirmwareImage": {
                    "type": "string",
                    "description": "Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in the same folder as the module and set it as follows: \"${path.module}/BIOS*FXC54*WN64_1.15.0.EXE\"\n"
                },
                "transferProtocol": {
                    "type": "string",
                    "description": "The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS. Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.\n"
                }
            },
            "requiredInputs": [
                "resetType",
                "targetFirmwareImage",
                "transferProtocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SimpleUpdate resources.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/SimpleUpdateRedfishServer:SimpleUpdateRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the server to be reset before timing out.\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are: \"ForceRestart\", \"GracefulRestart\" or \"PowerCycle\"\n"
                    },
                    "simpleUpdateJobTimeout": {
                        "type": "number",
                        "description": "Time in seconds that the provider waits for the simple update job to be completed before timing out.\n"
                    },
                    "softwareId": {
                        "type": "string",
                        "description": "Software ID from the firmware package uploaded\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    },
                    "targetFirmwareImage": {
                        "type": "string",
                        "description": "Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in the same folder as the module and set it as follows: \"${path.module}/BIOS*FXC54*WN64_1.15.0.EXE\"\n"
                    },
                    "transferProtocol": {
                        "type": "string",
                        "description": "The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS. Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Software version from the firmware package uploaded\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/storageController:StorageController": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nsystem_id is optional. If system_id is not provided, the resource picks the first one from system resources returned by the iDRAC.\n\n```sh\n$ pulumi import redfish:index/storageController:StorageController storage_controller_example '{\"storage_id\":\"\u003cstorage_id\u003e\",\"controller_id\":\"\u003ccontroller_id\u003e\",\"username\":\"\u003cusername\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\n```sh\n$ pulumi import redfish:index/storageController:StorageController with system_id\n```\n\n```sh\n$ pulumi import redfish:index/storageController:StorageController storage_controller_example '{\"system_id\":\"\u003csystem_id\u003e\",\"storage_id\":\"\u003cstorage_id\u003e\",\"controller_id\":\"\u003ccontroller_id\u003e\",\"username\":\"\u003cusername\u003e\",\"password\":\"\u003cpassword\u003e\",\"endpoint\":\"\u003cendpoint\u003e\",\"ssl_insecure\":\u003ctrue/false\u003e}'\n```\n\n```sh\n$ pulumi import redfish:index/storageController:StorageController with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/storageController:StorageController storage_controller_example '{\"storage_id\":\"\u003cstorage_id\u003e\",\"controller_id\":\"\u003ccontroller_id\u003e\",\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n1. This will import the Storage Controller configuration into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "applyTime": {
                    "type": "string",
                    "description": "Apply time of the storage controller attributes. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`. When updating `controller_mode`, ensure that the `apply_time` is `OnReset`. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "controllerId": {
                    "type": "string",
                    "description": "ID of the storage controller\n"
                },
                "jobTimeout": {
                    "type": "number",
                    "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/redfish:index/StorageControllerMaintenanceWindow:StorageControllerMaintenanceWindow",
                    "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/StorageControllerRedfishServer:StorageControllerRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                },
                "security": {
                    "$ref": "#/types/redfish:index/StorageControllerSecurity:StorageControllerSecurity",
                    "description": "This consists of the attributes to configure the security of the storage controller. Please update any one out of `security` and `storage_controller` at a time. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`. When updating `controller_mode` to `HBA`, ensure that the security key is not present.\n"
                },
                "storageController": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageController:StorageControllerStorageController",
                    "description": "This consists of the attributes to configure the storage controller. Please update any one out of `storage_controller` and `security` at a time.\n"
                },
                "storageId": {
                    "type": "string",
                    "description": "ID of the storage\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                }
            },
            "required": [
                "applyTime",
                "controllerId",
                "jobTimeout",
                "resetTimeout",
                "resetType",
                "security",
                "storageController",
                "storageId",
                "systemId"
            ],
            "inputProperties": {
                "applyTime": {
                    "type": "string",
                    "description": "Apply time of the storage controller attributes. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`. When updating `controller_mode`, ensure that the `apply_time` is `OnReset`. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "controllerId": {
                    "type": "string",
                    "description": "ID of the storage controller\n"
                },
                "jobTimeout": {
                    "type": "number",
                    "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/redfish:index/StorageControllerMaintenanceWindow:StorageControllerMaintenanceWindow",
                    "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/StorageControllerRedfishServer:StorageControllerRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                },
                "security": {
                    "$ref": "#/types/redfish:index/StorageControllerSecurity:StorageControllerSecurity",
                    "description": "This consists of the attributes to configure the security of the storage controller. Please update any one out of `security` and `storage_controller` at a time. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`. When updating `controller_mode` to `HBA`, ensure that the security key is not present.\n"
                },
                "storageController": {
                    "$ref": "#/types/redfish:index/StorageControllerStorageController:StorageControllerStorageController",
                    "description": "This consists of the attributes to configure the storage controller. Please update any one out of `storage_controller` and `security` at a time.\n"
                },
                "storageId": {
                    "type": "string",
                    "description": "ID of the storage\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                }
            },
            "requiredInputs": [
                "applyTime",
                "controllerId",
                "storageId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageController resources.\n",
                "properties": {
                    "applyTime": {
                        "type": "string",
                        "description": "Apply time of the storage controller attributes. (Update Supported)Accepted values: `Immediate`, `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot the host and apply the changes. OnReset: allows the user to apply the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset but within the maintenance window as specified in `maintenance_window`. When updating `controller_mode`, ensure that the `apply_time` is `OnReset`. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`.\n"
                    },
                    "controllerId": {
                        "type": "string",
                        "description": "ID of the storage controller\n"
                    },
                    "jobTimeout": {
                        "type": "number",
                        "description": "`job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate` or `OnReset`.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/redfish:index/StorageControllerMaintenanceWindow:StorageControllerMaintenanceWindow",
                        "description": "This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/StorageControllerRedfishServer:StorageControllerRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Reset Timeout. Default value is 120 seconds. (Update Supported)\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is `ForceRestart`.\n"
                    },
                    "security": {
                        "$ref": "#/types/redfish:index/StorageControllerSecurity:StorageControllerSecurity",
                        "description": "This consists of the attributes to configure the security of the storage controller. Please update any one out of `security` and `storage_controller` at a time. When updating `security`, ensure that the `apply_time` is `Immediate` or `OnReset`. When updating `controller_mode` to `HBA`, ensure that the security key is not present.\n"
                    },
                    "storageController": {
                        "$ref": "#/types/redfish:index/StorageControllerStorageController:StorageControllerStorageController",
                        "description": "This consists of the attributes to configure the storage controller. Please update any one out of `storage_controller` and `security` at a time.\n"
                    },
                    "storageId": {
                        "type": "string",
                        "description": "ID of the storage\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "ID of the system resource. If the value for system ID is not provided, the resource picks the first system available from the iDRAC.\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/storageVolume:StorageVolume": {
            "description": "\n\n## Import\n\n\"/redfish/v1/Systems/System.Embedded.1/Storage/\u003cstorage controller ID\u003e/Volumes/\"\n\nEg. redfish/v1/Systems/System.Embedded.1/Storage/RAID.Integrated.1-1/Volumes/\n\nThe ID of any storage controller on the iDRAC, in turn, can be fetched using the \"redfish_storage\" data source\n\n/*\n\nCopyright (c) 2021-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\n```sh\n$ pulumi import redfish:index/storageVolume:StorageVolume volume \"{\\\"id\\\":\\\"\u003codata id of the volume\u003e\\\",\\\"username\\\":\\\"\u003cusername\u003e\\\",\\\"password\\\":\\\"\u003cpassword\u003e\\\",\\\"endpoint\\\":\\\"\u003cendpoint\u003e\\\",\\\"ssl_insecure\\\":\u003ctrue/false\u003e}\"\n```\n\n```sh\n$ pulumi import redfish:index/storageVolume:StorageVolume with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/storageVolume:StorageVolume volume \"{\\\"id\\\":\\\"\u003codata id of the volume\u003e\\\",\\\"redfish_alias\\\":\\\"\u003credfish_alias\u003e\\\"}\"\n```\n\n1. This will import the storage volume instance with specified ID into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "capacityBytes": {
                    "type": "number",
                    "description": "Capacity Bytes\n"
                },
                "diskCachePolicy": {
                    "type": "string",
                    "description": "Disk Cache Policy\n"
                },
                "drives": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Drives\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above\n"
                },
                "optimumIoSizeBytes": {
                    "type": "number",
                    "description": "Optimum Io Size Bytes\n"
                },
                "raidType": {
                    "type": "string",
                    "description": "Raid Type, Defaults to RAID0\n"
                },
                "readCachePolicy": {
                    "type": "string",
                    "description": "Read Cache Policy\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/StorageVolumeRedfishServer:StorageVolumeRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type\n"
                },
                "settingsApplyTime": {
                    "type": "string",
                    "description": "Settings Apply Time\n"
                },
                "storageControllerId": {
                    "type": "string",
                    "description": "Storage Controller ID\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "volumeJobTimeout": {
                    "type": "number",
                    "description": "Volume Job Timeout\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "Volume Name\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume Type\n",
                    "deprecationMessage": "Deprecated"
                },
                "writeCachePolicy": {
                    "type": "string",
                    "description": "Write Cache Policy\n"
                }
            },
            "required": [
                "diskCachePolicy",
                "drives",
                "encrypted",
                "raidType",
                "readCachePolicy",
                "resetTimeout",
                "resetType",
                "settingsApplyTime",
                "storageControllerId",
                "systemId",
                "volumeJobTimeout",
                "volumeName",
                "writeCachePolicy"
            ],
            "inputProperties": {
                "capacityBytes": {
                    "type": "number",
                    "description": "Capacity Bytes\n"
                },
                "diskCachePolicy": {
                    "type": "string",
                    "description": "Disk Cache Policy\n"
                },
                "drives": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Drives\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above\n"
                },
                "optimumIoSizeBytes": {
                    "type": "number",
                    "description": "Optimum Io Size Bytes\n"
                },
                "raidType": {
                    "type": "string",
                    "description": "Raid Type, Defaults to RAID0\n"
                },
                "readCachePolicy": {
                    "type": "string",
                    "description": "Read Cache Policy\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/StorageVolumeRedfishServer:StorageVolumeRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "resetTimeout": {
                    "type": "number",
                    "description": "Reset Timeout\n"
                },
                "resetType": {
                    "type": "string",
                    "description": "Reset Type\n"
                },
                "settingsApplyTime": {
                    "type": "string",
                    "description": "Settings Apply Time\n"
                },
                "storageControllerId": {
                    "type": "string",
                    "description": "Storage Controller ID\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "volumeJobTimeout": {
                    "type": "number",
                    "description": "Volume Job Timeout\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "Volume Name\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume Type\n",
                    "deprecationMessage": "Deprecated"
                },
                "writeCachePolicy": {
                    "type": "string",
                    "description": "Write Cache Policy\n"
                }
            },
            "requiredInputs": [
                "drives",
                "storageControllerId",
                "volumeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageVolume resources.\n",
                "properties": {
                    "capacityBytes": {
                        "type": "number",
                        "description": "Capacity Bytes\n"
                    },
                    "diskCachePolicy": {
                        "type": "string",
                        "description": "Disk Cache Policy\n"
                    },
                    "drives": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Drives\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above\n"
                    },
                    "optimumIoSizeBytes": {
                        "type": "number",
                        "description": "Optimum Io Size Bytes\n"
                    },
                    "raidType": {
                        "type": "string",
                        "description": "Raid Type, Defaults to RAID0\n"
                    },
                    "readCachePolicy": {
                        "type": "string",
                        "description": "Read Cache Policy\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/StorageVolumeRedfishServer:StorageVolumeRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "resetTimeout": {
                        "type": "number",
                        "description": "Reset Timeout\n"
                    },
                    "resetType": {
                        "type": "string",
                        "description": "Reset Type\n"
                    },
                    "settingsApplyTime": {
                        "type": "string",
                        "description": "Settings Apply Time\n"
                    },
                    "storageControllerId": {
                        "type": "string",
                        "description": "Storage Controller ID\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    },
                    "volumeJobTimeout": {
                        "type": "number",
                        "description": "Volume Job Timeout\n"
                    },
                    "volumeName": {
                        "type": "string",
                        "description": "Volume Name\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Volume Type\n",
                        "deprecationMessage": "Deprecated"
                    },
                    "writeCachePolicy": {
                        "type": "string",
                        "description": "Write Cache Policy\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/userAccount:UserAccount": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2021-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\n```sh\n$ pulumi import redfish:index/userAccount:UserAccount rr \"{\\\"id\\\":\\\"\u003cid\u003e\\\",\\\"username\\\":\\\"\u003cusername\u003e\\\",\\\"password\\\":\\\"\u003cpassword\u003e\\\",\\\"endpoint\\\":\\\"\u003cendpoint\u003e\\\",\\\"ssl_insecure\\\":\u003ctrue/false\u003e}\"\n```\n\n```sh\n$ pulumi import redfish:index/userAccount:UserAccount with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/userAccount:UserAccount rr \"{\\\"id\\\":\\\"\u003cid\u003e\\\",\\\"redfish_alias\\\":\\\"\u003credfish_alias\u003e\\\"}\"\n```\n\n1. This will import the user instance with specified ID into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the user is currently active or not.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user\n",
                    "secret": true
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/UserAccountRedfishServer:UserAccountRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "Role of the user. Applicable values are 'Operator', 'Administrator', 'None', and 'ReadOnly'. Default is \"None\"\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user. Cannot be updated.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user\n"
                }
            },
            "required": [
                "enabled",
                "password",
                "roleId",
                "userId",
                "username"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the user is currently active or not.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user\n",
                    "secret": true
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/UserAccountRedfishServer:UserAccountRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "Role of the user. Applicable values are 'Operator', 'Administrator', 'None', and 'ReadOnly'. Default is \"None\"\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user. Cannot be updated.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user\n"
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserAccount resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "If the user is currently active or not.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user\n",
                        "secret": true
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/UserAccountRedfishServer:UserAccountRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "Role of the user. Applicable values are 'Operator', 'Administrator', 'None', and 'ReadOnly'. Default is \"None\"\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user. Cannot be updated.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/userAccountPassword:UserAccountPassword": {
            "description": "## Example Usage\n\nprovider.tf\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nmain.tf\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redfish from \"@pulumi/redfish\";\n\nconst root = new redfish.UserAccountPassword(\"root\", {\n    endpoint: \"https://my-server-1.myawesomecompany.org\",\n    newPassword: \"Root@1234\",\n    oldPassword: \"Test@1234\",\n    sslInsecure: false,\n    username: \"root\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redfish as redfish\n\nroot = redfish.UserAccountPassword(\"root\",\n    endpoint=\"https://my-server-1.myawesomecompany.org\",\n    new_password=\"Root@1234\",\n    old_password=\"Test@1234\",\n    ssl_insecure=False,\n    username=\"root\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redfish = Pulumi.Redfish;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var root = new Redfish.UserAccountPassword(\"root\", new()\n    {\n        Endpoint = \"https://my-server-1.myawesomecompany.org\",\n        NewPassword = \"Root@1234\",\n        OldPassword = \"Test@1234\",\n        SslInsecure = false,\n        Username = \"root\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-terraform-provider/sdks/go/redfish/redfish\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redfish.NewUserAccountPassword(ctx, \"root\", \u0026redfish.UserAccountPasswordArgs{\n\t\t\tEndpoint:    pulumi.String(\"https://my-server-1.myawesomecompany.org\"),\n\t\t\tNewPassword: pulumi.String(\"Root@1234\"),\n\t\t\tOldPassword: pulumi.String(\"Test@1234\"),\n\t\t\tSslInsecure: pulumi.Bool(false),\n\t\t\tUsername:    pulumi.String(\"root\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redfish.UserAccountPassword;\nimport com.pulumi.redfish.UserAccountPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var root = new UserAccountPassword(\"root\", UserAccountPasswordArgs.builder()\n            .endpoint(\"https://my-server-1.myawesomecompany.org\")\n            .newPassword(\"Root@1234\")\n            .oldPassword(\"Test@1234\")\n            .sslInsecure(false)\n            .username(\"root\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  root:\n    type: redfish:UserAccountPassword\n    properties:\n      endpoint: https://my-server-1.myawesomecompany.org\n      newPassword: Root@1234\n      oldPassword: Test@1234\n      sslInsecure: false\n      username: root\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nAfter successful execution of the above resource block, the password of the 'root'/'admin' user will be updated to new password.\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the iDRAC.\n"
                },
                "newPassword": {
                    "type": "string",
                    "description": "New Password of the user for login\n"
                },
                "oldPassword": {
                    "type": "string",
                    "description": "Old/current password of the user to be updated\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user\n"
                }
            },
            "required": [
                "endpoint",
                "newPassword",
                "oldPassword",
                "sslInsecure"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the iDRAC.\n"
                },
                "newPassword": {
                    "type": "string",
                    "description": "New Password of the user for login\n"
                },
                "oldPassword": {
                    "type": "string",
                    "description": "Old/current password of the user to be updated\n"
                },
                "sslInsecure": {
                    "type": "boolean",
                    "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "newPassword",
                "oldPassword"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserAccountPassword resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the iDRAC.\n"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "New Password of the user for login\n"
                    },
                    "oldPassword": {
                        "type": "string",
                        "description": "Old/current password of the user to be updated\n"
                    },
                    "sslInsecure": {
                        "type": "boolean",
                        "description": "This field indicates whether the SSL/TLS certificate must be verified or not\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "redfish:index/virtualMedia:VirtualMedia": {
            "description": "\n\n## Import\n\n/*\n\nCopyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.\n\nLicensed under the Mozilla Public License Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n    http://mozilla.org/MPL/2.0/\n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n*/\n\nThe synatx is:\n\n```sh\n$ pulumi import redfish:index/virtualMedia:VirtualMedia media \"{\\\"id\\\":\\\"\u003codata id of the virtual media\u003e\\\",\\\"username\\\":\\\"\u003cusername\u003e\\\",\\\"password\\\":\\\"\u003cpassword\u003e\\\",\\\"endpoint\\\":\\\"\u003cendpoint\u003e\\\",\\\"ssl_insecure\\\":\u003ctrue/false\u003e}\"\n```\n\n```sh\n$ pulumi import redfish:index/virtualMedia:VirtualMedia media '{\"id\":\"/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD\",\"username\":\"admin\",\"password\":\"passw0rd\",\"endpoint\":\"https://my-server-1.myawesomecompany.org\",\"ssl_insecure\":true}'\n```\n\n```sh\n$ pulumi import redfish:index/virtualMedia:VirtualMedia with redfish_alias. When using redfish_alias, provider's `redfish_servers` is required.\n```\n\nredfish_alias is used to align with enhancements to password management.\n\n```sh\n$ pulumi import redfish:index/virtualMedia:VirtualMedia media '{\"id\":\"/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD\",\"redfish_alias\":\"\u003credfish_alias\u003e\"}'\n```\n\n1. This will import the virtual media instance with specified ID into your Terraform state.\n\n2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.\n\n3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.\n\n4. Execute pulumi preview to see if your configuration and the imported resource are in sync. Make adjustments if needed.\n\n5. Finally, execute pulumi up to bring the resource fully under Terraform's management.\n\n6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.\n\n",
            "properties": {
                "image": {
                    "type": "string",
                    "description": "The URI of the remote media to attach to the virtual media\n"
                },
                "inserted": {
                    "type": "boolean",
                    "description": "Describes whether virtual media is attached or detached\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/VirtualMediaRedfishServer:VirtualMediaRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "transferMethod": {
                    "type": "string",
                    "description": "Indicates how the data is transferred\n"
                },
                "transferProtocolType": {
                    "type": "string",
                    "description": "The protocol used to transfer.\n"
                },
                "writeProtected": {
                    "type": "boolean",
                    "description": "Indicates whether the remote device media prevents writing to that media.\n"
                }
            },
            "required": [
                "image",
                "inserted",
                "systemId",
                "transferMethod",
                "transferProtocolType",
                "writeProtected"
            ],
            "inputProperties": {
                "image": {
                    "type": "string",
                    "description": "The URI of the remote media to attach to the virtual media\n"
                },
                "redfishServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redfish:index/VirtualMediaRedfishServer:VirtualMediaRedfishServer"
                    },
                    "description": "List of server BMCs and their respective user credentials\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "System ID of the system\n"
                },
                "transferMethod": {
                    "type": "string",
                    "description": "Indicates how the data is transferred\n"
                },
                "transferProtocolType": {
                    "type": "string",
                    "description": "The protocol used to transfer.\n"
                },
                "writeProtected": {
                    "type": "boolean",
                    "description": "Indicates whether the remote device media prevents writing to that media.\n"
                }
            },
            "requiredInputs": [
                "image"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMedia resources.\n",
                "properties": {
                    "image": {
                        "type": "string",
                        "description": "The URI of the remote media to attach to the virtual media\n"
                    },
                    "inserted": {
                        "type": "boolean",
                        "description": "Describes whether virtual media is attached or detached\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/VirtualMediaRedfishServer:VirtualMediaRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    },
                    "transferMethod": {
                        "type": "string",
                        "description": "Indicates how the data is transferred\n"
                    },
                    "transferProtocolType": {
                        "type": "string",
                        "description": "The protocol used to transfer.\n"
                    },
                    "writeProtected": {
                        "type": "boolean",
                        "description": "Indicates whether the remote device media prevents writing to that media.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "redfish:index/getBios:getBios": {
            "inputs": {
                "description": "A collection of arguments for invoking getBios.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getBiosRedfishServer:getBiosRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBios.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "BIOS attributes.\n"
                    },
                    "bootOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getBiosBootOption:getBiosBootOption"
                        },
                        "description": "List of BIOS boot options.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the BIOS data-source\n"
                    },
                    "odataId": {
                        "type": "string",
                        "description": "OData ID of the BIOS data-source\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getBiosRedfishServer:getBiosRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object",
                "required": [
                    "attributes",
                    "bootOptions",
                    "id",
                    "odataId",
                    "systemId"
                ]
            }
        },
        "redfish:index/getDellIdracAttributes:getDellIdracAttributes": {
            "inputs": {
                "description": "A collection of arguments for invoking getDellIdracAttributes.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getDellIdracAttributesRedfishServer:getDellIdracAttributesRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDellIdracAttributes.\n",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "iDRAC attributes. To check allowed attributes please either use the datasource for dell idrac attributes or query /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/DellAttributes/iDRAC.Embedded.1. To get allowed values for those attributes, check /redfish/v1/Registries/ManagerAttributeRegistry/ManagerAttributeRegistry.v1*0*0.json from a Redfish Instance\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the iDRAC attributes resource\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getDellIdracAttributesRedfishServer:getDellIdracAttributesRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object",
                "required": [
                    "attributes",
                    "id"
                ]
            }
        },
        "redfish:index/getDirectoryServiceAuthProvider:getDirectoryServiceAuthProvider": {
            "inputs": {
                "description": "A collection of arguments for invoking getDirectoryServiceAuthProvider.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderRedfishServer:getDirectoryServiceAuthProviderRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDirectoryServiceAuthProvider.\n",
                "properties": {
                    "activeDirectoryAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "ActiveDirectory.* attributes in Dell iDRAC attributes.\n"
                    },
                    "directoryServiceAuthProvider": {
                        "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderDirectoryServiceAuthProvider:getDirectoryServiceAuthProviderDirectoryServiceAuthProvider",
                        "description": "Directory Service Auth Provider Attributes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the Directory Service Auth Provider data-source\n"
                    },
                    "ldapAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "LDAP.* attributes in Dell iDRAC attributes.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getDirectoryServiceAuthProviderRedfishServer:getDirectoryServiceAuthProviderRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object",
                "required": [
                    "activeDirectoryAttributes",
                    "directoryServiceAuthProvider",
                    "id",
                    "ldapAttributes"
                ]
            }
        },
        "redfish:index/getFirmwareInventory:getFirmwareInventory": {
            "inputs": {
                "description": "A collection of arguments for invoking getFirmwareInventory.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getFirmwareInventoryRedfishServer:getFirmwareInventoryRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirmwareInventory.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the Firmware Inventory data-source\n"
                    },
                    "inventories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getFirmwareInventoryInventory:getFirmwareInventoryInventory"
                        },
                        "description": "Firmware Inventory.\n"
                    },
                    "odataId": {
                        "type": "string",
                        "description": "OData ID of the Firmware Inventory data-source\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getFirmwareInventoryRedfishServer:getFirmwareInventoryRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "inventories",
                    "odataId"
                ]
            }
        },
        "redfish:index/getNetwork:getNetwork": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "nicFilter": {
                        "$ref": "#/types/redfish:index/getNetworkNicFilter:getNetworkNicFilter",
                        "description": "NIC filter for systems, nework adapters, network ports and network device functions\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getNetworkRedfishServer:getNetworkRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the network interface cards data-source\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getNetworkNetworkInterface:getNetworkNetworkInterface"
                        },
                        "description": "List of network interface cards(NIC) fetched.\n"
                    },
                    "nicAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "nic.* attributes in Dell iDRAC attributes.\n"
                    },
                    "nicFilter": {
                        "$ref": "#/types/redfish:index/getNetworkNicFilter:getNetworkNicFilter",
                        "description": "NIC filter for systems, nework adapters, network ports and network device functions\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getNetworkRedfishServer:getNetworkRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "networkInterfaces",
                    "nicAttributes"
                ]
            }
        },
        "redfish:index/getStorage:getStorage": {
            "inputs": {
                "description": "A collection of arguments for invoking getStorage.\n",
                "properties": {
                    "controllerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of the storage controllers to be fetched.\n"
                    },
                    "controllerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of names of the storage controller to be fetched.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageRedfishServer:getStorageRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStorage.\n",
                "properties": {
                    "controllerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of the storage controllers to be fetched.\n"
                    },
                    "controllerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of names of the storage controller to be fetched.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the storage data-source\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageRedfishServer:getStorageRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageStorage:getStorageStorage"
                        },
                        "description": "List of storage controllers fetched.\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the system\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "storages",
                    "systemId"
                ]
            }
        },
        "redfish:index/getStorageController:getStorageController": {
            "inputs": {
                "description": "A collection of arguments for invoking getStorageController.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageControllerRedfishServer:getStorageControllerRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "storageControllerFilter": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerFilter:getStorageControllerStorageControllerFilter",
                        "description": "Storage Controller filter for systems, storages and controllers\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStorageController.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the storage controller data-source.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageControllerRedfishServer:getStorageControllerRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "storageControllerFilter": {
                        "$ref": "#/types/redfish:index/getStorageControllerStorageControllerFilter:getStorageControllerStorageControllerFilter",
                        "description": "Storage Controller filter for systems, storages and controllers\n"
                    },
                    "storageControllers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getStorageControllerStorageController:getStorageControllerStorageController"
                        },
                        "description": "List of storage controllers fetched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "storageControllers"
                ]
            }
        },
        "redfish:index/getSystemBoot:getSystemBoot": {
            "inputs": {
                "description": "A collection of arguments for invoking getSystemBoot.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getSystemBootRedfishServer:getSystemBootRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the computer system. If not provided, the first system resource is used\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSystemBoot.\n",
                "properties": {
                    "bootOrders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of BootOptionReference strings that represent the persistent boot order for this computer system\n"
                    },
                    "bootSourceOverrideEnabled": {
                        "type": "string",
                        "description": "The state of the boot source override feature\n"
                    },
                    "bootSourceOverrideMode": {
                        "type": "string",
                        "description": "The BIOS boot mode to use when the system boots from the BootSourceOverrideTarget boot source\n"
                    },
                    "bootSourceOverrideTarget": {
                        "type": "string",
                        "description": "Current boot source to use at next boot instead of the normal boot device, if BootSourceOverrideEnabled is true\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Resource ID of the computer system used.\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getSystemBootRedfishServer:getSystemBootRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "systemId": {
                        "type": "string",
                        "description": "System ID of the computer system. If not provided, the first system resource is used\n"
                    },
                    "uefiTargetBootSourceOverride": {
                        "type": "string",
                        "description": "The UEFI device path of the device from which to boot when BootSourceOverrideTarget is UefiTarget\n"
                    }
                },
                "type": "object",
                "required": [
                    "bootOrders",
                    "bootSourceOverrideEnabled",
                    "bootSourceOverrideMode",
                    "bootSourceOverrideTarget",
                    "id",
                    "systemId",
                    "uefiTargetBootSourceOverride"
                ]
            }
        },
        "redfish:index/getVirtualMedia:getVirtualMedia": {
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMedia.\n",
                "properties": {
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getVirtualMediaRedfishServer:getVirtualMediaRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMedia.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the virtual media datasource\n"
                    },
                    "redfishServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getVirtualMediaRedfishServer:getVirtualMediaRedfishServer"
                        },
                        "description": "List of server BMCs and their respective user credentials\n"
                    },
                    "virtualMedia": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redfish:index/getVirtualMediaVirtualMedia:getVirtualMediaVirtualMedia"
                        },
                        "description": "List of virtual media available on this instance\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "virtualMedia"
                ]
            }
        }
    },
    "parameterization": {
        "baseProvider": {
            "name": "terraform-provider",
            "version": "0.0.0-dev"
        },
        "parameter": "eyJyZW1vdGUiOnsidXJsIjoicmVnaXN0cnkub3BlbnRvZnUub3JnL2RlbGwvcmVkZmlzaCIsInZlcnNpb24iOiIxLjUuMCJ9fQ=="
    }
}
env:
  GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}

name: Pull Request

on: [pull_request]

jobs:
  build:
    name: Build and Test Bridge
    strategy:
      matrix:
        # To avoid depending on features introduced in newer golang versions, we need to
        # test our minimum supported golang versions.
        #
        # When we decide to bump our minimum go version, we need to remember to bump the
        # go version in our go.mod files.
        go-version: [1.21.x, 1.22.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: ^3.0.0
      - name: Check out source code
        uses: actions/checkout@master
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: |
            **/go.sum
      - name: Build
        run: make build
      - name: Build PF
        run: cd pf && make build
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
            skip-cache: true
            skip-pkg-cache: true
            skip-build-cache: true
            version: v1.55
      - name: Lint
        run: make lint
      - name: Test
        run: make test
      - name: Test PF
        run: cd pf && make test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  downstream:
    name: Test ${{ matrix.provider }} (bridged)
    timeout-minutes: 240
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}
    strategy:
      matrix:
        provider: ["aws", "gcp", "azure", "azuread", "random"]
      fail-fast: false
    steps:
      - name: Trigger upgrade
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PULUMI_BOT_TOKEN }}
          repository: pulumi/pulumi-${{ matrix.provider }}
          event-type: upgrade-bridge
          client-payload: |-
            {
                "target-bridge-version": ${{ toJSON( github.event.pull_request.head.sha ) }},
                "pr-reviewers": ${{ toJSON( github.triggering_actor || 'VenelinMartinov' ) }},
                "pr-description": "This is a downstream bridge test for pulumi/pulumi-terraform-bridge#${{ github.event.pull_request.number }}. (run-id: ${{ github.run_id }})",
                "pr-title-prefix": "[DOWNSTREAM TEST][BRIDGE]",
                "automerge": false
            }
      - name: Await PR opened for pulumi-${{ matrix.provider }}
        run: |
          echo Await PR opened for pulumi-${{ matrix.provider }}
          until gh search prs --repo pulumi/pulumi-${{ matrix.provider }} --review-requested ${{ toJSON( github.triggering_actor || 'VenelinMartinov' ) }} --match body "This is a downstream bridge test for pulumi/pulumi-terraform-bridge#${{ github.event.pull_request.number }}. (run-id: ${{ github.run_id }})"  --json url | grep url; do sleep 30; done;
      - name: Await PR codegen tests succeed.
        run: |
          echo "Await PR opened for pulumi-${{ matrix.provider }}"
          number=$(gh search prs --repo pulumi/pulumi-${{ matrix.provider }} --review-requested ${{ toJSON( github.triggering_actor || 'VenelinMartinov' ) }} --match body "This is a downstream bridge test for pulumi/pulumi-terraform-bridge#${{ github.event.pull_request.number }}. (run-id: ${{ github.run_id }})"  --json number --jq '.[0].number')
          # Ensure that expected checks are pending before checking the status passes.
          # We use 'test' as all workflows have tests.
          until gh pr checks --repo "pulumi/pulumi-${{ matrix.provider }}" "$number" | grep 'test'; do sleep 30; done;
          gh pr checks --repo "pulumi/pulumi-${{ matrix.provider }}" "$number" --watch --fail-fast
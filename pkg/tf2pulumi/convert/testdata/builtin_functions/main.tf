# DO NOT EDIT BY HAND
# This file is auto generated by ./scripts/generate_builtins.py

locals {
    # A load of the examples in the docs use `path.module` which _should_ resolve to the file system path of #
    # the current module, but tf2pulumi doesn't support that so we replace it with local.path_module.
    path_module = "some/path"

    # Some of the examples in the docs use `path.root` which _should_ resolve to the file system path of the
    # root module of the configuration, but tf2pulumi doesn't support that so we replace it with local.path_root.
    path_root = "root/path"

    # The `can` examples make use of a local `foo`.
    foo = { "bar" = "baz" }

    # The `nonsensitive` examples make use of a local `mixed_content`.
    # We don't use jsondecode(var.mixed_content_json) here because we don't want to depend on the jsondecode function working.
    mixed_content = { "password" = "hunter2" }
}

# The `nonsensitive` examples make use of a variable `mixed_content_json`.
variable "mixed_content_json" {
    type = string
}

# The `format` examples make use of a variable `name`.
variable "name" {
    type = string
}

# The `matchkeys` example makes use of a resource with `count`.
resource "simple_resource" "a_resource_with_count" {
    count = 4
    input_one =  "Hello ${count.index}"
    input_two = true
}

#if EXPERIMENTAL

# Examples for abs
output "funcAbs0" {
  value = abs(23)
}
output "funcAbs1" {
  value = abs(0)
}
output "funcAbs2" {
  value = abs(-12.4)
}

#endif


#if EXPERIMENTAL

# Examples for abspath
output "funcAbspath" {
  value = abspath(local.path_root)
}

#endif


#if EXPERIMENTAL

# Examples for alltrue
output "funcAlltrue0" {
  value = alltrue(["true", true])
}
output "funcAlltrue1" {
  value = alltrue([true, false])
}

#endif


#if EXPERIMENTAL

# Examples for anytrue
output "funcAnytrue0" {
  value = anytrue(["true"])
}
output "funcAnytrue1" {
  value = anytrue([true])
}
output "funcAnytrue2" {
  value = anytrue([true, false])
}
output "funcAnytrue3" {
  value = anytrue([])
}

#endif


#if EXPERIMENTAL

# Examples for base64decode
output "funcBase64decode" {
  value = base64decode("SGVsbG8gV29ybGQ=")
}

#endif


#if EXPERIMENTAL

# Examples for base64encode
output "funcBase64encode" {
  value = base64encode("Hello World")
}

#endif


#if EXPERIMENTAL

# Examples for base64gzip
output "funcBase64gzip" {
  value = base64gzip("test")
}

#endif


#if EXPERIMENTAL

# Examples for base64sha256
output "funcBase64sha256" {
  value = base64sha256("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for base64sha512
output "funcBase64sha512" {
  value = base64sha512("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for basename
output "funcBasename" {
  value = basename("foo/bar/baz.txt")
}

#endif


#if EXPERIMENTAL

# Examples for bcrypt
output "funcBcrypt" {
  value = bcrypt("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for can
output "funcCan0" {
  value = local.foo
}
output "funcCan1" {
  value = can(local.foo.bar)
}
output "funcCan2" {
  value = can(local.foo.boop)
}
output "funcCan3" {
  value = can(local.nonexist)
}

#endif


#if EXPERIMENTAL

# Examples for ceil
output "funcCeil0" {
  value = ceil(5)
}
output "funcCeil1" {
  value = ceil(5.1)
}

#endif


#if EXPERIMENTAL

# Examples for chomp
output "funcChomp0" {
  value = chomp("hello\n")
}
output "funcChomp1" {
  value = chomp("hello\r\n")
}
output "funcChomp2" {
  value = chomp("hello\n\n")
}

#endif


#if EXPERIMENTAL

# Examples for chunklist
output "funcChunklist0" {
  value = chunklist(["a", "b", "c", "d", "e"], 2)
}
output "funcChunklist1" {
  value = chunklist(["a", "b", "c", "d", "e"], 1)
}

#endif


#if EXPERIMENTAL

# Examples for cidrhost
output "funcCidrhost0" {
  value = cidrhost("10.12.112.0/20", 16)
}
output "funcCidrhost1" {
  value = cidrhost("10.12.112.0/20", 268)
}
output "funcCidrhost2" {
  value = cidrhost("fd00:fd12:3456:7890:00a2::/72", 34)
}

#endif


#if EXPERIMENTAL

# Examples for cidrnetmask
output "funcCidrnetmask" {
  value = cidrnetmask("172.16.0.0/12")
}

#endif


#if EXPERIMENTAL

# Examples for cidrsubnet
output "funcCidrsubnet0" {
  value = cidrsubnet("172.16.0.0/12", 4, 2)
}
output "funcCidrsubnet1" {
  value = cidrsubnet("10.1.2.0/24", 4, 15)
}
output "funcCidrsubnet2" {
  value = cidrsubnet("fd00:fd12:3456:7890::/56", 16, 162)
}
output "funcCidrsubnet3" {
  value = cidrhost("10.1.2.240/28", 1)
}
output "funcCidrsubnet4" {
  value = cidrhost("10.1.2.240/28", 14)
}

#endif


#if EXPERIMENTAL

# Examples for cidrsubnets
output "funcCidrsubnets0" {
  value = cidrsubnets("10.1.0.0/16", 4, 4, 8, 4)
}
output "funcCidrsubnets1" {
  value = cidrsubnets("fd00:fd12:3456:7890::/56", 16, 16, 16, 32)
}
output "funcCidrsubnets2" {
  value = [for cidr_block in cidrsubnets("10.0.0.0/8", 8, 8, 8, 8) : cidrsubnets(cidr_block, 4, 4)]
}

#endif


#if EXPERIMENTAL

# Examples for coalesce
output "funcCoalesce0" {
  value = coalesce("a", "b")
}
output "funcCoalesce1" {
  value = coalesce("", "b")
}
output "funcCoalesce2" {
  value = coalesce(1,2)
}
output "funcCoalesce3" {
  value = coalesce(["", "b"]...)
}
output "funcCoalesce4" {
  value = coalesce(1, "hello")
}
output "funcCoalesce5" {
  value = coalesce(true, "hello")
}
output "funcCoalesce6" {
  value = coalesce({}, "hello")
}

#endif


#if EXPERIMENTAL

# Examples for coalescelist
output "funcCoalescelist0" {
  value = coalescelist(["a", "b"], ["c", "d"])
}
output "funcCoalescelist1" {
  value = coalescelist([], ["c", "d"])
}
output "funcCoalescelist2" {
  value = coalescelist([[], ["c", "d"]]...)
}

#endif


#if EXPERIMENTAL

# Examples for compact
output "funcCompact" {
  value = compact(["a", "", "b", null, "c"])
}

#endif


#if EXPERIMENTAL

# Examples for concat
output "funcConcat" {
  value = concat(["a", ""], ["b", "c"])
}

#endif


#if EXPERIMENTAL

# Examples for contains
output "funcContains0" {
  value = contains(["a", "b", "c"], "a")
}
output "funcContains1" {
  value = contains(["a", "b", "c"], "d")
}

#endif


#if EXPERIMENTAL

# Examples for csvdecode
output "funcCsvdecode" {
  value = csvdecode("a,b,c\n1,2,3\n4,5,6")
}

#endif


#if EXPERIMENTAL

# Examples for dirname
output "funcDirname" {
  value = dirname("foo/bar/baz.txt")
}

#endif


#if EXPERIMENTAL

# Examples for distinct
output "funcDistinct" {
  value = distinct(["a", "b", "a", "c", "d", "b"])
}

#endif


# Examples for element
output "funcElement0" {
  value = element(["a", "b", "c"], 1)
}
output "funcElement1" {
  value = element(["a", "b", "c"], 3)
}
output "funcElement2" {
  value = element(["a", "b", "c"], length(["a", "b", "c"])-1)
}


#if EXPERIMENTAL

# Examples for endswith
output "funcEndswith0" {
  value = endswith("hello world", "world")
}
output "funcEndswith1" {
  value = endswith("hello world", "hello")
}

#endif


# Examples for file
output "funcFile" {
  value = file("${local.path_module}/hello.txt")
}


# Examples for filebase64
output "funcFilebase64" {
  value = filebase64("${local.path_module}/hello.txt")
}


# Examples for filebase64sha256
output "funcFilebase64sha256" {
  value = filebase64sha256("hello.txt")
}


#if EXPERIMENTAL

# Examples for filebase64sha512
output "funcFilebase64sha512" {
  value = filebase64sha512("hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for fileexists
output "funcFileexists" {
  value = fileexists("${local.path_module}/hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for filemd5
output "funcFilemd5" {
  value = filemd5("hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for fileset
output "funcFileset0" {
  value = fileset(local.path_module, "files/*.txt")
}
output "funcFileset1" {
  value = fileset(local.path_module, "files/{hello,world}.txt")
}
output "funcFileset2" {
  value = fileset("${local.path_module}/files", "*")
}
output "funcFileset3" {
  value = fileset("${local.path_module}/files", "**")
}

#endif


#if EXPERIMENTAL

# Examples for filesha1
output "funcFilesha1" {
  value = filesha1("hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for filesha256
output "funcFilesha256" {
  value = filesha256("hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for filesha512
output "funcFilesha512" {
  value = filesha512("hello.txt")
}

#endif


#if EXPERIMENTAL

# Examples for flatten
output "funcFlatten0" {
  value = flatten([["a", "b"], [], ["c"]])
}
output "funcFlatten1" {
  value = flatten([[["a", "b"], []], ["c"]])
}

#endif


#if EXPERIMENTAL

# Examples for floor
output "funcFloor0" {
  value = floor(5)
}
output "funcFloor1" {
  value = floor(4.9)
}

#endif


#if EXPERIMENTAL

# Examples for format
output "funcFormat0" {
  value = format("Hello, %s!", "Ander")
}
output "funcFormat1" {
  value = format("There are %d lights", 4)
}
output "funcFormat2" {
  value = format("Hello, %s!", var.name)
}
output "funcFormat3" {
  value = "Hello, ${var.name}!"
}
output "funcFormat4" {
  value = format("%#v", "hello")
}
output "funcFormat5" {
  value = format("%#v", true)
}
output "funcFormat6" {
  value = format("%#v", 1)
}
output "funcFormat7" {
  value = format("%#v", {a = 1})
}
output "funcFormat8" {
  value = format("%#v", [true])
}
output "funcFormat9" {
  value = format("%#v", null)
}

#endif


#if EXPERIMENTAL

# Examples for formatdate
output "funcFormatdate0" {
  value = formatdate("DD MMM YYYY hh:mm ZZZ", "2018-01-02T23:12:01Z")
}
output "funcFormatdate1" {
  value = formatdate("EEEE, DD-MMM-YY hh:mm:ss ZZZ", "2018-01-02T23:12:01Z")
}
output "funcFormatdate2" {
  value = formatdate("EEE, DD MMM YYYY hh:mm:ss ZZZ", "2018-01-02T23:12:01-08:00")
}
output "funcFormatdate3" {
  value = formatdate("MMM DD, YYYY", "2018-01-02T23:12:01Z")
}
output "funcFormatdate4" {
  value = formatdate("HH:mmaa", "2018-01-02T23:12:01Z")
}
output "funcFormatdate5" {
  value = formatdate("h'h'mm", "2018-01-02T23:12:01-08:00")
}
output "funcFormatdate6" {
  value = formatdate("H 'o''clock'", "2018-01-02T23:12:01-08:00")
}

#endif


#if EXPERIMENTAL

# Examples for formatlist
output "funcFormatlist0" {
  value = formatlist("Hello, %s!", ["Valentina", "Ander", "Olivia", "Sam"])
}
output "funcFormatlist1" {
  value = formatlist("%s, %s!", "Salutations", ["Valentina", "Ander", "Olivia", "Sam"])
}

#endif


#if EXPERIMENTAL

# Examples for indent
output "funcIndent" {
  value = "  items: ${indent(2, "[\n  foo,\n  bar,\n]\n")}"
}

#endif


#if EXPERIMENTAL

# Examples for index
output "funcIndex" {
  value = index(["a", "b", "c"], "b")
}

#endif


#if EXPERIMENTAL

# Examples for join
output "funcJoin0" {
  value = join("-", ["foo", "bar", "baz"])
}
output "funcJoin1" {
  value = join(", ", ["foo", "bar", "baz"])
}
output "funcJoin2" {
  value = join(", ", ["foo"])
}

#endif


#if EXPERIMENTAL

# Examples for jsondecode
output "funcJsondecode0" {
  value = jsondecode("{\"hello\": \"world\"}")
}
output "funcJsondecode1" {
  value = jsondecode("true")
}

#endif


# Examples for jsonencode
output "funcJsonencode" {
  value = jsonencode({"hello"="world"})
}


#if EXPERIMENTAL

# Examples for keys
output "funcKeys" {
  value = keys({a=1, c=2, d=3})
}

#endif


# Examples for length
output "funcLength0" {
  value = length([])
}
output "funcLength1" {
  value = length(["a", "b"])
}
output "funcLength2" {
  value = length({"a" = "b"})
}
output "funcLength3" {
  value = length("hello")
}
output "funcLength4" {
  value = length("👾🕹️")
}


#if EXPERIMENTAL

# Examples for list
output "funcList" {
  value = list(1, 2, 3)
}

#endif


#if EXPERIMENTAL

# Examples for log
output "funcLog0" {
  value = log(50, 10)
}
output "funcLog1" {
  value = log(16, 2)
}
output "funcLog2" {
  value = ceil(log(15, 2))
}
output "funcLog3" {
  value = ceil(log(16, 2))
}
output "funcLog4" {
  value = ceil(log(17, 2))
}

#endif


# Examples for lookup
output "funcLookup0" {
  value = lookup({a="ay", b="bee"}, "a", "what?")
}
output "funcLookup1" {
  value = lookup({a="ay", b="bee"}, "c", "what?")
}


#if EXPERIMENTAL

# Examples for lower
output "funcLower0" {
  value = lower("HELLO")
}
output "funcLower1" {
  value = lower("АЛЛО!")
}

#endif


#if EXPERIMENTAL

# Examples for map
output "funcMap" {
  value = map("a", "b", "c", "d")
}

#endif


#if EXPERIMENTAL

# Examples for matchkeys
output "funcMatchkeys0" {
  value = matchkeys(["i-123", "i-abc", "i-def"], ["us-west", "us-east", "us-east"], ["us-east"])
}
output "funcMatchkeys1" {
  value = [for i, z in {"i-123"="us-west","i-abc"="us-east","i-def"="us-east"}: i if z == "us-east"]
}
output "funcMatchkeys2" {
  value = [for x in [{id="i-123",zone="us-west"},{id="i-abc",zone="us-east"}]: x.id if x.zone == "us-east"]
}
output "funcMatchkeys3" {
  value = [for x in simple_resource.a_resource_with_count: x.id if x.input_one == "us-east-1a"]
}

#endif


#if EXPERIMENTAL

# Examples for max
output "funcMax0" {
  value = max(12, 54, 3)
}
output "funcMax1" {
  value = max([12, 54, 3]...)
}

#endif


#if EXPERIMENTAL

# Examples for md5
output "funcMd5" {
  value = md5("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for merge
output "funcMerge0" {
  value = merge({a="b", c="d"}, {e="f", c="z"})
}
output "funcMerge1" {
  value = merge({a="b"}, {a=[1,2], c="z"}, {d=3})
}
output "funcMerge2" {
  value = merge([{a="b", c="d"}, {}, {e="f", c="z"}]...)
}

#endif


#if EXPERIMENTAL

# Examples for min
output "funcMin0" {
  value = min(12, 54, 3)
}
output "funcMin1" {
  value = min([12, 54, 3]...)
}

#endif


#if EXPERIMENTAL

# Examples for nonsensitive
output "funcNonsensitive0" {
  value = var.mixed_content_json
}
output "funcNonsensitive1" {
  value = local.mixed_content
}
output "funcNonsensitive2" {
  value = local.mixed_content["password"]
}
output "funcNonsensitive3" {
  value = nonsensitive(local.mixed_content["username"])
}
output "funcNonsensitive4" {
  value = nonsensitive("clear")
}
output "funcNonsensitive5" {
  value = nonsensitive(var.mixed_content_json)
}
output "funcNonsensitive6" {
  value = nonsensitive(local.mixed_content)
}
output "funcNonsensitive7" {
  value = nonsensitive(local.mixed_content["password"])
}

#endif


#if EXPERIMENTAL

# Examples for one
output "funcOne0" {
  value = one([])
}
output "funcOne1" {
  value = one(["hello"])
}
output "funcOne2" {
  value = one(["hello", "goodbye"])
}
output "funcOne3" {
  value = one(toset([]))
}
output "funcOne4" {
  value = one(toset(["hello"]))
}
output "funcOne5" {
  value = one(toset(["hello","goodbye"]))
}

#endif


#if EXPERIMENTAL

# Examples for parseint
output "funcParseint0" {
  value = parseint("100", 10)
}
output "funcParseint1" {
  value = parseint("FF", 16)
}
output "funcParseint2" {
  value = parseint("-10", 16)
}
output "funcParseint3" {
  value = parseint("1011111011101111", 2)
}
output "funcParseint4" {
  value = parseint("aA", 62)
}
output "funcParseint5" {
  value = parseint("12", 2)
}

#endif


#if EXPERIMENTAL

# Examples for pathexpand
output "funcPathexpand0" {
  value = pathexpand("~/.ssh/id_rsa")
}
output "funcPathexpand1" {
  value = pathexpand("/etc/resolv.conf")
}

#endif


#if EXPERIMENTAL

# Examples for pow
output "funcPow0" {
  value = pow(3, 2)
}
output "funcPow1" {
  value = pow(4, 0)
}

#endif


#if EXPERIMENTAL

# Examples for range
output "funcRange0" {
  value = range(3)
}
output "funcRange1" {
  value = range(1, 4)
}
output "funcRange2" {
  value = range(1, 8, 2)
}
output "funcRange3" {
  value = range(1, 4, 0.5)
}
output "funcRange4" {
  value = range(4, 1)
}
output "funcRange5" {
  value = range(10, 5, -2)
}

#endif


#if EXPERIMENTAL

# Examples for regex
output "funcRegex0" {
  value = regex("[a-z]+", "53453453.345345aaabbbccc23454")
}
output "funcRegex1" {
  value = regex("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)", "2019-02-01")
}
output "funcRegex2" {
  value = regex("^(?:(?P<scheme>[^:/?#]+):)?(?://(?P<authority>[^/?#]*))?", "https://terraform.io/docs/")
}
output "funcRegex3" {
  value = regex("[a-z]+", "53453453.34534523454")
}

#endif


#if EXPERIMENTAL

# Examples for regexall
output "funcRegexall0" {
  value = regexall("[a-z]+", "1234abcd5678efgh9")
}
output "funcRegexall1" {
  value = length(regexall("[a-z]+", "1234abcd5678efgh9"))
}
output "funcRegexall2" {
  value = length(regexall("[a-z]+", "123456789")) > 0
}

#endif


#if EXPERIMENTAL

# Examples for replace
output "funcReplace0" {
  value = replace("1 + 2 + 3", "+", "-")
}
output "funcReplace1" {
  value = replace("hello world", "/w.*d/", "everybody")
}

#endif


#if EXPERIMENTAL

# Examples for reverse
output "funcReverse" {
  value = reverse([1, 2, 3])
}

#endif


#if EXPERIMENTAL

# Examples for rsadecrypt
output "funcRsadecrypt" {
  value = rsadecrypt(filebase64("${local.path_module}/ciphertext"), file("privatekey.pem"))
}

#endif


#if EXPERIMENTAL

# Examples for sensitive
output "funcSensitive0" {
  value = sensitive(1)
}
output "funcSensitive1" {
  value = sensitive("hello")
}
output "funcSensitive2" {
  value = sensitive([])
}

#endif


#if EXPERIMENTAL

# Examples for setintersection
output "funcSetintersection" {
  value = setintersection(["a", "b"], ["b", "c"], ["b", "d"])
}

#endif


#if EXPERIMENTAL

# Examples for setproduct
output "funcSetproduct0" {
  value = setproduct(["development", "staging", "production"], [])
}
output "funcSetproduct1" {
  value = setproduct(["a"], ["b"])
}
output "funcSetproduct2" {
  value = setproduct(["staging", "production"], ["a", 2])
}

#endif


#if EXPERIMENTAL

# Examples for setsubtract
output "funcSetsubtract0" {
  value = setsubtract(["a", "b", "c"], ["a", "c"])
}
output "funcSetsubtract1" {
  value = setunion(setsubtract(["a", "b", "c"], ["a", "c", "d"]), setsubtract(["a", "c", "d"], ["a", "b", "c"]))
}

#endif


#if EXPERIMENTAL

# Examples for setunion
output "funcSetunion" {
  value = setunion(["a", "b"], ["b", "c"], ["d"])
}

#endif


# Examples for sha1
output "funcSha1" {
  value = sha1("hello world")
}


#if EXPERIMENTAL

# Examples for sha256
output "funcSha256" {
  value = sha256("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for sha512
output "funcSha512" {
  value = sha512("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for signum
output "funcSignum0" {
  value = signum(-13)
}
output "funcSignum1" {
  value = signum(0)
}
output "funcSignum2" {
  value = signum(344)
}

#endif


#if EXPERIMENTAL

# Examples for slice
output "funcSlice" {
  value = slice(["a", "b", "c", "d"], 1, 3)
}

#endif


#if EXPERIMENTAL

# Examples for sort
output "funcSort" {
  value = sort(["e", "d", "a", "x"])
}

#endif


# Examples for split
output "funcSplit0" {
  value = split(",", "foo,bar,baz")
}
output "funcSplit1" {
  value = split(",", "foo")
}
output "funcSplit2" {
  value = split(",", "")
}


#if EXPERIMENTAL

# Examples for startswith
output "funcStartswith0" {
  value = startswith("hello world", "hello")
}
output "funcStartswith1" {
  value = startswith("hello world", "world")
}

#endif


#if EXPERIMENTAL

# Examples for strrev
output "funcStrrev0" {
  value = strrev("hello")
}
output "funcStrrev1" {
  value = strrev("a ☃")
}

#endif


#if EXPERIMENTAL

# Examples for substr
output "funcSubstr0" {
  value = substr("hello world", 1, 4)
}
output "funcSubstr1" {
  value = substr("🤔🤷", 0, 1)
}
output "funcSubstr2" {
  value = substr("hello world", -5, -1)
}
output "funcSubstr3" {
  value = substr("hello world", 6, 10)
}

#endif


#if EXPERIMENTAL

# Examples for sum
output "funcSum" {
  value = sum([10, 13, 6, 4.5])
}

#endif


#if EXPERIMENTAL

# Examples for templatefile
output "funcTemplatefile0" {
  value = templatefile("${path.module}/backends.tftpl", { port = 8080, ip_addrs = ["10.0.0.1", "10.0.0.2"] })
}
output "funcTemplatefile1" {
  value = templatefile(
               "${path.module}/config.tftpl",
               {
                 config = {
                   "x"   = "y"
                   "foo" = "bar"
                   "key" = "value"
                 }
               }
              )
}

#endif


#if EXPERIMENTAL

# Examples for textdecodebase64
output "funcTextdecodebase64" {
  value = textdecodebase64("SABlAGwAbABvACAAVwBvAHIAbABkAA==", "UTF-16LE")
}

#endif


#if EXPERIMENTAL

# Examples for textencodebase64
output "funcTextencodebase64" {
  value = textencodebase64("Hello World", "UTF-16LE")
}

#endif


#if EXPERIMENTAL

# Examples for timeadd
output "funcTimeadd" {
  value = timeadd("2017-11-22T00:00:00Z", "10m")
}

#endif


#if EXPERIMENTAL

# Examples for timecmp
output "funcTimecmp0" {
  value = timecmp("2017-11-22T00:00:00Z", "2017-11-22T00:00:00Z")
}
output "funcTimecmp1" {
  value = timecmp("2017-11-22T00:00:00Z", "2017-11-22T01:00:00Z")
}
output "funcTimecmp2" {
  value = timecmp("2017-11-22T01:00:00Z", "2017-11-22T00:00:00Z")
}
output "funcTimecmp3" {
  value = timecmp("2017-11-22T01:00:00Z", "2017-11-22T00:00:00-01:00")
}

#endif


#if EXPERIMENTAL

# Examples for timestamp
output "funcTimestamp" {
  value = timestamp()
}

#endif


#if EXPERIMENTAL

# Examples for title
output "funcTitle" {
  value = title("hello world")
}

#endif


#if EXPERIMENTAL

# Examples for tobool
output "funcTobool0" {
  value = tobool(true)
}
output "funcTobool1" {
  value = tobool("true")
}
output "funcTobool2" {
  value = tobool(null)
}
output "funcTobool3" {
  value = tobool("no")
}
output "funcTobool4" {
  value = tobool(1)
}

#endif


#if EXPERIMENTAL

# Examples for tolist
output "funcTolist0" {
  value = tolist(["a", "b", "c"])
}
output "funcTolist1" {
  value = tolist(["a", "b", 3])
}

#endif


#if EXPERIMENTAL

# Examples for tomap
output "funcTomap0" {
  value = tomap({"a" = 1, "b" = 2})
}
output "funcTomap1" {
  value = tomap({"a" = "foo", "b" = true})
}

#endif


#if EXPERIMENTAL

# Examples for tonumber
output "funcTonumber0" {
  value = tonumber(1)
}
output "funcTonumber1" {
  value = tonumber("1")
}
output "funcTonumber2" {
  value = tonumber(null)
}
output "funcTonumber3" {
  value = tonumber("no")
}

#endif


#if EXPERIMENTAL

# Examples for toset
output "funcToset0" {
  value = toset(["a", "b", "c"])
}
output "funcToset1" {
  value = toset(["a", "b", 3])
}
output "funcToset2" {
  value = toset(["c", "b", "b"])
}

#endif


#if EXPERIMENTAL

# Examples for tostring
output "funcTostring0" {
  value = tostring("hello")
}
output "funcTostring1" {
  value = tostring(1)
}
output "funcTostring2" {
  value = tostring(true)
}
output "funcTostring3" {
  value = tostring(null)
}
output "funcTostring4" {
  value = tostring([])
}

#endif


#if EXPERIMENTAL

# Examples for transpose
output "funcTranspose" {
  value = transpose({"a" = ["1", "2"], "b" = ["2", "3"]})
}

#endif


#if EXPERIMENTAL

# Examples for trim
output "funcTrim0" {
  value = trim("?!hello?!", "!?")
}
output "funcTrim1" {
  value = trim("foobar", "far")
}
output "funcTrim2" {
  value = trim("   hello! world.!  ", "! ")
}

#endif


#if EXPERIMENTAL

# Examples for trimprefix
output "funcTrimprefix0" {
  value = trimprefix("helloworld", "hello")
}
output "funcTrimprefix1" {
  value = trimprefix("helloworld", "cat")
}

#endif


#if EXPERIMENTAL

# Examples for trimspace
output "funcTrimspace" {
  value = trimspace("  hello\n\n")
}

#endif


#if EXPERIMENTAL

# Examples for trimsuffix
output "funcTrimsuffix" {
  value = trimsuffix("helloworld", "world")
}

#endif


#if EXPERIMENTAL

# Examples for try
output "funcTry0" {
  value = local.foo
}
output "funcTry1" {
  value = try(local.foo.bar, "fallback")
}
output "funcTry2" {
  value = try(local.foo.boop, "fallback")
}
output "funcTry3" {
  value = try(local.nonexist, "fallback")
}

#endif


#if EXPERIMENTAL

# Examples for type
output "funcType0" {
  value = type(var.list)
}
output "funcType1" {
  value = type(local.default_list)
}

#endif


#if EXPERIMENTAL

# Examples for upper
output "funcUpper0" {
  value = upper("hello")
}
output "funcUpper1" {
  value = upper("алло!")
}

#endif


#if EXPERIMENTAL

# Examples for urlencode
output "funcUrlencode0" {
  value = urlencode("Hello World!")
}
output "funcUrlencode1" {
  value = urlencode("☃")
}
output "funcUrlencode2" {
  value = "http://example.com/search?q=${urlencode("terraform urlencode")}"
}

#endif


#if EXPERIMENTAL

# Examples for uuid
output "funcUuid" {
  value = uuid()
}

#endif


#if EXPERIMENTAL

# Examples for uuidv5
output "funcUuidv50" {
  value = uuidv5("dns", "www.terraform.io")
}
output "funcUuidv51" {
  value = uuidv5("url", "https://www.terraform.io/")
}
output "funcUuidv52" {
  value = uuidv5("oid", "1.3.6.1.4")
}
output "funcUuidv53" {
  value = uuidv5("x500", "CN=Example,C=GB")
}
output "funcUuidv54" {
  value = uuidv5("6ba7b810-9dad-11d1-80b4-00c04fd430c8", "www.terraform.io")
}
output "funcUuidv55" {
  value = uuidv5("743ac3c0-3bf7-4a5b-9e6c-59360447c757", "LIBS:diskfont.library")
}

#endif


#if EXPERIMENTAL

# Examples for values
output "funcValues" {
  value = values({a=3, c=2, d=1})
}

#endif


#if EXPERIMENTAL

# Examples for yamldecode
output "funcYamldecode0" {
  value = yamldecode("hello: world")
}
output "funcYamldecode1" {
  value = yamldecode("true")
}
output "funcYamldecode2" {
  value = yamldecode("{a: &foo [1, 2, 3], b: *foo}")
}
output "funcYamldecode3" {
  value = yamldecode("{a: &foo [1, *foo, 3]}")
}
output "funcYamldecode4" {
  value = yamldecode("{a: !not-supported foo}")
}

#endif


#if EXPERIMENTAL

# Examples for yamlencode
output "funcYamlencode0" {
  value = yamlencode({"a":"b", "c":"d"})
}
output "funcYamlencode1" {
  value = yamlencode({"foo":[1, 2, 3], "bar": "baz"})
}
output "funcYamlencode2" {
  value = yamlencode({"foo":[1, {"a":"b","c":"d"}, 3], "bar": "baz"})
}

#endif


#if EXPERIMENTAL

# Examples for zipmap
output "funcZipmap" {
  value = zipmap(["a", "b"], [1, 2])
}

#endif


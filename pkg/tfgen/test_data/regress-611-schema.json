{
  "name": "aws",
  "version": "0.0.2",
  "description": "A Pulumi package for creating and managing Amazon Web Services (AWS) cloud resources.",
  "keywords": [
    "pulumi",
    "aws"
  ],
  "homepage": "https://pulumi.io",
  "license": "Apache-2.0",
  "attribution": "This Pulumi package is based on the [`aws` Terraform Provider](https://github.com/hashicorp/terraform-provider-aws).",
  "repository": "https://github.com/phillipedwards/pulumi-aws",
  "meta": {
    "moduleFormat": "(.*)(?:/[^/]*)"
  },
  "language": {
    "nodejs": {
      "packageDescription": "A Pulumi package for creating and managing Amazon Web Services (AWS) cloud resources.",
      "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-aws)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aws` repo](https://github.com/phillipedwards/pulumi-aws/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aws` repo](https://github.com/hashicorp/terraform-provider-aws/issues).",
      "compatibility": "tfbridge20",
      "disableUnionOutputTypes": true
    },
    "python": {
      "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-aws)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aws` repo](https://github.com/phillipedwards/pulumi-aws/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aws` repo](https://github.com/hashicorp/terraform-provider-aws/issues).",
      "compatibility": "tfbridge20",
      "pyproject": {}
    }
  },
  "config": {
    "variables": {
      "region": {
        "type": "string",
        "$ref": "#/types/aws:index/region:Region",
        "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n",
        "defaultInfo": {
          "environment": [
            "AWS_REGION",
            "AWS_DEFAULT_REGION"
          ]
        }
      },
      "skipCredentialsValidation": {
        "type": "boolean",
        "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n",
        "default": false
      },
      "skipGetEc2Platforms": {
        "type": "boolean",
        "description": "Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions.\n",
        "default": true
      },
      "skipMetadataApiCheck": {
        "type": "boolean",
        "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n",
        "default": true
      },
      "skipRegionValidation": {
        "type": "boolean",
        "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n",
        "default": true
      }
    }
  },
  "types": {
    "aws:iam/RoleInlinePolicy:RoleInlinePolicy": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the role.\n"
        },
        "policy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "aws:iam/getGroupUser:getGroupUser": {
      "properties": {
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) specifying the group.\n"
        },
        "path": {
          "type": "string",
          "description": "The path to the role.\n"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "arn",
        "path",
        "userId",
        "userName"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": []
        }
      }
    },
    "aws:index/getAvailabilityZoneFilter:getAvailabilityZoneFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the availability zone to select.\n"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "required": [
        "name",
        "values"
      ]
    },
    "aws:index/getAvailabilityZonesFilter:getAvailabilityZonesFilter": {
      "properties": {
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "required": [
        "name",
        "values"
      ]
    },
    "aws:index/getRegionsFilter:getRegionsFilter": {
      "properties": {
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "required": [
        "name",
        "values"
      ]
    },
    "aws:x/iam/getPolicyDocumentStatement:getPolicyDocumentStatement": {
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of actions that this statement either allows\nor denies. For example, ``[\"ec2:RunInstances\", \"s3:*\"]``.\n"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:x/iam/getPolicyDocumentStatementCondition:getPolicyDocumentStatementCondition"
          },
          "description": "A nested configuration block (described below)\nthat defines a further, possibly-service-specific condition that constrains\nwhether this statement applies.\n\nEach policy may have either zero or more `principals` blocks or zero or more\n`not_principals` blocks, both of which each accept the following arguments:\n"
        },
        "effect": {
          "type": "string",
          "description": "Either \"Allow\" or \"Deny\", to specify whether this\nstatement allows or denies the given actions. The default is \"Allow\".\n"
        },
        "notActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of actions that this statement does *not*\napply to. Used to apply a policy statement to all actions *except* those\nlisted.\n"
        },
        "notPrincipals": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:x/iam/getPolicyDocumentStatementNotPrincipal:getPolicyDocumentStatementNotPrincipal"
          },
          "description": "Like `principals` except gives resources that\nthe statement does *not* apply to.\n"
        },
        "notResources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of resource ARNs that this statement\ndoes *not* apply to. Used to apply a policy statement to all resources\n*except* those listed.\n"
        },
        "principals": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:x/iam/getPolicyDocumentStatementPrincipal:getPolicyDocumentStatementPrincipal"
          },
          "description": "A nested configuration block (described below)\nspecifying a resource (or resource pattern) to which this statement applies.\n"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of resource ARNs that this statement applies\nto. This is required by AWS if used for an IAM policy.\n"
        },
        "sid": {
          "type": "string",
          "description": "An ID for the policy statement.\n"
        }
      },
      "type": "object"
    },
    "aws:x/iam/getPolicyDocumentStatementCondition:getPolicyDocumentStatementCondition": {
      "properties": {
        "test": {
          "type": "string",
          "description": "The name of the\n[IAM condition type](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AccessPolicyLanguage_ConditionType)\nto evaluate.\n"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The values to evaluate the condition against. If multiple\nvalues are provided, the condition matches if at least one of them applies.\n(That is, the tests are combined with the \"OR\" boolean operation.)\n\nWhen multiple `condition` blocks are provided, they must *all* evaluate to true\nfor the policy statement to apply. (In other words, the conditions are combined\nwith the \"AND\" boolean operation.)\n"
        },
        "variable": {
          "type": "string",
          "description": "The name of a\n[Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)\nto apply the condition to. Context variables may either be standard AWS\nvariables starting with `aws:`, or service-specific variables prefixed with\nthe service name.\n"
        }
      },
      "type": "object",
      "required": [
        "test",
        "values",
        "variable"
      ]
    },
    "aws:x/iam/getPolicyDocumentStatementNotPrincipal:getPolicyDocumentStatementNotPrincipal": {
      "properties": {
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of identifiers for principals. When `type`\nis \"AWS\", these are IAM user or role ARNs.\n\nEach policy statement may have zero or more `condition` blocks, which each\naccept the following arguments:\n"
        },
        "type": {
          "type": "string",
          "description": "The type of principal. For AWS accounts this is \"AWS\".\n"
        }
      },
      "type": "object",
      "required": [
        "identifiers",
        "type"
      ]
    },
    "aws:x/iam/getPolicyDocumentStatementPrincipal:getPolicyDocumentStatementPrincipal": {
      "properties": {
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of identifiers for principals. When `type`\nis \"AWS\", these are IAM user or role ARNs.\n\nEach policy statement may have zero or more `condition` blocks, which each\naccept the following arguments:\n"
        },
        "type": {
          "type": "string",
          "description": "The type of principal. For AWS accounts this is \"AWS\".\n"
        }
      },
      "type": "object",
      "required": [
        "identifiers",
        "type"
      ]
    }
  },
  "provider": {
    "description": "The provider type for the aws package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
    "properties": {
      "region": {
        "type": "string",
        "$ref": "#/types/aws:index/region:Region",
        "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n"
      },
      "skipCredentialsValidation": {
        "type": "boolean",
        "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n"
      },
      "skipGetEc2Platforms": {
        "type": "boolean",
        "description": "Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions.\n"
      },
      "skipMetadataApiCheck": {
        "type": "boolean",
        "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n"
      },
      "skipRegionValidation": {
        "type": "boolean",
        "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n"
      }
    },
    "inputProperties": {
      "region": {
        "type": "string",
        "$ref": "#/types/aws:index/region:Region",
        "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n",
        "defaultInfo": {
          "environment": [
            "AWS_REGION",
            "AWS_DEFAULT_REGION"
          ]
        }
      },
      "skipCredentialsValidation": {
        "type": "boolean",
        "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n",
        "default": false
      },
      "skipGetEc2Platforms": {
        "type": "boolean",
        "description": "Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions.\n",
        "default": true
      },
      "skipMetadataApiCheck": {
        "type": "boolean",
        "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n",
        "default": true
      },
      "skipRegionValidation": {
        "type": "boolean",
        "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n",
        "default": true
      }
    }
  },
  "resources": {
    "aws:iam/accessKey:AccessKey": {
      "description": "Provides an IAM access key. This is a set of credentials that allow API requests to be made as an IAM user.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_access_key\" \"lb\" {\n  user    = \"${aws_iam_user.lb.name}\"\n  pgp_key = \"keybase:some_person_that_exists\"\n}\n\nresource \"aws_iam_user\" \"lb\" {\n  name = \"loadbalancer\"\n  path = \"/system/\"\n}\n\nresource \"aws_iam_user_policy\" \"lb_ro\" {\n  name = \"test\"\n  user = \"${aws_iam_user.lb.name}\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\noutput \"secret\" {\n  value = \"${aws_iam_access_key.lb.encrypted_secret}\"\n}\n```\n",
      "properties": {
        "createDate": {
          "type": "string"
        },
        "encryptedSecret": {
          "type": "string"
        },
        "encryptedSesSmtpPasswordV4": {
          "type": "string"
        },
        "keyFingerprint": {
          "type": "string",
          "description": "The fingerprint of the PGP key used to encrypt\nthe secret\n"
        },
        "pgpKey": {
          "type": "string",
          "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:some_person_that_exists`.\n"
        },
        "secret": {
          "type": "string",
          "description": "The secret access key. Note that this will be written\nto the state file. Please supply a `pgp_key` instead, which will prevent the\nsecret from being stored in plain text\n",
          "secret": true
        },
        "sesSmtpPasswordV4": {
          "type": "string",
          "secret": true
        },
        "status": {
          "type": "string",
          "description": "\"Active\" or \"Inactive\". Keys are initially active, but can be made\ninactive by other means.\n"
        },
        "user": {
          "type": "string",
          "description": "The IAM user to associate with this access key.\n"
        }
      },
      "required": [
        "createDate",
        "encryptedSecret",
        "encryptedSesSmtpPasswordV4",
        "keyFingerprint",
        "secret",
        "sesSmtpPasswordV4",
        "user"
      ],
      "inputProperties": {
        "pgpKey": {
          "type": "string",
          "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:some_person_that_exists`.\n",
          "willReplaceOnChanges": true
        },
        "status": {
          "type": "string",
          "description": "\"Active\" or \"Inactive\". Keys are initially active, but can be made\ninactive by other means.\n"
        },
        "user": {
          "type": "string",
          "description": "The IAM user to associate with this access key.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AccessKey resources.\n",
        "properties": {
          "createDate": {
            "type": "string"
          },
          "encryptedSecret": {
            "type": "string"
          },
          "encryptedSesSmtpPasswordV4": {
            "type": "string"
          },
          "keyFingerprint": {
            "type": "string",
            "description": "The fingerprint of the PGP key used to encrypt\nthe secret\n"
          },
          "pgpKey": {
            "type": "string",
            "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:some_person_that_exists`.\n",
            "willReplaceOnChanges": true
          },
          "secret": {
            "type": "string",
            "description": "The secret access key. Note that this will be written\nto the state file. Please supply a `pgp_key` instead, which will prevent the\nsecret from being stored in plain text\n",
            "secret": true
          },
          "sesSmtpPasswordV4": {
            "type": "string",
            "secret": true
          },
          "status": {
            "type": "string",
            "description": "\"Active\" or \"Inactive\". Keys are initially active, but can be made\ninactive by other means.\n"
          },
          "user": {
            "type": "string",
            "description": "The IAM user to associate with this access key.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/accountAlias:AccountAlias": {
      "description": "\u003e **Note:** There is only a single account alias per AWS account.\n\nManages the account alias for the AWS Account.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_account_alias\" \"alias\" {\n  account_alias = \"my-account-alias\"\n}\n```\n\n## Import\n\nThe current Account Alias can be imported using the `account_alias`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/accountAlias:AccountAlias alias my-account-alias\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "accountAlias": {
          "type": "string",
          "description": "The account alias\n",
          "language": {
            "csharp": {
              "name": "Alias"
            }
          }
        }
      },
      "required": [
        "accountAlias"
      ],
      "inputProperties": {
        "accountAlias": {
          "type": "string",
          "description": "The account alias\n",
          "language": {
            "csharp": {
              "name": "Alias"
            }
          },
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "accountAlias"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AccountAlias resources.\n",
        "properties": {
          "accountAlias": {
            "type": "string",
            "description": "The account alias\n",
            "language": {
              "csharp": {
                "name": "Alias"
              }
            },
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/accountPasswordPolicy:AccountPasswordPolicy": {
      "description": "\u003e **Note:** There is only a single policy allowed per AWS account. An existing policy will be lost when using this resource as an effect of this limitation.\n\nManages Password Policy for the AWS Account.\nSee more about [Account Password Policy](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html)\nin the official AWS docs.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_account_password_policy\" \"strict\" {\n  minimum_password_length        = 8\n  require_lowercase_characters   = true\n  require_numbers                = true\n  require_uppercase_characters   = true\n  require_symbols                = true\n  allow_users_to_change_password = true\n}\n```\n\n## Import\n\nIAM Account Password Policy can be imported using the word `iam-account-password-policy`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/accountPasswordPolicy:AccountPasswordPolicy strict iam-account-password-policy\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "allowUsersToChangePassword": {
          "type": "boolean",
          "description": "Whether to allow users to change their own password\n"
        },
        "expirePasswords": {
          "type": "boolean",
          "description": "Indicates whether passwords in the account expire.\nReturns `true` if `max_password_age` contains a value greater than `0`.\nReturns `false` if it is `0` or _not present_.\n"
        },
        "hardExpiry": {
          "type": "boolean",
          "description": "Whether users are prevented from setting a new password after their password has expired\n(i.e. require administrator reset)\n"
        },
        "maxPasswordAge": {
          "type": "integer",
          "description": "The number of days that an user password is valid.\n"
        },
        "minimumPasswordLength": {
          "type": "integer",
          "description": "Minimum length to require for user passwords.\n"
        },
        "passwordReusePrevention": {
          "type": "integer",
          "description": "The number of previous passwords that users are prevented from reusing.\n"
        },
        "requireLowercaseCharacters": {
          "type": "boolean",
          "description": "Whether to require lowercase characters for user passwords.\n"
        },
        "requireNumbers": {
          "type": "boolean",
          "description": "Whether to require numbers for user passwords.\n"
        },
        "requireSymbols": {
          "type": "boolean",
          "description": "Whether to require symbols for user passwords.\n"
        },
        "requireUppercaseCharacters": {
          "type": "boolean",
          "description": "Whether to require uppercase characters for user passwords.\n"
        }
      },
      "required": [
        "expirePasswords",
        "hardExpiry",
        "maxPasswordAge",
        "passwordReusePrevention",
        "requireLowercaseCharacters",
        "requireNumbers",
        "requireSymbols",
        "requireUppercaseCharacters"
      ],
      "inputProperties": {
        "allowUsersToChangePassword": {
          "type": "boolean",
          "description": "Whether to allow users to change their own password\n"
        },
        "hardExpiry": {
          "type": "boolean",
          "description": "Whether users are prevented from setting a new password after their password has expired\n(i.e. require administrator reset)\n"
        },
        "maxPasswordAge": {
          "type": "integer",
          "description": "The number of days that an user password is valid.\n"
        },
        "minimumPasswordLength": {
          "type": "integer",
          "description": "Minimum length to require for user passwords.\n"
        },
        "passwordReusePrevention": {
          "type": "integer",
          "description": "The number of previous passwords that users are prevented from reusing.\n"
        },
        "requireLowercaseCharacters": {
          "type": "boolean",
          "description": "Whether to require lowercase characters for user passwords.\n"
        },
        "requireNumbers": {
          "type": "boolean",
          "description": "Whether to require numbers for user passwords.\n"
        },
        "requireSymbols": {
          "type": "boolean",
          "description": "Whether to require symbols for user passwords.\n"
        },
        "requireUppercaseCharacters": {
          "type": "boolean",
          "description": "Whether to require uppercase characters for user passwords.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering AccountPasswordPolicy resources.\n",
        "properties": {
          "allowUsersToChangePassword": {
            "type": "boolean",
            "description": "Whether to allow users to change their own password\n"
          },
          "expirePasswords": {
            "type": "boolean",
            "description": "Indicates whether passwords in the account expire.\nReturns `true` if `max_password_age` contains a value greater than `0`.\nReturns `false` if it is `0` or _not present_.\n"
          },
          "hardExpiry": {
            "type": "boolean",
            "description": "Whether users are prevented from setting a new password after their password has expired\n(i.e. require administrator reset)\n"
          },
          "maxPasswordAge": {
            "type": "integer",
            "description": "The number of days that an user password is valid.\n"
          },
          "minimumPasswordLength": {
            "type": "integer",
            "description": "Minimum length to require for user passwords.\n"
          },
          "passwordReusePrevention": {
            "type": "integer",
            "description": "The number of previous passwords that users are prevented from reusing.\n"
          },
          "requireLowercaseCharacters": {
            "type": "boolean",
            "description": "Whether to require lowercase characters for user passwords.\n"
          },
          "requireNumbers": {
            "type": "boolean",
            "description": "Whether to require numbers for user passwords.\n"
          },
          "requireSymbols": {
            "type": "boolean",
            "description": "Whether to require symbols for user passwords.\n"
          },
          "requireUppercaseCharacters": {
            "type": "boolean",
            "description": "Whether to require uppercase characters for user passwords.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/group:Group": {
      "description": "Provides an IAM group.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_group\" \"developers\" {\n  name = \"developers\"\n  path = \"/users/\"\n}\n```\n\n## Import\n\nIAM Groups can be imported using the `name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/group:Group developers developers\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS for this group.\n"
        },
        "name": {
          "type": "string",
          "description": "The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both \"ADMINS\" and \"admins\".\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the group.\n"
        },
        "uniqueId": {
          "type": "string",
          "description": "The [unique ID][1] assigned by AWS.\n"
        }
      },
      "required": [
        "arn",
        "name",
        "uniqueId"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both \"ADMINS\" and \"admins\".\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the group.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Group resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS for this group.\n"
          },
          "name": {
            "type": "string",
            "description": "The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both \"ADMINS\" and \"admins\".\n"
          },
          "path": {
            "type": "string",
            "description": "Path in which to create the group.\n"
          },
          "uniqueId": {
            "type": "string",
            "description": "The [unique ID][1] assigned by AWS.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/groupMembership:GroupMembership": {
      "description": "Provides a top level resource to manage IAM Group membership for IAM Users. For\nmore information on managing IAM Groups or IAM Users, see [IAM Groups](https://www.terraform.io/docs/providers/aws/r/iam_group.html) or\n[IAM Users](https://www.terraform.io/docs/providers/aws/r/iam_user.html)\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_group_membership\" \"team\" {\n  name = \"tf-testing-group-membership\"\n\n  users = [\n    \"${aws_iam_user.user_one.name}\",\n    \"${aws_iam_user.user_two.name}\",\n  ]\n\n  group = \"${aws_iam_group.group.name}\"\n}\n\nresource \"aws_iam_group\" \"group\" {\n  name = \"test-group\"\n}\n\nresource \"aws_iam_user\" \"user_one\" {\n  name = \"test-user\"\n}\n\nresource \"aws_iam_user\" \"user_two\" {\n  name = \"test-user-two\"\n}\n```\n",
      "properties": {
        "group": {
          "type": "string",
          "description": "The IAM Group name to attach the list of `users` to\n"
        },
        "name": {
          "type": "string",
          "description": "The name to identify the Group Membership\n"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of IAM User names to associate with the Group\n"
        }
      },
      "required": [
        "group",
        "name",
        "users"
      ],
      "inputProperties": {
        "group": {
          "type": "string",
          "description": "The IAM Group name to attach the list of `users` to\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name to identify the Group Membership\n",
          "willReplaceOnChanges": true
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of IAM User names to associate with the Group\n"
        }
      },
      "requiredInputs": [
        "group",
        "users"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
        "properties": {
          "group": {
            "type": "string",
            "description": "The IAM Group name to attach the list of `users` to\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name to identify the Group Membership\n",
            "willReplaceOnChanges": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of IAM User names to associate with the Group\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/groupPolicy:GroupPolicy": {
      "description": "Provides an IAM policy attached to a group.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_group_policy\" \"my_developer_policy\" {\n  name  = \"my_developer_policy\"\n  group = \"${aws_iam_group.my_developers.id}\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_group\" \"my_developers\" {\n  name = \"developers\"\n  path = \"/users/\"\n}\n```\n",
      "properties": {
        "group": {
          "type": "string",
          "description": "The IAM group to attach to the policy.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the policy.\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n"
        },
        "policy": {
          "type": "string",
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        }
      },
      "required": [
        "group",
        "name",
        "policy"
      ],
      "inputProperties": {
        "group": {
          "type": "string",
          "description": "The IAM group to attach to the policy.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name of the policy.\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "policy": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/documents:PolicyDocument"
            }
          ],
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        }
      },
      "requiredInputs": [
        "group",
        "policy"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering GroupPolicy resources.\n",
        "properties": {
          "group": {
            "type": "string",
            "description": "The IAM group to attach to the policy.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name of the policy.\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "policy": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/documents:PolicyDocument"
              }
            ],
            "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/groupPolicyAttachment:GroupPolicyAttachment": {
      "description": "Attaches a Managed IAM Policy to an IAM group\n\n```hcl\nresource \"aws_iam_group\" \"group\" {\n  name = \"test-group\"\n}\n\nresource \"aws_iam_policy\" \"policy\" {\n  name        = \"test-policy\"\n  description = \"A test policy\"\n  policy      = # omitted\n}\n\nresource \"aws_iam_group_policy_attachment\" \"test-attach\" {\n  group      = \"${aws_iam_group.group.name}\"\n  policy_arn = \"${aws_iam_policy.policy.arn}\"\n}\n```\n",
      "properties": {
        "group": {
          "type": "string",
          "description": "The group the policy should be applied to\n"
        },
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n"
        }
      },
      "required": [
        "group",
        "policyArn"
      ],
      "inputProperties": {
        "group": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/group:Group"
            }
          ],
          "description": "The group the policy should be applied to\n",
          "willReplaceOnChanges": true
        },
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "group",
        "policyArn"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering GroupPolicyAttachment resources.\n",
        "properties": {
          "group": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/group:Group"
              }
            ],
            "description": "The group the policy should be applied to\n",
            "willReplaceOnChanges": true
          },
          "policyArn": {
            "type": "string",
            "$ref": "#/types/aws:index/aRN:ARN",
            "description": "The ARN of the policy you want to apply\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/instanceProfile:InstanceProfile": {
      "description": "Provides an IAM instance profile.\n\n\u003e **NOTE:** Either `role` or `roles` (**deprecated**) must be specified.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_instance_profile\" \"test_profile\" {\n  name  = \"test_profile\"\n  role = \"${aws_iam_role.role.name}\"\n}\n\nresource \"aws_iam_role\" \"role\" {\n  name = \"test_role\"\n  path = \"/\"\n\n  assume_role_policy = \u003c\u003cEOF\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n            },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n        }\n    ]\n}\nEOF\n}\n```\n\n## Import\n\nInstance Profiles can be imported using the `name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/instanceProfile:InstanceProfile test_profile app-instance-profile-1\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS to the instance profile.\n"
        },
        "createDate": {
          "type": "string",
          "description": "The creation timestamp of the instance profile.\n"
        },
        "name": {
          "type": "string",
          "description": "The instance profile's name.\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the profile.\n"
        },
        "role": {
          "type": "string",
          "description": "The role name to include in the profile.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uniqueId": {
          "type": "string",
          "description": "The [unique ID][1] assigned by AWS.\n"
        }
      },
      "required": [
        "arn",
        "createDate",
        "name",
        "tagsAll",
        "uniqueId"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The instance profile's name.\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the profile.\n",
          "willReplaceOnChanges": true
        },
        "role": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/role:Role"
            }
          ],
          "description": "The role name to include in the profile.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering InstanceProfile resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS to the instance profile.\n"
          },
          "createDate": {
            "type": "string",
            "description": "The creation timestamp of the instance profile.\n"
          },
          "name": {
            "type": "string",
            "description": "The instance profile's name.\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "path": {
            "type": "string",
            "description": "Path in which to create the profile.\n",
            "willReplaceOnChanges": true
          },
          "role": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/role:Role"
              }
            ],
            "description": "The role name to include in the profile.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uniqueId": {
            "type": "string",
            "description": "The [unique ID][1] assigned by AWS.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/openIdConnectProvider:OpenIdConnectProvider": {
      "description": "Provides an IAM OpenID Connect provider.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_openid_connect_provider\" \"default\" {\n    url = \"https://accounts.google.com\"\n    client_id_list = [\n     \"266362248691-342342xasdasdasda-apps.googleusercontent.com\"\n    ]\n    thumbprint_list = []\n}\n```\n\n## Import\n\nIAM OpenID Connect Providers can be imported using the `arn`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/openIdConnectProvider:OpenIdConnectProvider default arn:aws:iam::123456789012:oidc-provider/accounts.google.com\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS for this provider.\n"
        },
        "clientIdLists": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.)\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "thumbprintLists": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s).\n"
        },
        "url": {
          "type": "string",
          "description": "The URL of the identity provider. Corresponds to the _iss_ claim.\n"
        }
      },
      "required": [
        "arn",
        "clientIdLists",
        "tagsAll",
        "thumbprintLists",
        "url"
      ],
      "inputProperties": {
        "clientIdLists": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.)\n",
          "willReplaceOnChanges": true
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "thumbprintLists": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s).\n"
        },
        "url": {
          "type": "string",
          "description": "The URL of the identity provider. Corresponds to the _iss_ claim.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "clientIdLists",
        "thumbprintLists",
        "url"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering OpenIdConnectProvider resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS for this provider.\n"
          },
          "clientIdLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.)\n",
            "willReplaceOnChanges": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "thumbprintLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s).\n"
          },
          "url": {
            "type": "string",
            "description": "The URL of the identity provider. Corresponds to the _iss_ claim.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/policy:Policy": {
      "description": "Provides an IAM policy.\n\n```hcl\nresource \"aws_iam_policy\" \"policy\" {\n  name        = \"test_policy\"\n  path        = \"/\"\n  description = \"My test policy\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n```\n\n## Import\n\nIAM Policies can be imported using the `arn`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/policy:Policy administrator arn:aws:iam::123456789012:policy/UsersManageOwnCredentials\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS to this policy.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the IAM policy.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the policy.\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the policy.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n"
        },
        "policy": {
          "type": "string",
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax, `file` function, or the [`aws.x/iam.getPolicyDocument` data\nsource](https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html)\nare all helpful here.\n",
          "language": {
            "csharp": {
              "name": "PolicyDocument"
            }
          }
        },
        "policyId": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "arn",
        "name",
        "policy",
        "policyId",
        "tagsAll"
      ],
      "inputProperties": {
        "description": {
          "type": "string",
          "description": "Description of the IAM policy.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name of the policy.\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the policy.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n",
          "willReplaceOnChanges": true
        },
        "policy": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/documents:PolicyDocument"
            }
          ],
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax, `file` function, or the [`aws.x/iam.getPolicyDocument` data\nsource](https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html)\nare all helpful here.\n",
          "language": {
            "csharp": {
              "name": "PolicyDocument"
            }
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "requiredInputs": [
        "policy"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Policy resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS to this policy.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the IAM policy.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name of the policy.\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "path": {
            "type": "string",
            "description": "Path in which to create the policy.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n",
            "willReplaceOnChanges": true
          },
          "policy": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/documents:PolicyDocument"
              }
            ],
            "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax, `file` function, or the [`aws.x/iam.getPolicyDocument` data\nsource](https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html)\nare all helpful here.\n",
            "language": {
              "csharp": {
                "name": "PolicyDocument"
              }
            }
          },
          "policyId": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object"
      }
    },
    "aws:iam/policyAttachment:PolicyAttachment": {
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The group(s) the policy should be applied to\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the policy. This cannot be an empty string.\n"
        },
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The role(s) the policy should be applied to\n"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The user(s) the policy should be applied to\n"
        }
      },
      "required": [
        "name",
        "policyArn"
      ],
      "inputProperties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/group:Group"
              }
            ]
          },
          "description": "The group(s) the policy should be applied to\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the policy. This cannot be an empty string.\n",
          "willReplaceOnChanges": true
        },
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n",
          "willReplaceOnChanges": true
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/role:Role"
              }
            ]
          },
          "description": "The role(s) the policy should be applied to\n"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/user:User"
              }
            ]
          },
          "description": "The user(s) the policy should be applied to\n"
        }
      },
      "requiredInputs": [
        "policyArn"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering PolicyAttachment resources.\n",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "string",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "$ref": "#/types/aws:iam/group:Group"
                }
              ]
            },
            "description": "The group(s) the policy should be applied to\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the policy. This cannot be an empty string.\n",
            "willReplaceOnChanges": true
          },
          "policyArn": {
            "type": "string",
            "$ref": "#/types/aws:index/aRN:ARN",
            "description": "The ARN of the policy you want to apply\n",
            "willReplaceOnChanges": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "$ref": "#/types/aws:iam/role:Role"
                }
              ]
            },
            "description": "The role(s) the policy should be applied to\n"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "$ref": "#/types/aws:iam/user:User"
                }
              ]
            },
            "description": "The user(s) the policy should be applied to\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/role:Role": {
      "description": "Provides an IAM role.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_role\" \"test_role\" {\n  name = \"test_role\"\n\n  assume_role_policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n}\n```\n\n## Example of Using Data Source for Assume Role Policy\n\n```hcl\ndata \"aws_iam_policy_document\" \"instance-assume-role-policy\" {\n  statement {\n    actions = [\"sts:AssumeRole\"]\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"ec2.amazonaws.com\"]\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"instance\" {\n  name               = \"instance_role\"\n  path               = \"/system/\"\n  assume_role_policy = \"${data.aws_iam_policy_document.instance-assume-role-policy.json}\"\n}\n```\n\n## Import\n\nIAM Roles can be imported using the `name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/role:Role developer developer_name\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) specifying the role.\n"
        },
        "assumeRolePolicy": {
          "type": "string",
          "description": "The policy that grants an entity permission to assume the role.\n\n\u003e **NOTE:** This `assume_role_policy` is very similar but slightly different than just a standard IAM policy and cannot use an `aws.iam.Policy` resource.  It _can_ however, use an `aws.x/iam.getPolicyDocument` data source, see example below for how this could work.\n"
        },
        "createDate": {
          "type": "string",
          "description": "The creation date of the IAM role.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the role.\n"
        },
        "forceDetachPolicies": {
          "type": "boolean",
          "description": "Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.\n"
        },
        "inlinePolicies": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:iam/RoleInlinePolicy:RoleInlinePolicy"
          }
        },
        "managedPolicyArns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSessionDuration": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "The name of the role.\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
        },
        "path": {
          "type": "string",
          "description": "The path to the role.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n"
        },
        "permissionsBoundary": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uniqueId": {
          "type": "string",
          "description": "The stable and unique string identifying the role.\n"
        }
      },
      "required": [
        "arn",
        "assumeRolePolicy",
        "createDate",
        "inlinePolicies",
        "managedPolicyArns",
        "name",
        "namePrefix",
        "tagsAll",
        "uniqueId"
      ],
      "inputProperties": {
        "assumeRolePolicy": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/documents:PolicyDocument"
            }
          ],
          "description": "The policy that grants an entity permission to assume the role.\n\n\u003e **NOTE:** This `assume_role_policy` is very similar but slightly different than just a standard IAM policy and cannot use an `aws.iam.Policy` resource.  It _can_ however, use an `aws.x/iam.getPolicyDocument` data source, see example below for how this could work.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the role.\n"
        },
        "forceDetachPolicies": {
          "type": "boolean",
          "description": "Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.\n"
        },
        "inlinePolicies": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:iam/RoleInlinePolicy:RoleInlinePolicy"
          }
        },
        "managedPolicyArns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSessionDuration": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "The name of the role.\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "path": {
          "type": "string",
          "description": "The path to the role.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n",
          "willReplaceOnChanges": true
        },
        "permissionsBoundary": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "requiredInputs": [
        "assumeRolePolicy"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Role resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) specifying the role.\n"
          },
          "assumeRolePolicy": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/documents:PolicyDocument"
              }
            ],
            "description": "The policy that grants an entity permission to assume the role.\n\n\u003e **NOTE:** This `assume_role_policy` is very similar but slightly different than just a standard IAM policy and cannot use an `aws.iam.Policy` resource.  It _can_ however, use an `aws.x/iam.getPolicyDocument` data source, see example below for how this could work.\n"
          },
          "createDate": {
            "type": "string",
            "description": "The creation date of the IAM role.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the role.\n"
          },
          "forceDetachPolicies": {
            "type": "boolean",
            "description": "Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.\n"
          },
          "inlinePolicies": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:iam/RoleInlinePolicy:RoleInlinePolicy"
            }
          },
          "managedPolicyArns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxSessionDuration": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "The name of the role.\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "path": {
            "type": "string",
            "description": "The path to the role.\nSee [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.\n",
            "willReplaceOnChanges": true
          },
          "permissionsBoundary": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uniqueId": {
            "type": "string",
            "description": "The stable and unique string identifying the role.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/rolePolicy:RolePolicy": {
      "description": "Provides an IAM role policy.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_role_policy\" \"test_policy\" {\n  name = \"test_policy\"\n  role = \"${aws_iam_role.test_role.id}\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role\" \"test_role\" {\n  name = \"test_role\"\n\n  assume_role_policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n}\n```\n\n## Import\n\nIAM Role Policies can be imported using the `role_name:role_policy_name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/rolePolicy:RolePolicy mypolicy role_of_mypolicy_name:mypolicy_name\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the policy.\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n"
        },
        "policy": {
          "type": "string",
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        },
        "role": {
          "type": "string",
          "description": "The IAM role to attach to the policy.\n"
        }
      },
      "required": [
        "name",
        "policy",
        "role"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The name of the policy.\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "policy": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/documents:PolicyDocument"
            }
          ],
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        },
        "role": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/role:Role"
            }
          ],
          "description": "The IAM role to attach to the policy.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "policy",
        "role"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering RolePolicy resources.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the policy.\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "policy": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/documents:PolicyDocument"
              }
            ],
            "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
          },
          "role": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/role:Role"
              }
            ],
            "description": "The IAM role to attach to the policy.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/rolePolicyAttachment:RolePolicyAttachment": {
      "description": "Attaches a Managed IAM Policy to an IAM role\n\n```hcl\nresource \"aws_iam_role\" \"role\" {\n    name = \"test-role\"\n    assume_role_policy = \u003c\u003cEOF\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Action\": \"sts:AssumeRole\",\n          \"Principal\": {\n            \"Service\": \"ec2.amazonaws.com\"\n          },\n          \"Effect\": \"Allow\",\n          \"Sid\": \"\"\n        }\n      ]\n    }\nEOF\n}\n\nresource \"aws_iam_policy\" \"policy\" {\n    name        = \"test-policy\"\n    description = \"A test policy\"\n    policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"test-attach\" {\n    role       = \"${aws_iam_role.role.name}\"\n    policy_arn = \"${aws_iam_policy.policy.arn}\"\n}\n```\n",
      "properties": {
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n"
        },
        "role": {
          "type": "string",
          "description": "The role the policy should be applied to\n"
        }
      },
      "required": [
        "policyArn",
        "role"
      ],
      "inputProperties": {
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n",
          "willReplaceOnChanges": true
        },
        "role": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/role:Role"
            }
          ],
          "description": "The role the policy should be applied to\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "policyArn",
        "role"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering RolePolicyAttachment resources.\n",
        "properties": {
          "policyArn": {
            "type": "string",
            "$ref": "#/types/aws:index/aRN:ARN",
            "description": "The ARN of the policy you want to apply\n",
            "willReplaceOnChanges": true
          },
          "role": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/role:Role"
              }
            ],
            "description": "The role the policy should be applied to\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/samlProvider:SamlProvider": {
      "description": "Provides an IAM SAML provider.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_saml_provider\" \"default\" {\n  name                   = \"myprovider\"\n  saml_metadata_document = \"${file(\"saml-metadata.xml\")}\"\n}\n```\n\n## Import\n\nIAM SAML Providers can be imported using the `arn`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/samlProvider:SamlProvider default arn:aws:iam::123456789012:saml-provider/SAMLADFS\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS for this provider.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the provider to create.\n"
        },
        "samlMetadataDocument": {
          "type": "string",
          "description": "An XML document generated by an identity provider that supports SAML 2.0.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "validUntil": {
          "type": "string",
          "description": "The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.\n"
        }
      },
      "required": [
        "arn",
        "name",
        "samlMetadataDocument",
        "tagsAll",
        "validUntil"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The name of the provider to create.\n",
          "willReplaceOnChanges": true
        },
        "samlMetadataDocument": {
          "type": "string",
          "description": "An XML document generated by an identity provider that supports SAML 2.0.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "requiredInputs": [
        "samlMetadataDocument"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering SamlProvider resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS for this provider.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the provider to create.\n",
            "willReplaceOnChanges": true
          },
          "samlMetadataDocument": {
            "type": "string",
            "description": "An XML document generated by an identity provider that supports SAML 2.0.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "validUntil": {
            "type": "string",
            "description": "The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/serverCertificate:ServerCertificate": {
      "description": "\n\n## Import\n\nIAM Server Certificates can be imported using the `name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/serverCertificate:ServerCertificate certificate example.com-certificate-until-2018\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) specifying the server certificate.\n"
        },
        "certificateBody": {
          "type": "string",
          "description": "(Required) The contents of the public key certificate in\nPEM-encoded format.\n"
        },
        "certificateChain": {
          "type": "string",
          "description": "(Optional) The contents of the certificate chain.\nThis is typically a concatenation of the PEM-encoded public key certificates\nof the chain.\n"
        },
        "expiration": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the Server Certificate\n"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n"
        },
        "path": {
          "type": "string"
        },
        "privateKey": {
          "type": "string",
          "description": "(Required) The contents of the private key in PEM-encoded format.\n",
          "secret": true
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uploadDate": {
          "type": "string"
        }
      },
      "required": [
        "arn",
        "certificateBody",
        "expiration",
        "name",
        "privateKey",
        "tagsAll",
        "uploadDate"
      ],
      "inputProperties": {
        "certificateBody": {
          "type": "string",
          "description": "(Required) The contents of the public key certificate in\nPEM-encoded format.\n",
          "willReplaceOnChanges": true
        },
        "certificateChain": {
          "type": "string",
          "description": "(Optional) The contents of the certificate chain.\nThis is typically a concatenation of the PEM-encoded public key certificates\nof the chain.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name of the Server Certificate\n",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "path": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "privateKey": {
          "type": "string",
          "description": "(Required) The contents of the private key in PEM-encoded format.\n",
          "secret": true,
          "willReplaceOnChanges": true
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "requiredInputs": [
        "certificateBody",
        "privateKey"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ServerCertificate resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) specifying the server certificate.\n"
          },
          "certificateBody": {
            "type": "string",
            "description": "(Required) The contents of the public key certificate in\nPEM-encoded format.\n",
            "willReplaceOnChanges": true
          },
          "certificateChain": {
            "type": "string",
            "description": "(Optional) The contents of the certificate chain.\nThis is typically a concatenation of the PEM-encoded public key certificates\nof the chain.\n",
            "willReplaceOnChanges": true
          },
          "expiration": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name of the Server Certificate\n",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "path": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "privateKey": {
            "type": "string",
            "description": "(Required) The contents of the private key in PEM-encoded format.\n",
            "secret": true,
            "willReplaceOnChanges": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uploadDate": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/serviceLinkedRole:ServiceLinkedRole": {
      "properties": {
        "arn": {
          "type": "string"
        },
        "awsServiceName": {
          "type": "string"
        },
        "createDate": {
          "type": "string"
        },
        "customSuffix": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uniqueId": {
          "type": "string"
        }
      },
      "required": [
        "arn",
        "awsServiceName",
        "createDate",
        "name",
        "path",
        "tagsAll",
        "uniqueId"
      ],
      "inputProperties": {
        "awsServiceName": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "customSuffix": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "requiredInputs": [
        "awsServiceName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ServiceLinkedRole resources.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "awsServiceName": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "createDate": {
            "type": "string"
          },
          "customSuffix": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uniqueId": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/serviceSpecificCredential:ServiceSpecificCredential": {
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "servicePassword": {
          "type": "string",
          "secret": true
        },
        "serviceSpecificCredentialId": {
          "type": "string"
        },
        "serviceUserName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "serviceName",
        "servicePassword",
        "serviceSpecificCredentialId",
        "serviceUserName",
        "userName"
      ],
      "inputProperties": {
        "serviceName": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "status": {
          "type": "string"
        },
        "userName": {
          "type": "string",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "serviceName",
        "userName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ServiceSpecificCredential resources.\n",
        "properties": {
          "serviceName": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "servicePassword": {
            "type": "string",
            "secret": true
          },
          "serviceSpecificCredentialId": {
            "type": "string"
          },
          "serviceUserName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/signingCertificate:SigningCertificate": {
      "properties": {
        "certificateBody": {
          "type": "string"
        },
        "certificateId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "certificateBody",
        "certificateId",
        "userName"
      ],
      "inputProperties": {
        "certificateBody": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "status": {
          "type": "string"
        },
        "userName": {
          "type": "string",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "certificateBody",
        "userName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering SigningCertificate resources.\n",
        "properties": {
          "certificateBody": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "certificateId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/sshKey:SshKey": {
      "description": "Uploads an SSH public key and associates it with the specified IAM user.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_user\" \"user\" {\n  name = \"test-user\"\n  path = \"/\"\n}\n\nresource \"aws_iam_user_ssh_key\" \"user\" {\n  username   = \"${aws_iam_user.user.name}\"\n  encoding   = \"PEM\"\n  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 mytest@mydomain.com\"\n}\n```\n",
      "properties": {
        "encoding": {
          "type": "string",
          "description": "Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH . To retrieve the public key in PEM format, use PEM .\n"
        },
        "fingerprint": {
          "type": "string",
          "description": "The MD5 message digest of the SSH public key.\n"
        },
        "publicKey": {
          "type": "string",
          "description": "The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.\n"
        },
        "sshPublicKeyId": {
          "type": "string",
          "description": "The unique identifier for the SSH public key.\n"
        },
        "status": {
          "type": "string",
          "description": "The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.\n"
        },
        "username": {
          "type": "string",
          "description": "The name of the IAM user to associate the SSH public key with.\n"
        }
      },
      "required": [
        "encoding",
        "fingerprint",
        "publicKey",
        "sshPublicKeyId",
        "status",
        "username"
      ],
      "inputProperties": {
        "encoding": {
          "type": "string",
          "description": "Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH . To retrieve the public key in PEM format, use PEM .\n",
          "willReplaceOnChanges": true
        },
        "publicKey": {
          "type": "string",
          "description": "The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.\n",
          "willReplaceOnChanges": true
        },
        "status": {
          "type": "string",
          "description": "The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.\n"
        },
        "username": {
          "type": "string",
          "description": "The name of the IAM user to associate the SSH public key with.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "encoding",
        "publicKey",
        "username"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering SshKey resources.\n",
        "properties": {
          "encoding": {
            "type": "string",
            "description": "Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH . To retrieve the public key in PEM format, use PEM .\n",
            "willReplaceOnChanges": true
          },
          "fingerprint": {
            "type": "string",
            "description": "The MD5 message digest of the SSH public key.\n"
          },
          "publicKey": {
            "type": "string",
            "description": "The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.\n",
            "willReplaceOnChanges": true
          },
          "sshPublicKeyId": {
            "type": "string",
            "description": "The unique identifier for the SSH public key.\n"
          },
          "status": {
            "type": "string",
            "description": "The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.\n"
          },
          "username": {
            "type": "string",
            "description": "The name of the IAM user to associate the SSH public key with.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/user:User": {
      "description": "Provides an IAM user.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_user\" \"lb\" {\n  name = \"loadbalancer\"\n  path = \"/system/\"\n}\n\nresource \"aws_iam_access_key\" \"lb\" {\n  user = \"${aws_iam_user.lb.name}\"\n}\n\nresource \"aws_iam_user_policy\" \"lb_ro\" {\n  name = \"test\"\n  user = \"${aws_iam_user.lb.name}\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n```\n\n## Import\n\nIAM Users can be imported using the `name`, e.g.\n\n```sh\u003cbreak\u003e\n$ pulumi import aws:iam/user:User lb loadbalancer\n\u003cbreak\u003e```\u003cbreak\u003e\n",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN assigned by AWS for this user.\n"
        },
        "forceDestroy": {
          "type": "boolean",
          "description": "Delete user even if it has non-Terraform-managed IAM access keys, login profile or MFA devices\n"
        },
        "name": {
          "type": "string",
          "description": "The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both \"TESTUSER\" and \"testuser\".\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the user.\n"
        },
        "permissionsBoundary": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uniqueId": {
          "type": "string",
          "description": "The [unique ID][1] assigned by AWS.\n"
        }
      },
      "required": [
        "arn",
        "name",
        "tagsAll",
        "uniqueId"
      ],
      "inputProperties": {
        "forceDestroy": {
          "type": "boolean",
          "description": "Delete user even if it has non-Terraform-managed IAM access keys, login profile or MFA devices\n"
        },
        "name": {
          "type": "string",
          "description": "The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both \"TESTUSER\" and \"testuser\".\n"
        },
        "path": {
          "type": "string",
          "description": "Path in which to create the user.\n"
        },
        "permissionsBoundary": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering User resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN assigned by AWS for this user.\n"
          },
          "forceDestroy": {
            "type": "boolean",
            "description": "Delete user even if it has non-Terraform-managed IAM access keys, login profile or MFA devices\n"
          },
          "name": {
            "type": "string",
            "description": "The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both \"TESTUSER\" and \"testuser\".\n"
          },
          "path": {
            "type": "string",
            "description": "Path in which to create the user.\n"
          },
          "permissionsBoundary": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uniqueId": {
            "type": "string",
            "description": "The [unique ID][1] assigned by AWS.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:iam/userGroupMembership:UserGroupMembership": {
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "groups",
        "user"
      ],
      "inputProperties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "string",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "groups",
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UserGroupMembership resources.\n",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user": {
            "type": "string",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/userLoginProfile:UserLoginProfile": {
      "description": "Provides one-time creation of a IAM user login profile, and uses PGP to\nencrypt the password for safe transport to the user. PGP keys can be\nobtained from Keybase.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_user\" \"u\" {\n  name          = \"auser\"\n  path          = \"/\"\n  force_destroy = true\n}\n\nresource \"aws_iam_user_login_profile\" \"u\" {\n  user    = \"${aws_iam_user.u.name}\"\n  pgp_key = \"keybase:some_person_that_exists\"\n}\n\noutput \"password\" {\n  value = \"${aws_iam_user_login_profile.u.encrypted_password}\"\n}\n```\n\n## Import\n\nIAM Login Profiles may not be imported.\n",
      "properties": {
        "encryptedPassword": {
          "type": "string",
          "description": "The encrypted password, base64 encoded.\n"
        },
        "keyFingerprint": {
          "type": "string",
          "description": "The fingerprint of the PGP key used to encrypt\nthe password\n"
        },
        "password": {
          "type": "string"
        },
        "passwordLength": {
          "type": "integer",
          "description": "The length of the generated\npassword.\n"
        },
        "passwordResetRequired": {
          "type": "boolean",
          "description": "Whether the\nuser should be forced to reset the generated password on first login.\n"
        },
        "pgpKey": {
          "type": "string",
          "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:username`.\n"
        },
        "user": {
          "type": "string",
          "description": "The IAM user's name.\n"
        }
      },
      "required": [
        "encryptedPassword",
        "keyFingerprint",
        "password",
        "passwordResetRequired",
        "user"
      ],
      "inputProperties": {
        "passwordLength": {
          "type": "integer",
          "description": "The length of the generated\npassword.\n",
          "willReplaceOnChanges": true
        },
        "passwordResetRequired": {
          "type": "boolean",
          "description": "Whether the\nuser should be forced to reset the generated password on first login.\n",
          "willReplaceOnChanges": true
        },
        "pgpKey": {
          "type": "string",
          "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:username`.\n",
          "willReplaceOnChanges": true
        },
        "user": {
          "type": "string",
          "description": "The IAM user's name.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UserLoginProfile resources.\n",
        "properties": {
          "encryptedPassword": {
            "type": "string",
            "description": "The encrypted password, base64 encoded.\n"
          },
          "keyFingerprint": {
            "type": "string",
            "description": "The fingerprint of the PGP key used to encrypt\nthe password\n"
          },
          "password": {
            "type": "string"
          },
          "passwordLength": {
            "type": "integer",
            "description": "The length of the generated\npassword.\n",
            "willReplaceOnChanges": true
          },
          "passwordResetRequired": {
            "type": "boolean",
            "description": "Whether the\nuser should be forced to reset the generated password on first login.\n",
            "willReplaceOnChanges": true
          },
          "pgpKey": {
            "type": "string",
            "description": "Either a base-64 encoded PGP public key, or a\nkeybase username in the form `keybase:username`.\n",
            "willReplaceOnChanges": true
          },
          "user": {
            "type": "string",
            "description": "The IAM user's name.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/userPolicy:UserPolicy": {
      "description": "Provides an IAM policy attached to a user.\n\n## Example Usage\n\n```hcl\nresource \"aws_iam_user_policy\" \"lb_ro\" {\n  name = \"test\"\n  user = \"${aws_iam_user.lb.name}\"\n\n  policy = \u003c\u003cEOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_user\" \"lb\" {\n  name = \"loadbalancer\"\n  path = \"/system/\"\n}\n\nresource \"aws_iam_access_key\" \"lb\" {\n  user = \"${aws_iam_user.lb.name}\"\n}\n```\n",
      "properties": {
        "name": {
          "type": "string"
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
        },
        "policy": {
          "type": "string",
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        },
        "user": {
          "type": "string",
          "description": "IAM user to which to attach this policy.\n"
        }
      },
      "required": [
        "name",
        "policy",
        "user"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "namePrefix": {
          "type": "string",
          "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
          "willReplaceOnChanges": true
        },
        "policy": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/documents:PolicyDocument"
            }
          ],
          "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
        },
        "user": {
          "type": "string",
          "description": "IAM user to which to attach this policy.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "policy",
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UserPolicy resources.\n",
        "properties": {
          "name": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
          },
          "policy": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/documents:PolicyDocument"
              }
            ],
            "description": "The policy document. This is a JSON formatted string.\nThe heredoc syntax or `file` function is helpful here.\n"
          },
          "user": {
            "type": "string",
            "description": "IAM user to which to attach this policy.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/userPolicyAttachment:UserPolicyAttachment": {
      "description": "Attaches a Managed IAM Policy to an IAM user\n\n```hcl\nresource \"aws_iam_user\" \"user\" {\n    name = \"test-user\"\n}\n\nresource \"aws_iam_policy\" \"policy\" {\n    name        = \"test-policy\"\n    description = \"A test policy\"\n    policy      = # omitted\n}\n\nresource \"aws_iam_user_policy_attachment\" \"test-attach\" {\n    user       = \"${aws_iam_user.user.name}\"\n    policy_arn = \"${aws_iam_policy.policy.arn}\"\n}\n```\n",
      "properties": {
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n"
        },
        "user": {
          "type": "string",
          "description": "The user the policy should be applied to\n"
        }
      },
      "required": [
        "policyArn",
        "user"
      ],
      "inputProperties": {
        "policyArn": {
          "type": "string",
          "$ref": "#/types/aws:index/aRN:ARN",
          "description": "The ARN of the policy you want to apply\n",
          "willReplaceOnChanges": true
        },
        "user": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:iam/user:User"
            }
          ],
          "description": "The user the policy should be applied to\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "policyArn",
        "user"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UserPolicyAttachment resources.\n",
        "properties": {
          "policyArn": {
            "type": "string",
            "$ref": "#/types/aws:index/aRN:ARN",
            "description": "The ARN of the policy you want to apply\n",
            "willReplaceOnChanges": true
          },
          "user": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:iam/user:User"
              }
            ],
            "description": "The user the policy should be applied to\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:iam/virtualMfaDevice:VirtualMfaDevice": {
      "properties": {
        "arn": {
          "type": "string"
        },
        "base32StringSeed": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "qrCodePng": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "virtualMfaDeviceName": {
          "type": "string"
        }
      },
      "required": [
        "arn",
        "base32StringSeed",
        "qrCodePng",
        "tagsAll",
        "virtualMfaDeviceName"
      ],
      "inputProperties": {
        "path": {
          "type": "string",
          "willReplaceOnChanges": true
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "virtualMfaDeviceName": {
          "type": "string",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "virtualMfaDeviceName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering VirtualMfaDevice resources.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "base32StringSeed": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "willReplaceOnChanges": true
          },
          "qrCodePng": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "virtualMfaDeviceName": {
            "type": "string",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    }
  },
  "functions": {
    "aws:iam/getAccountAlias:getAccountAlias": {
      "description": "## Example Usage\n\n```hcl\ndata \"aws_iam_account_alias\" \"current\" {}\n\noutput \"account_id\" {\n  value = \"${data.aws_iam_account_alias.current.account_alias}\"\n}\n```\n",
      "outputs": {
        "description": "A collection of values returned by getAccountAlias.\n",
        "properties": {
          "accountAlias": {
            "type": "string",
            "description": "The alias associated with the AWS account.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          }
        },
        "type": "object",
        "required": [
          "accountAlias",
          "id"
        ]
      }
    },
    "aws:iam/getGroup:getGroup": {
      "description": "This data source can be used to fetch information about a specific\nIAM group. By using this data source, you can reference IAM group\nproperties without having to hard code ARNs as input.\n\n## Example Usage\n\n```hcl\ndata \"aws_iam_group\" \"example\" {\n  group_name = \"an_example_group_name\"\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getGroup.\n",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The friendly IAM group name to match.\n"
          }
        },
        "type": "object",
        "required": [
          "groupName"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getGroup.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) specifying the group.\n"
          },
          "groupId": {
            "type": "string",
            "description": "The stable and unique string identifying the group.\n"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "path": {
            "type": "string",
            "description": "The path to the role.\n"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:iam/getGroupUser:getGroupUser"
            }
          }
        },
        "type": "object",
        "required": [
          "arn",
          "groupId",
          "groupName",
          "path",
          "users",
          "id"
        ]
      }
    },
    "aws:iam/getInstanceProfile:getInstanceProfile": {
      "description": "This data source can be used to fetch information about a specific\nIAM instance profile. By using this data source, you can reference IAM \ninstance profile properties without having to hard code ARNs as input.\n\n## Example Usage\n\n```hcl\ndata \"aws_iam_instance_profile\" \"example\" {\n  name = \"an_example_instance_profile_name\"\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getInstanceProfile.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The friendly IAM instance profile name to match.\n"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getInstanceProfile.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) specifying the instance profile.\n"
          },
          "createDate": {
            "type": "string",
            "description": "The string representation of the date the instance profile\nwas created.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "description": "The path to the instance profile.\n"
          },
          "roleArn": {
            "type": "string"
          },
          "roleId": {
            "type": "string",
            "description": "The role id associated with this instance profile.\n"
          },
          "roleName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "createDate",
          "name",
          "path",
          "roleArn",
          "roleId",
          "roleName",
          "id"
        ]
      }
    },
    "aws:iam/getInstanceProfiles:getInstanceProfiles": {
      "inputs": {
        "description": "A collection of arguments for invoking getInstanceProfiles.\n",
        "properties": {
          "roleName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "roleName"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getInstanceProfiles.\n",
        "properties": {
          "arns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arns",
          "names",
          "paths",
          "roleName",
          "id"
        ]
      }
    },
    "aws:iam/getOpenidConnectProvider:getOpenidConnectProvider": {
      "inputs": {
        "description": "A collection of arguments for invoking getOpenidConnectProvider.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getOpenidConnectProvider.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "clientIdLists": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "thumbprintLists": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "clientIdLists",
          "tags",
          "thumbprintLists",
          "url",
          "id"
        ]
      }
    },
    "aws:iam/getPolicy:getPolicy": {
      "inputs": {
        "description": "A collection of arguments for invoking getPolicy.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getPolicy.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          },
          "policy": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "arn",
          "description",
          "name",
          "path",
          "policy",
          "policyId",
          "tags",
          "id"
        ]
      }
    },
    "aws:iam/getRole:getRole": {
      "description": "This data source can be used to fetch information about a specific\nIAM role. By using this data source, you can reference IAM role\nproperties without having to hard code ARNs as input.\n\n## Example Usage\n\n```hcl\ndata \"aws_iam_role\" \"example\" {\n  name = \"an_example_role_name\"\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getRole.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The friendly IAM role name to match.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getRole.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) specifying the role.\n"
          },
          "assumeRolePolicy": {
            "type": "string",
            "description": "The policy document associated with the role.\n"
          },
          "createDate": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "maxSessionDuration": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "description": "The path to the role.\n"
          },
          "permissionsBoundary": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "uniqueId": {
            "type": "string",
            "description": "The stable and unique string identifying the role.\n"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "assumeRolePolicy",
          "createDate",
          "description",
          "maxSessionDuration",
          "name",
          "path",
          "permissionsBoundary",
          "tags",
          "uniqueId",
          "id"
        ]
      }
    },
    "aws:iam/getRoles:getRoles": {
      "inputs": {
        "description": "A collection of arguments for invoking getRoles.\n",
        "properties": {
          "nameRegex": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getRoles.\n",
        "properties": {
          "arns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "nameRegex": {
            "type": "string"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathPrefix": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arns",
          "names",
          "id"
        ]
      }
    },
    "aws:iam/getSamlProvider:getSamlProvider": {
      "inputs": {
        "description": "A collection of arguments for invoking getSamlProvider.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "arn"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getSamlProvider.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "createDate": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "name": {
            "type": "string"
          },
          "samlMetadataDocument": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "validUntil": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "createDate",
          "name",
          "samlMetadataDocument",
          "tags",
          "validUntil",
          "id"
        ]
      }
    },
    "aws:iam/getServerCertificate:getServerCertificate": {
      "inputs": {
        "description": "A collection of arguments for invoking getServerCertificate.\n",
        "properties": {
          "latest": {
            "type": "boolean",
            "description": "sort results by expiration date. returns the certificate with expiration date in furthest in the future.\n"
          },
          "name": {
            "type": "string",
            "description": "exact name of the cert to lookup\n"
          },
          "namePrefix": {
            "type": "string",
            "description": "prefix of cert to filter by\n"
          },
          "pathPrefix": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getServerCertificate.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "certificateBody": {
            "type": "string"
          },
          "certificateChain": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "latest": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "namePrefix": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          },
          "uploadDate": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "certificateBody",
          "certificateChain",
          "expirationDate",
          "name",
          "path",
          "uploadDate",
          "id"
        ]
      }
    },
    "aws:iam/getSessionContext:getSessionContext": {
      "inputs": {
        "description": "A collection of arguments for invoking getSessionContext.\n",
        "properties": {
          "arn": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getSessionContext.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "issuerArn": {
            "type": "string"
          },
          "issuerId": {
            "type": "string"
          },
          "issuerName": {
            "type": "string"
          },
          "sessionName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "issuerArn",
          "issuerId",
          "issuerName",
          "sessionName",
          "id"
        ]
      }
    },
    "aws:iam/getUser:getUser": {
      "inputs": {
        "description": "A collection of arguments for invoking getUser.\n",
        "properties": {
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "userName"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getUser.\n",
        "properties": {
          "arn": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "path": {
            "type": "string"
          },
          "permissionsBoundary": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "path",
          "permissionsBoundary",
          "tags",
          "userId",
          "userName",
          "id"
        ]
      }
    },
    "aws:iam/getUserSshKey:getUserSshKey": {
      "inputs": {
        "description": "A collection of arguments for invoking getUserSshKey.\n",
        "properties": {
          "encoding": {
            "type": "string"
          },
          "sshPublicKeyId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "encoding",
          "sshPublicKeyId",
          "username"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getUserSshKey.\n",
        "properties": {
          "encoding": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "publicKey": {
            "type": "string"
          },
          "sshPublicKeyId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "encoding",
          "fingerprint",
          "publicKey",
          "sshPublicKeyId",
          "status",
          "username",
          "id"
        ]
      }
    },
    "aws:iam/getUsers:getUsers": {
      "inputs": {
        "description": "A collection of arguments for invoking getUsers.\n",
        "properties": {
          "nameRegex": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getUsers.\n",
        "properties": {
          "arns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "nameRegex": {
            "type": "string"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathPrefix": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arns",
          "names",
          "id"
        ]
      }
    },
    "aws:index/getArn:getArn": {
      "inputs": {
        "description": "A collection of arguments for invoking getArn.\n",
        "properties": {
          "arn": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "arn"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getArn.\n",
        "properties": {
          "account": {
            "type": "string"
          },
          "arn": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "partition": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "account",
          "arn",
          "partition",
          "region",
          "resource",
          "service",
          "id"
        ]
      }
    },
    "aws:index/getAvailabilityZone:getAvailabilityZone": {
      "description": "`aws.getAvailabilityZone` provides details about a specific availability zone (AZ)\nin the current region.\n\nThis can be used both to validate an availability zone given in a variable\nand to split the AZ name into its component parts of an AWS region and an\nAZ identifier letter. The latter may be useful e.g. for implementing a\nconsistent subnet numbering scheme across several regions by mapping both\nthe region and the subnet letter to network numbers.\n\nThis is different from the `aws.getAvailabilityZones` (plural) data source,\nwhich provides a list of the available zones.\n\n## Example Usage\n\nThe following example shows how this data source might be used to derive\nVPC and subnet CIDR prefixes systematically for an availability zone.\n\n```hcl\nvariable \"region_number\" {\n  # Arbitrary mapping of region name to number to use in\n  # a VPC's CIDR prefix.\n  default = {\n    us-east-1      = 1\n    us-west-1      = 2\n    us-west-2      = 3\n    eu-central-1   = 4\n    ap-northeast-1 = 5\n  }\n}\n\nvariable \"az_number\" {\n  # Assign a number to each AZ letter used in our configuration\n  default = {\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n  }\n}\n\n# Retrieve the AZ where we want to create network resources\n# This must be in the region selected on the AWS provider.\ndata \"aws_availability_zone\" \"example\" {\n  name = \"eu-central-1a\"\n}\n\n# Create a VPC for the region associated with the AZ\nresource \"aws_vpc\" \"example\" {\n  cidr_block = \"${cidrsubnet(\"10.0.0.0/8\", 4, var.region_number[data.aws_availability_zone.example.region])}\"\n}\n\n# Create a subnet for the AZ within the regional VPC\nresource \"aws_subnet\" \"example\" {\n  vpc_id     = \"${aws_vpc.example.id}\"\n  cidr_block = \"${cidrsubnet(aws_vpc.example.cidr_block, 4, var.az_number[data.aws_availability_zone.example.name_suffix])}\"\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getAvailabilityZone.\n",
        "properties": {
          "allAvailabilityZones": {
            "type": "boolean"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getAvailabilityZoneFilter:getAvailabilityZoneFilter"
            }
          },
          "name": {
            "type": "string",
            "description": "The full name of the availability zone to select.\n"
          },
          "state": {
            "type": "string",
            "description": "A specific availability zone state to require. May\nbe any of `\"available\"`, `\"information\"`, `\"impaired\"` or `\"available\"`.\n\nAll reasonable uses of this data source will specify `name`, since `state`\nalone would match a single AZ only in a region that itself has only one AZ.\n"
          },
          "zoneId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getAvailabilityZone.\n",
        "properties": {
          "allAvailabilityZones": {
            "type": "boolean"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getAvailabilityZoneFilter:getAvailabilityZoneFilter"
            }
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the selected availability zone.\n"
          },
          "nameSuffix": {
            "type": "string",
            "description": "The part of the AZ name that appears after the region name,\nuniquely identifying the AZ within its region.\n"
          },
          "networkBorderGroup": {
            "type": "string"
          },
          "optInStatus": {
            "type": "string"
          },
          "parentZoneId": {
            "type": "string"
          },
          "parentZoneName": {
            "type": "string"
          },
          "region": {
            "type": "string",
            "description": "The region where the selected availability zone resides.\nThis is always the region selected on the provider, since this data source\nsearches only within that region.\n"
          },
          "state": {
            "type": "string",
            "description": "The current state of the AZ.\n"
          },
          "zoneId": {
            "type": "string"
          },
          "zoneType": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "groupName",
          "name",
          "nameSuffix",
          "networkBorderGroup",
          "optInStatus",
          "parentZoneId",
          "parentZoneName",
          "region",
          "state",
          "zoneId",
          "zoneType",
          "id"
        ]
      }
    },
    "aws:index/getAvailabilityZones:getAvailabilityZones": {
      "description": "The Availability Zones data source allows access to the list of AWS\nAvailability Zones which can be accessed by an AWS account within the region\nconfigured in the provider.\n\nThis is different from the `aws.getAvailabilityZone` (singular) data source,\nwhich provides some details about a specific availability zone.\n\n## Example Usage\n\n```hcl\n# Declare the data source\ndata \"aws_availability_zones\" \"available\" {}\n\n# e.g. Create subnets in the first two available availability zones\n\nresource \"aws_subnet\" \"primary\" {\n  availability_zone = \"${data.aws_availability_zones.available.names[0]}\"\n\n  # ...\n}\n\nresource \"aws_subnet\" \"secondary\" {\n  availability_zone = \"${data.aws_availability_zones.available.names[1]}\"\n\n  # ...\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getAvailabilityZones.\n",
        "properties": {
          "allAvailabilityZones": {
            "type": "boolean"
          },
          "excludeNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludeZoneIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getAvailabilityZonesFilter:getAvailabilityZonesFilter"
            }
          },
          "state": {
            "type": "string",
            "description": "Allows to filter list of Availability Zones based on their\ncurrent state. Can be either `\"available\"`, `\"information\"`, `\"impaired\"` or\n`\"unavailable\"`. By default the list includes a complete set of Availability Zones\nto which the underlying AWS account has access, regardless of their state.\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getAvailabilityZones.\n",
        "properties": {
          "allAvailabilityZones": {
            "type": "boolean"
          },
          "excludeNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludeZoneIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getAvailabilityZonesFilter:getAvailabilityZonesFilter"
            }
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the Availability Zone names available to the account.\n"
          },
          "state": {
            "type": "string"
          },
          "zoneIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "groupNames",
          "names",
          "zoneIds",
          "id"
        ]
      }
    },
    "aws:index/getBillingServiceAccount:getBillingServiceAccount": {
      "description": "Use this data source to get the Account ID of the [AWS Billing and Cost Management Service Account](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-getting-started.html#step-2) for the purpose of whitelisting in S3 bucket policy.\n\n## Example Usage\n\n```hcl\ndata \"aws_billing_service_account\" \"main\" {}\n\nresource \"aws_s3_bucket\" \"billing_logs\" {\n  bucket = \"my-billing-tf-test-bucket\"\n  acl    = \"private\"\n\n  policy = \u003c\u003cPOLICY\n{\n  \"Id\": \"Policy\",\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket\",\n      \"Principal\": {\n        \"AWS\": [\n          \"${data.aws_billing_service_account.main.id}\"\n        ]\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:PutObject\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket/AWSLogs/*\",\n      \"Principal\": {\n        \"AWS\": [\n          \"${data.aws_billing_service_account.main.id}\"\n        ]\n      }\n    }\n  ]\n}\nPOLICY\n}\n```\n",
      "outputs": {
        "description": "A collection of values returned by getBillingServiceAccount.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the AWS billing service account.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          }
        },
        "type": "object",
        "required": [
          "arn",
          "id"
        ]
      }
    },
    "aws:index/getCallerIdentity:getCallerIdentity": {
      "description": "## Example Usage\n\n```hcl\ndata \"aws_caller_identity\" \"current\" {}\n\noutput \"account_id\" {\n  value = \"${data.aws_caller_identity.current.account_id}\"\n}\n\noutput \"caller_arn\" {\n  value = \"${data.aws_caller_identity.current.arn}\"\n}\n\noutput \"caller_user\" {\n  value = \"${data.aws_caller_identity.current.user_id}\"\n}\n```\n",
      "outputs": {
        "description": "A collection of values returned by getCallerIdentity.\n",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The AWS Account ID number of the account that owns or contains the calling entity.\n"
          },
          "arn": {
            "type": "string",
            "description": "The AWS ARN associated with the calling entity.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the calling entity.\n"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "arn",
          "userId",
          "id"
        ]
      }
    },
    "aws:index/getDefaultTags:getDefaultTags": {
      "inputs": {
        "description": "A collection of arguments for invoking getDefaultTags.\n",
        "properties": {
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getDefaultTags.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "tags",
          "id"
        ]
      }
    },
    "aws:index/getIpRanges:getIpRanges": {
      "description": "Use this data source to get the [IP ranges](http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html) of various AWS products and services.\n\n## Example Usage\n\n```hcl\ndata \"aws_ip_ranges\" \"european_ec2\" {\n  regions  = [\"eu-west-1\", \"eu-central-1\"]\n  services = [\"ec2\"]\n}\n\nresource \"aws_security_group\" \"from_europe\" {\n  name = \"from_europe\"\n\n  ingress {\n    from_port   = \"443\"\n    to_port     = \"443\"\n    protocol    = \"tcp\"\n    cidr_blocks = [\"${data.aws_ip_ranges.european_ec2.cidr_blocks}\"]\n  }\n\n  tags {\n    CreateDate = \"${data.aws_ip_ranges.european_ec2.create_date}\"\n    SyncToken  = \"${data.aws_ip_ranges.european_ec2.sync_token}\"\n  }\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getIpRanges.\n",
        "properties": {
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter IP ranges by regions (or include all regions, if\nomitted). Valid items are `global` (for `cloudfront`) as well as all AWS regions\n(e.g. `eu-central-1`)\n"
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "services"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getIpRanges.\n",
        "properties": {
          "cidrBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The lexically ordered list of CIDR blocks.\n"
          },
          "createDate": {
            "type": "string",
            "description": "The publication time of the IP ranges (e.g. `2016-08-03-23-46-05`).\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ipv6CidrBlocks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "syncToken": {
            "type": "integer",
            "description": "The publication time of the IP ranges, in Unix epoch time format\n(e.g. `1470267965`).\n"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "cidrBlocks",
          "createDate",
          "ipv6CidrBlocks",
          "services",
          "syncToken",
          "id"
        ]
      }
    },
    "aws:index/getPartition:getPartition": {
      "description": "## Example Usage\n\n```hcl\ndata \"aws_partition\" \"current\" {}\n\ndata \"aws_iam_policy_document\" \"s3_policy\" {\n  statement {\n    sid = \"1\"\n\n    actions = [\n      \"s3:ListBucket\",\n    ]\n\n    resources = [\n      \"arn:${data.aws_partition.current.partition}:s3:::my-bucket\",\n    ]\n  }\n}\n```\n",
      "outputs": {
        "description": "A collection of values returned by getPartition.\n",
        "properties": {
          "dnsSuffix": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "partition": {
            "type": "string"
          },
          "reverseDnsPrefix": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "dnsSuffix",
          "partition",
          "reverseDnsPrefix",
          "id"
        ]
      }
    },
    "aws:index/getRegion:getRegion": {
      "description": "`aws.getRegion` provides details about a specific AWS region.\n\nAs well as validating a given region name (and optionally obtaining its\nendpoint) this resource can be used to discover the name of the region\nconfigured within the provider. The latter can be useful in a child module\nwhich is inheriting an AWS provider configuration from its parent module.\n\n## Example Usage\n\nThe following example shows how the resource might be used to obtain\nthe name of the AWS region configured on the provider.\n\n```hcl\ndata \"aws_region\" \"current\" {\n  current = true\n}\n```\n",
      "inputs": {
        "description": "A collection of arguments for invoking getRegion.\n",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "The endpoint of the region to select.\n\nAt least one of the above attributes should be provided to ensure that only\none region is matched.\n"
          },
          "name": {
            "type": "string",
            "description": "The full name of the region to select.\n"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getRegion.\n",
        "properties": {
          "description": {
            "type": "string"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint for the selected region.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the selected region.\n"
          }
        },
        "type": "object",
        "required": [
          "description",
          "endpoint",
          "name",
          "id"
        ]
      }
    },
    "aws:index/getRegions:getRegions": {
      "inputs": {
        "description": "A collection of arguments for invoking getRegions.\n",
        "properties": {
          "allRegions": {
            "type": "boolean"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getRegionsFilter:getRegionsFilter"
            }
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getRegions.\n",
        "properties": {
          "allRegions": {
            "type": "boolean"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:index/getRegionsFilter:getRegionsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "names",
          "id"
        ]
      }
    },
    "aws:index/getService:getService": {
      "inputs": {
        "description": "A collection of arguments for invoking getService.\n",
        "properties": {
          "dnsName": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "reverseDnsName": {
            "type": "string"
          },
          "reverseDnsPrefix": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getService.\n",
        "properties": {
          "dnsName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "partition": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "reverseDnsName": {
            "type": "string"
          },
          "reverseDnsPrefix": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "supported": {
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "dnsName",
          "partition",
          "region",
          "reverseDnsName",
          "reverseDnsPrefix",
          "serviceId",
          "supported",
          "id"
        ]
      }
    },
    "aws:x/iam/getPolicyDocument:getPolicyDocument": {
      "inputs": {
        "description": "A collection of arguments for invoking getPolicyDocument.\n",
        "properties": {
          "overrideJson": {
            "type": "string",
            "deprecationMessage": "Use the attribute \"override_policy_documents\" instead."
          },
          "overridePolicyDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyId": {
            "type": "string",
            "description": "An ID for the policy document.\n"
          },
          "sourceJson": {
            "type": "string",
            "deprecationMessage": "Use the attribute \"source_policy_documents\" instead."
          },
          "sourcePolicyDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:x/iam/getPolicyDocumentStatement:getPolicyDocumentStatement"
            },
            "description": "A nested configuration block (described below)\nconfiguring one *statement* to be included in the policy document.\n\nEach document configuration must have one or more `statement` blocks, which\neach accept the following arguments:\n"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "outputs": {
        "description": "A collection of values returned by getPolicyDocument.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "json": {
            "type": "string",
            "description": "The above arguments serialized as a standard JSON policy document.\n"
          },
          "overrideJson": {
            "type": "string",
            "deprecationMessage": "Use the attribute \"override_policy_documents\" instead."
          },
          "overridePolicyDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyId": {
            "type": "string"
          },
          "sourceJson": {
            "type": "string",
            "deprecationMessage": "Use the attribute \"source_policy_documents\" instead."
          },
          "sourcePolicyDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:x/iam/getPolicyDocumentStatement:getPolicyDocumentStatement"
            }
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "json",
          "id"
        ]
      }
    }
  }
}
